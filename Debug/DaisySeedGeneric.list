
DaisySeedGeneric.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ae8  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08009d80  08009d80  0000ad80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08009db8  08009db8  0000adb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000008  08009dc0  08009dc0  0000adc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000064  24000000  08009dc8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005a0  24000064  08009e2c  0000b064  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000604  08009e2c  0000b604  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000b064  2**0
                  CONTENTS, READONLY
  9 .DTCMRAM_Section 00000000  20000000  20000000  0000b092  2**0
                  CONTENTS
 10 .ITCMRAM_Section 00000000  00000000  00000000  0000b092  2**0
                  CONTENTS
 11 .RAM_D3_Section 00000000  38000000  38000000  0000b092  2**0
                  CONTENTS
 12 .RAM_D2_Section 00000000  30000000  30000000  0000b092  2**0
                  CONTENTS
 13 .QFLASH_Section 00000000  90000000  90000000  0000b092  2**0
                  CONTENTS
 14 .SDRAM_Section 00000000  c0000000  c0000000  0000b092  2**0
                  CONTENTS
 15 .debug_info   0001856c  00000000  00000000  0000b092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002ec4  00000000  00000000  000235fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000ea0  00000000  00000000  000264c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000b29  00000000  00000000  00027368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003a9cf  00000000  00000000  00027e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00015307  00000000  00000000  00062860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0015efb1  00000000  00000000  00077b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001d6b18  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00003f34  00000000  00000000  001d6b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000055  00000000  00000000  001daa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000064 	.word	0x24000064
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009d68 	.word	0x08009d68

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000068 	.word	0x24000068
 80002d4:	08009d68 	.word	0x08009d68

080002d8 <_Z20ConvertToAudioBufferPlP11AudioBuffer>:
int32_t txBuffer[SAI_BUFFER_SIZE] = {0};

// ------------------------------------------------------------------------
// Convert int32_t buffer to float AudioBuffer
// ------------------------------------------------------------------------
void ConvertToAudioBuffer( int32_t* intBuf, AudioBuffer* floatBuf) {
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < AUDIO_BUFFER_SIZE; i++) {
 80002e2:	2300      	movs	r3, #0
 80002e4:	60fb      	str	r3, [r7, #12]
 80002e6:	e02d      	b.n	8000344 <_Z20ConvertToAudioBufferPlP11AudioBuffer+0x6c>
        floatBuf[i].Left = int32ToFloat(intBuf[i * 2]);
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	00db      	lsls	r3, r3, #3
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	4413      	add	r3, r2
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80002f6:	ee07 3a90 	vmov	s15, r3
 80002fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	00db      	lsls	r3, r3, #3
 8000302:	683a      	ldr	r2, [r7, #0]
 8000304:	4413      	add	r3, r2
 8000306:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8000358 <_Z20ConvertToAudioBufferPlP11AudioBuffer+0x80>
 800030a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800030e:	edc3 7a01 	vstr	s15, [r3, #4]
        floatBuf[i].Right = int32ToFloat(intBuf[i * 2 + 1]);
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	00db      	lsls	r3, r3, #3
 8000316:	3304      	adds	r3, #4
 8000318:	687a      	ldr	r2, [r7, #4]
 800031a:	4413      	add	r3, r2
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000322:	ee07 3a90 	vmov	s15, r3
 8000326:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	00db      	lsls	r3, r3, #3
 800032e:	683a      	ldr	r2, [r7, #0]
 8000330:	4413      	add	r3, r2
 8000332:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8000358 <_Z20ConvertToAudioBufferPlP11AudioBuffer+0x80>
 8000336:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800033a:	edc3 7a00 	vstr	s15, [r3]
    for (size_t i = 0; i < AUDIO_BUFFER_SIZE; i++) {
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	3301      	adds	r3, #1
 8000342:	60fb      	str	r3, [r7, #12]
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	2b03      	cmp	r3, #3
 8000348:	d9ce      	bls.n	80002e8 <_Z20ConvertToAudioBufferPlP11AudioBuffer+0x10>
    }
}
 800034a:	bf00      	nop
 800034c:	bf00      	nop
 800034e:	3714      	adds	r7, #20
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	4afffffe 	.word	0x4afffffe

0800035c <_Z22ConvertFromAudioBufferP11AudioBufferPl>:

// ------------------------------------------------------------------------
// Convert float AudioBuffer to int32_t buffer
// ------------------------------------------------------------------------
void ConvertFromAudioBuffer(AudioBuffer* floatBuf, int32_t* intBuf) {
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < AUDIO_BUFFER_SIZE; i++) {
 8000366:	2300      	movs	r3, #0
 8000368:	60fb      	str	r3, [r7, #12]
 800036a:	e029      	b.n	80003c0 <_Z22ConvertFromAudioBufferP11AudioBufferPl+0x64>
        intBuf[i * 2] = floatToInt32(floatBuf[i].Left);
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	00db      	lsls	r3, r3, #3
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	4413      	add	r3, r2
 8000374:	edd3 7a01 	vldr	s15, [r3, #4]
 8000378:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80003d4 <_Z22ConvertFromAudioBufferP11AudioBufferPl+0x78>
 800037c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	00db      	lsls	r3, r3, #3
 8000384:	683a      	ldr	r2, [r7, #0]
 8000386:	4413      	add	r3, r2
 8000388:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800038c:	ee17 2a90 	vmov	r2, s15
 8000390:	601a      	str	r2, [r3, #0]
        intBuf[i * 2 + 1] = floatToInt32(floatBuf[i].Right);
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	00db      	lsls	r3, r3, #3
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	4413      	add	r3, r2
 800039a:	edd3 7a00 	vldr	s15, [r3]
 800039e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80003d4 <_Z22ConvertFromAudioBufferP11AudioBufferPl+0x78>
 80003a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	00db      	lsls	r3, r3, #3
 80003aa:	3304      	adds	r3, #4
 80003ac:	683a      	ldr	r2, [r7, #0]
 80003ae:	4413      	add	r3, r2
 80003b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80003b4:	ee17 2a90 	vmov	r2, s15
 80003b8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < AUDIO_BUFFER_SIZE; i++) {
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	3301      	adds	r3, #1
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	2b03      	cmp	r3, #3
 80003c4:	d9d2      	bls.n	800036c <_Z22ConvertFromAudioBufferP11AudioBufferPl+0x10>
    }
}
 80003c6:	bf00      	nop
 80003c8:	bf00      	nop
 80003ca:	3714      	adds	r7, #20
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	4afffffe 	.word	0x4afffffe

080003d8 <HAL_SAI_TxCpltCallback>:

// ------------------------------------------------------------------------
//  Callback for transmission complete
// ------------------------------------------------------------------------
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e0:	b672      	cpsid	i
}
 80003e2:	bf00      	nop
    __disable_irq();
    // Convert audio buffer from float to int32_t format and store in the second half of txBuffer
    ConvertFromAudioBuffer(pOut, &txBuffer[SAI_HALF_BUFFER_SIZE]);
 80003e4:	4b05      	ldr	r3, [pc, #20]	@ (80003fc <HAL_SAI_TxCpltCallback+0x24>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4905      	ldr	r1, [pc, #20]	@ (8000400 <HAL_SAI_TxCpltCallback+0x28>)
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff ffb6 	bl	800035c <_Z22ConvertFromAudioBufferP11AudioBufferPl>
  __ASM volatile ("cpsie i" : : : "memory");
 80003f0:	b662      	cpsie	i
}
 80003f2:	bf00      	nop
    __enable_irq();
}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	24000000 	.word	0x24000000
 8000400:	24000140 	.word	0x24000140

08000404 <HAL_SAI_TxHalfCpltCallback>:

// ------------------------------------------------------------------------
//  Callback for half transmission complete
// ------------------------------------------------------------------------
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800040c:	b672      	cpsid	i
}
 800040e:	bf00      	nop
    __disable_irq();
    // Convert audio buffer from float to int32_t format and store in the first half of txBuffer
    ConvertFromAudioBuffer(pOut, txBuffer);
 8000410:	4b05      	ldr	r3, [pc, #20]	@ (8000428 <HAL_SAI_TxHalfCpltCallback+0x24>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4905      	ldr	r1, [pc, #20]	@ (800042c <HAL_SAI_TxHalfCpltCallback+0x28>)
 8000416:	4618      	mov	r0, r3
 8000418:	f7ff ffa0 	bl	800035c <_Z22ConvertFromAudioBufferP11AudioBufferPl>
  __ASM volatile ("cpsie i" : : : "memory");
 800041c:	b662      	cpsie	i
}
 800041e:	bf00      	nop
    __enable_irq();
}
 8000420:	bf00      	nop
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	24000000 	.word	0x24000000
 800042c:	24000120 	.word	0x24000120

08000430 <HAL_SAI_RxCpltCallback>:

// ------------------------------------------------------------------------
//  Callback for reception complete
// ------------------------------------------------------------------------
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]

	// Convert received int32_t buffer to float format for processing
    ConvertToAudioBuffer(&rxBuffer[SAI_HALF_BUFFER_SIZE], In);
 8000438:	4909      	ldr	r1, [pc, #36]	@ (8000460 <HAL_SAI_RxCpltCallback+0x30>)
 800043a:	480a      	ldr	r0, [pc, #40]	@ (8000464 <HAL_SAI_RxCpltCallback+0x34>)
 800043c:	f7ff ff4c 	bl	80002d8 <_Z20ConvertToAudioBufferPlP11AudioBuffer>
    // Process audio data
    AudioCallback(In, Out2);
 8000440:	4909      	ldr	r1, [pc, #36]	@ (8000468 <HAL_SAI_RxCpltCallback+0x38>)
 8000442:	4807      	ldr	r0, [pc, #28]	@ (8000460 <HAL_SAI_RxCpltCallback+0x30>)
 8000444:	f000 fb28 	bl	8000a98 <_Z13AudioCallbackP11AudioBufferS0_>
  __ASM volatile ("cpsid i" : : : "memory");
 8000448:	b672      	cpsid	i
}
 800044a:	bf00      	nop
    __disable_irq();
    pOut = Out2;
 800044c:	4b07      	ldr	r3, [pc, #28]	@ (800046c <HAL_SAI_RxCpltCallback+0x3c>)
 800044e:	4a06      	ldr	r2, [pc, #24]	@ (8000468 <HAL_SAI_RxCpltCallback+0x38>)
 8000450:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000452:	b662      	cpsie	i
}
 8000454:	bf00      	nop
    __enable_irq();
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	24000080 	.word	0x24000080
 8000464:	24000100 	.word	0x24000100
 8000468:	240000c0 	.word	0x240000c0
 800046c:	24000000 	.word	0x24000000

08000470 <HAL_SAI_RxHalfCpltCallback>:

// ------------------------------------------------------------------------
//  Callback for half reception complete
// ------------------------------------------------------------------------
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
	// Convert received int32_t buffer to float format for processing
    ConvertToAudioBuffer(rxBuffer, In);
 8000478:	4909      	ldr	r1, [pc, #36]	@ (80004a0 <HAL_SAI_RxHalfCpltCallback+0x30>)
 800047a:	480a      	ldr	r0, [pc, #40]	@ (80004a4 <HAL_SAI_RxHalfCpltCallback+0x34>)
 800047c:	f7ff ff2c 	bl	80002d8 <_Z20ConvertToAudioBufferPlP11AudioBuffer>
    // Process audio data
    AudioCallback(In, Out1);
 8000480:	4909      	ldr	r1, [pc, #36]	@ (80004a8 <HAL_SAI_RxHalfCpltCallback+0x38>)
 8000482:	4807      	ldr	r0, [pc, #28]	@ (80004a0 <HAL_SAI_RxHalfCpltCallback+0x30>)
 8000484:	f000 fb08 	bl	8000a98 <_Z13AudioCallbackP11AudioBufferS0_>
  __ASM volatile ("cpsid i" : : : "memory");
 8000488:	b672      	cpsid	i
}
 800048a:	bf00      	nop
    __disable_irq();
    pOut = Out1;
 800048c:	4b07      	ldr	r3, [pc, #28]	@ (80004ac <HAL_SAI_RxHalfCpltCallback+0x3c>)
 800048e:	4a06      	ldr	r2, [pc, #24]	@ (80004a8 <HAL_SAI_RxHalfCpltCallback+0x38>)
 8000490:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000492:	b662      	cpsie	i
}
 8000494:	bf00      	nop
    __enable_irq();
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	24000080 	.word	0x24000080
 80004a4:	240000e0 	.word	0x240000e0
 80004a8:	240000a0 	.word	0x240000a0
 80004ac:	24000000 	.word	0x24000000

080004b0 <StartAudio>:

// ------------------------------------------------------------------------
// Start Audio Callback
// ------------------------------------------------------------------------
HAL_StatusTypeDef StartAudio(){
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef Result;

	// Reset CODEC
	HAL_GPIO_WritePin(RESET_CODEC_GPIO_Port, RESET_CODEC_Pin, GPIO_PIN_SET);
 80004b6:	2201      	movs	r2, #1
 80004b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004bc:	4819      	ldr	r0, [pc, #100]	@ (8000524 <StartAudio+0x74>)
 80004be:	f003 ffa3 	bl	8004408 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004c2:	2001      	movs	r0, #1
 80004c4:	f001 fb54 	bl	8001b70 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_CODEC_GPIO_Port, RESET_CODEC_Pin, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004ce:	4815      	ldr	r0, [pc, #84]	@ (8000524 <StartAudio+0x74>)
 80004d0:	f003 ff9a 	bl	8004408 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004d4:	2001      	movs	r0, #1
 80004d6:	f001 fb4b 	bl	8001b70 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_CODEC_GPIO_Port, RESET_CODEC_Pin, GPIO_PIN_SET);
 80004da:	2201      	movs	r2, #1
 80004dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004e0:	4810      	ldr	r0, [pc, #64]	@ (8000524 <StartAudio+0x74>)
 80004e2:	f003 ff91 	bl	8004408 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004e6:	2001      	movs	r0, #1
 80004e8:	f001 fb42 	bl	8001b70 <HAL_Delay>

	if(HAL_OK != (Result = HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t*) rxBuffer, SAI_BUFFER_SIZE))){
 80004ec:	2210      	movs	r2, #16
 80004ee:	490e      	ldr	r1, [pc, #56]	@ (8000528 <StartAudio+0x78>)
 80004f0:	480e      	ldr	r0, [pc, #56]	@ (800052c <StartAudio+0x7c>)
 80004f2:	f008 fef9 	bl	80092e8 <HAL_SAI_Receive_DMA>
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	bf14      	ite	ne
 8000500:	2301      	movne	r3, #1
 8000502:	2300      	moveq	r3, #0
 8000504:	b2db      	uxtb	r3, r3
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <StartAudio+0x5e>
		return Result;
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	e006      	b.n	800051c <StartAudio+0x6c>
	}

	return HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*) txBuffer, SAI_BUFFER_SIZE);
 800050e:	2210      	movs	r2, #16
 8000510:	4907      	ldr	r1, [pc, #28]	@ (8000530 <StartAudio+0x80>)
 8000512:	4808      	ldr	r0, [pc, #32]	@ (8000534 <StartAudio+0x84>)
 8000514:	f008 fe32 	bl	800917c <HAL_SAI_Transmit_DMA>
 8000518:	4603      	mov	r3, r0
 800051a:	bf00      	nop
}
 800051c:	4618      	mov	r0, r3
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	58020400 	.word	0x58020400
 8000528:	240000e0 	.word	0x240000e0
 800052c:	24000244 	.word	0x24000244
 8000530:	24000120 	.word	0x24000120
 8000534:	240001ac 	.word	0x240001ac

08000538 <_ZN3Dad7cHwQSPI7CommandEm>:
    //   Instruction - The command instruction to be sent.
    //
    // Returns:
    //   HAL_OK if successful, HAL_ERROR if the command fails.
    // ------------------------------------------------------------------------
    inline HAL_StatusTypeDef Command(uint32_t Instruction) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
        // Set the command instruction
        m_Command.Instruction = Instruction;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	683a      	ldr	r2, [r7, #0]
 8000546:	60da      	str	r2, [r3, #12]

        // Set data length to 0 (no data phase)
        m_Command.NbData = 0;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2200      	movs	r2, #0
 800054c:	635a      	str	r2, [r3, #52]	@ 0x34
        m_Command.DataMode = QSPI_DATA_NONE;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2200      	movs	r2, #0
 8000552:	631a      	str	r2, [r3, #48]	@ 0x30

        // Send the command
        return HAL_QSPI_Command(m_phqspi, &m_Command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	6858      	ldr	r0, [r3, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	330c      	adds	r3, #12
 800055c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000560:	4619      	mov	r1, r3
 8000562:	f004 fa13 	bl	800498c <HAL_QSPI_Command>
 8000566:	4603      	mov	r3, r0
    }
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <_ZN3Dad7cHwQSPI13CommandTXDataEmPhm>:
    //   NbData      - Number of bytes to transmit.
    //
    // Returns:
    //   HAL_OK if successful, HAL_ERROR if the command fails.
    // ------------------------------------------------------------------------
    inline HAL_StatusTypeDef CommandTXData(uint32_t Instruction, uint8_t* pData, uint32_t NbData) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
 800057c:	603b      	str	r3, [r7, #0]
        // Set the command instruction and the number of bytes to send
        m_Command.Instruction = Instruction;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	68ba      	ldr	r2, [r7, #8]
 8000582:	60da      	str	r2, [r3, #12]
        m_Command.NbData = NbData;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	683a      	ldr	r2, [r7, #0]
 8000588:	635a      	str	r2, [r3, #52]	@ 0x34
        m_Command.DataMode = QSPI_DATA_1_LINE;
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000590:	631a      	str	r2, [r3, #48]	@ 0x30

        // Send the command
        if (HAL_QSPI_Command(m_phqspi, &m_Command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	6858      	ldr	r0, [r3, #4]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	330c      	adds	r3, #12
 800059a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800059e:	4619      	mov	r1, r3
 80005a0:	f004 f9f4 	bl	800498c <HAL_QSPI_Command>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	bf14      	ite	ne
 80005aa:	2301      	movne	r3, #1
 80005ac:	2300      	moveq	r3, #0
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <_ZN3Dad7cHwQSPI13CommandTXDataEmPhm+0x48>
            return HAL_ERROR;
 80005b4:	2301      	movs	r3, #1
 80005b6:	e009      	b.n	80005cc <_ZN3Dad7cHwQSPI13CommandTXDataEmPhm+0x5c>
        }

        // Transmit the data
        return HAL_QSPI_Transmit(m_phqspi, pData, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80005c0:	6879      	ldr	r1, [r7, #4]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 fa40 	bl	8004a48 <HAL_QSPI_Transmit>
 80005c8:	4603      	mov	r3, r0
 80005ca:	bf00      	nop
    }
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_ZN3Dad7cHwQSPI13CommandRXDataEmPhm>:
    //   NbData      - Number of bytes to receive.
    //
    // Returns:
    //   HAL_OK if successful, HAL_ERROR if the command fails.
    // ------------------------------------------------------------------------
    HAL_StatusTypeDef CommandRXData(uint32_t Instruction, uint8_t* pData, uint32_t NbData) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
 80005e0:	603b      	str	r3, [r7, #0]
        // Set the command instruction and the number of bytes to receive
        m_Command.Instruction = Instruction;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	68ba      	ldr	r2, [r7, #8]
 80005e6:	60da      	str	r2, [r3, #12]
        m_Command.NbData = NbData;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	635a      	str	r2, [r3, #52]	@ 0x34
        m_Command.DataMode = QSPI_DATA_1_LINE;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80005f4:	631a      	str	r2, [r3, #48]	@ 0x30

        // Send the command
        if (HAL_QSPI_Command(m_phqspi, &m_Command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	6858      	ldr	r0, [r3, #4]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	330c      	adds	r3, #12
 80005fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000602:	4619      	mov	r1, r3
 8000604:	f004 f9c2 	bl	800498c <HAL_QSPI_Command>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	bf14      	ite	ne
 800060e:	2301      	movne	r3, #1
 8000610:	2300      	moveq	r3, #0
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <_ZN3Dad7cHwQSPI13CommandRXDataEmPhm+0x48>
            return HAL_ERROR;
 8000618:	2301      	movs	r3, #1
 800061a:	e009      	b.n	8000630 <_ZN3Dad7cHwQSPI13CommandRXDataEmPhm+0x5c>
        }

        // Receive the data
        return HAL_QSPI_Receive(m_phqspi, pData, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	4618      	mov	r0, r3
 8000628:	f004 faa0 	bl	8004b6c <HAL_QSPI_Receive>
 800062c:	4603      	mov	r3, r0
 800062e:	bf00      	nop
    }
 8000630:	4618      	mov	r0, r3
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <_ZN3Dad7cHwQSPI17SwapModeMemoryMapEv>:
    // without requiring explicit read commands.
    //
    // Returns:
    //   HAL status indicating success or failure of the configuration.
    // ------------------------------------------------------------------------
    inline HAL_StatusTypeDef SwapModeMemoryMap() {
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
    	QSPI_MemoryMappedTypeDef cfg;

   		// Set default address and data length for memory-mapped mode.
        m_CommandQuadRead.Address = 0;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2200      	movs	r2, #0
 8000644:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        m_CommandQuadRead.NbData = 0;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2200      	movs	r2, #0
 800064c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

        // Disable timeout counter since memory-mapped mode does not require it.
        cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
        cfg.TimeOutPeriod = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]

        // Enable memory-mapped mode using the configured settings.
        return HAL_QSPI_MemoryMapped(m_phqspi, &m_CommandQuadRead, &cfg);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6858      	ldr	r0, [r3, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	337c      	adds	r3, #124	@ 0x7c
 8000660:	f107 0208 	add.w	r2, r7, #8
 8000664:	4619      	mov	r1, r3
 8000666:	f004 fb1e 	bl	8004ca6 <HAL_QSPI_MemoryMapped>
 800066a:	4603      	mov	r3, r0
    }
 800066c:	4618      	mov	r0, r3
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <_ZN3Dad10cIS25LPxxx4InitEP18QSPI_HandleTypeDefm>:
//   phqspi - Pointer to the QSPI handle structure.
//
// Returns:
//   HAL_OK if initialization is successful, otherwise an error status.
// ------------------------------------------------------------------------
HAL_StatusTypeDef cIS25LPxxx::Init(QSPI_HandleTypeDef* phqspi, uint32_t MemoryAddress) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
    // Store the QSPI handle
    m_phqspi = phqspi;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	68ba      	ldr	r2, [r7, #8]
 8000684:	605a      	str	r2, [r3, #4]
    m_MemoryAddress = MemoryAddress;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	609a      	str	r2, [r3, #8]

    // ---------------------------------
    // Initialize command structures

    // General command structure for executing QSPI commands
    m_Command.Instruction = 0;
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
    m_Command.NbData = 0;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	2200      	movs	r2, #0
 8000696:	635a      	str	r2, [r3, #52]	@ 0x34
    m_Command.Address = 0;
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
    m_Command.AlternateBytes = 0;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
    m_Command.AddressSize = 0;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
    m_Command.AlternateBytesSize = 0;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
    m_Command.DummyCycles = 0;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
    m_Command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006bc:	625a      	str	r2, [r3, #36]	@ 0x24
    m_Command.AddressMode = QSPI_ADDRESS_NONE;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	2200      	movs	r2, #0
 80006c2:	629a      	str	r2, [r3, #40]	@ 0x28
    m_Command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2200      	movs	r2, #0
 80006c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    m_Command.DataMode = QSPI_DATA_NONE;
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	2200      	movs	r2, #0
 80006ce:	631a      	str	r2, [r3, #48]	@ 0x30
    m_Command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	2200      	movs	r2, #0
 80006d4:	639a      	str	r2, [r3, #56]	@ 0x38
    m_Command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	2200      	movs	r2, #0
 80006da:	63da      	str	r2, [r3, #60]	@ 0x3c
    m_Command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	2200      	movs	r2, #0
 80006e0:	641a      	str	r2, [r3, #64]	@ 0x40

    // Configure the command for writing data
    m_CommandQuadWrite.Address = 0;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	2200      	movs	r2, #0
 80006e6:	649a      	str	r2, [r3, #72]	@ 0x48
    m_CommandQuadWrite.NbData = 0;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2200      	movs	r2, #0
 80006ec:	66da      	str	r2, [r3, #108]	@ 0x6c
    m_CommandQuadWrite.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006f4:	65da      	str	r2, [r3, #92]	@ 0x5c
    m_CommandQuadWrite.Instruction = CMD_QUAD_PAGE_PROGRAM;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	2232      	movs	r2, #50	@ 0x32
 80006fa:	645a      	str	r2, [r3, #68]	@ 0x44
    m_CommandQuadWrite.AddressMode = QSPI_ADDRESS_1_LINE;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000702:	661a      	str	r2, [r3, #96]	@ 0x60
    m_CommandQuadWrite.AddressSize = QSPI_ADDRESS_24_BITS;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800070a:	651a      	str	r2, [r3, #80]	@ 0x50
    m_CommandQuadWrite.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	2200      	movs	r2, #0
 8000710:	665a      	str	r2, [r3, #100]	@ 0x64
    m_CommandQuadWrite.AlternateBytesSize = 0;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	2200      	movs	r2, #0
 8000716:	655a      	str	r2, [r3, #84]	@ 0x54
    m_CommandQuadWrite.AlternateBytes = 0;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	2200      	movs	r2, #0
 800071c:	64da      	str	r2, [r3, #76]	@ 0x4c
    m_CommandQuadWrite.DummyCycles = 0;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	2200      	movs	r2, #0
 8000722:	659a      	str	r2, [r3, #88]	@ 0x58
    m_CommandQuadWrite.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2200      	movs	r2, #0
 8000728:	671a      	str	r2, [r3, #112]	@ 0x70
    m_CommandQuadWrite.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	2200      	movs	r2, #0
 800072e:	675a      	str	r2, [r3, #116]	@ 0x74
    m_CommandQuadWrite.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2200      	movs	r2, #0
 8000734:	679a      	str	r2, [r3, #120]	@ 0x78
    m_CommandQuadWrite.DataMode = QSPI_DATA_4_LINES;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 800073c:	669a      	str	r2, [r3, #104]	@ 0x68

    // Configure the command for reading data
    m_CommandQuadRead.Address = 0;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2200      	movs	r2, #0
 8000742:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    m_CommandQuadRead.NbData = 0;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	2200      	movs	r2, #0
 800074a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    m_CommandQuadRead.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000754:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    m_CommandQuadRead.Instruction = CMD_READ_FAST_QUAD_IO;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	22eb      	movs	r2, #235	@ 0xeb
 800075c:	67da      	str	r2, [r3, #124]	@ 0x7c
    m_CommandQuadRead.AddressMode = QSPI_ADDRESS_4_LINES;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8000764:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    m_CommandQuadRead.AddressSize = QSPI_ADDRESS_24_BITS;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800076e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    m_CommandQuadRead.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8000778:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    m_CommandQuadRead.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	2200      	movs	r2, #0
 8000780:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    m_CommandQuadRead.AlternateBytes = 0x000000A0;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	22a0      	movs	r2, #160	@ 0xa0
 8000788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    m_CommandQuadRead.DummyCycles = 6;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	2206      	movs	r2, #6
 8000790:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    m_CommandQuadRead.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	2200      	movs	r2, #0
 8000798:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    m_CommandQuadRead.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	2200      	movs	r2, #0
 80007a0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    m_CommandQuadRead.SIOOMode = QSPI_SIOO_INST_ONLY_FIRST_CMD;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007aa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    m_CommandQuadRead.DataMode = QSPI_DATA_4_LINES;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 80007b4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

    // ---------------------------------
    // Initialize Flash memory
    HAL_StatusTypeDef Result = HAL_OK;
 80007b8:	2300      	movs	r3, #0
 80007ba:	77fb      	strb	r3, [r7, #31]

    // Reset the flash memory device
    if (HAL_OK != (Result = Command(IS25CMD::CMD_SOFTWARE_RESET_EN))) {
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2166      	movs	r1, #102	@ 0x66
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff feb9 	bl	8000538 <_ZN3Dad7cHwQSPI7CommandEm>
 80007c6:	4603      	mov	r3, r0
 80007c8:	77fb      	strb	r3, [r7, #31]
 80007ca:	7ffb      	ldrb	r3, [r7, #31]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	bf14      	ite	ne
 80007d0:	2301      	movne	r3, #1
 80007d2:	2300      	moveq	r3, #0
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <_ZN3Dad10cIS25LPxxx4InitEP18QSPI_HandleTypeDefm+0x16a>
        return Result;
 80007da:	7ffb      	ldrb	r3, [r7, #31]
 80007dc:	e0aa      	b.n	8000934 <_ZN3Dad10cIS25LPxxx4InitEP18QSPI_HandleTypeDefm+0x2c0>
    }
    if (HAL_OK != (Result = Command(IS25CMD::CMD_SOFTWARE_RESET))) {
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2199      	movs	r1, #153	@ 0x99
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fea8 	bl	8000538 <_ZN3Dad7cHwQSPI7CommandEm>
 80007e8:	4603      	mov	r3, r0
 80007ea:	77fb      	strb	r3, [r7, #31]
 80007ec:	7ffb      	ldrb	r3, [r7, #31]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	bf14      	ite	ne
 80007f2:	2301      	movne	r3, #1
 80007f4:	2300      	moveq	r3, #0
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <_ZN3Dad10cIS25LPxxx4InitEP18QSPI_HandleTypeDefm+0x18c>
        return Result;
 80007fc:	7ffb      	ldrb	r3, [r7, #31]
 80007fe:	e099      	b.n	8000934 <_ZN3Dad10cIS25LPxxx4InitEP18QSPI_HandleTypeDefm+0x2c0>
    }
    HAL_Delay(10);
 8000800:	200a      	movs	r0, #10
 8000802:	f001 f9b5 	bl	8001b70 <HAL_Delay>

    // Retrieve device information
    uint8_t Data[3];
    if (HAL_OK != (Result = CommandRXData(IS25CMD::CMD_READ_JEDEC_ID, Data, 3))) {
 8000806:	68f8      	ldr	r0, [r7, #12]
 8000808:	f107 021c 	add.w	r2, r7, #28
 800080c:	2303      	movs	r3, #3
 800080e:	219f      	movs	r1, #159	@ 0x9f
 8000810:	f7ff fee0 	bl	80005d4 <_ZN3Dad7cHwQSPI13CommandRXDataEmPhm>
 8000814:	4603      	mov	r3, r0
 8000816:	77fb      	strb	r3, [r7, #31]
 8000818:	7ffb      	ldrb	r3, [r7, #31]
 800081a:	2b00      	cmp	r3, #0
 800081c:	bf14      	ite	ne
 800081e:	2301      	movne	r3, #1
 8000820:	2300      	moveq	r3, #0
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <_ZN3Dad10cIS25LPxxx4InitEP18QSPI_HandleTypeDefm+0x1b8>
        return Result;
 8000828:	7ffb      	ldrb	r3, [r7, #31]
 800082a:	e083      	b.n	8000934 <_ZN3Dad10cIS25LPxxx4InitEP18QSPI_HandleTypeDefm+0x2c0>
    }
    m_ManufacturerID = Data[0];
 800082c:	7f3a      	ldrb	r2, [r7, #28]
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
    m_DeviceID = Data[1];
 8000834:	7f7a      	ldrb	r2, [r7, #29]
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
    m_Capacity = Data[2];
 800083c:	7fba      	ldrb	r2, [r7, #30]
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6

    // Configure Read Register
    IS25LP064A_ReadReg ReadReg;
    ReadReg.ods = 0b111;    // Driver strength: 50%
 8000844:	7e3b      	ldrb	r3, [r7, #24]
 8000846:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800084a:	763b      	strb	r3, [r7, #24]
    ReadReg.dc = 0b10;      // 6 Dummy cycles and 2 Mode bit cycles
 800084c:	7e3b      	ldrb	r3, [r7, #24]
 800084e:	2202      	movs	r2, #2
 8000850:	f362 03c4 	bfi	r3, r2, #3, #2
 8000854:	763b      	strb	r3, [r7, #24]
    ReadReg.wrap = 0;       // No wrap
 8000856:	7e3b      	ldrb	r3, [r7, #24]
 8000858:	f36f 0382 	bfc	r3, #2, #1
 800085c:	763b      	strb	r3, [r7, #24]
    ReadReg.Brush = 0;
 800085e:	7e3b      	ldrb	r3, [r7, #24]
 8000860:	f36f 0301 	bfc	r3, #0, #2
 8000864:	763b      	strb	r3, [r7, #24]

    // Enable write operation
    if (HAL_OK != (Result = Command(IS25CMD::CMD_WRITE_ENABLE))) {
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	2106      	movs	r1, #6
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fe64 	bl	8000538 <_ZN3Dad7cHwQSPI7CommandEm>
 8000870:	4603      	mov	r3, r0
 8000872:	77fb      	strb	r3, [r7, #31]
 8000874:	7ffb      	ldrb	r3, [r7, #31]
 8000876:	2b00      	cmp	r3, #0
 8000878:	bf14      	ite	ne
 800087a:	2301      	movne	r3, #1
 800087c:	2300      	moveq	r3, #0
 800087e:	b2db      	uxtb	r3, r3
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <_ZN3Dad10cIS25LPxxx4InitEP18QSPI_HandleTypeDefm+0x214>
        return Result;
 8000884:	7ffb      	ldrb	r3, [r7, #31]
 8000886:	e055      	b.n	8000934 <_ZN3Dad10cIS25LPxxx4InitEP18QSPI_HandleTypeDefm+0x2c0>
    }
    if (HAL_OK != (Result = CommandTXData(IS25CMD::CMD_SET_READ_PARAMETERS, &(ReadReg.octet), 1))) {
 8000888:	68f8      	ldr	r0, [r7, #12]
 800088a:	f107 0218 	add.w	r2, r7, #24
 800088e:	2301      	movs	r3, #1
 8000890:	21c0      	movs	r1, #192	@ 0xc0
 8000892:	f7ff fe6d 	bl	8000570 <_ZN3Dad7cHwQSPI13CommandTXDataEmPhm>
 8000896:	4603      	mov	r3, r0
 8000898:	77fb      	strb	r3, [r7, #31]
 800089a:	7ffb      	ldrb	r3, [r7, #31]
 800089c:	2b00      	cmp	r3, #0
 800089e:	bf14      	ite	ne
 80008a0:	2301      	movne	r3, #1
 80008a2:	2300      	moveq	r3, #0
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <_ZN3Dad10cIS25LPxxx4InitEP18QSPI_HandleTypeDefm+0x23a>
        return Result;
 80008aa:	7ffb      	ldrb	r3, [r7, #31]
 80008ac:	e042      	b.n	8000934 <_ZN3Dad10cIS25LPxxx4InitEP18QSPI_HandleTypeDefm+0x2c0>
    }

    // Activate Quad Mode
    IS25LP064A_StatusReg StatusReg;  // Status Register 1 of the flash memory

    if (HAL_OK != (Result = CommandRXData(IS25CMD::CMD_READ_STATUS, (uint8_t*)&StatusReg, 1))) {
 80008ae:	68f8      	ldr	r0, [r7, #12]
 80008b0:	f107 0214 	add.w	r2, r7, #20
 80008b4:	2301      	movs	r3, #1
 80008b6:	2105      	movs	r1, #5
 80008b8:	f7ff fe8c 	bl	80005d4 <_ZN3Dad7cHwQSPI13CommandRXDataEmPhm>
 80008bc:	4603      	mov	r3, r0
 80008be:	77fb      	strb	r3, [r7, #31]
 80008c0:	7ffb      	ldrb	r3, [r7, #31]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	bf14      	ite	ne
 80008c6:	2301      	movne	r3, #1
 80008c8:	2300      	moveq	r3, #0
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <_ZN3Dad10cIS25LPxxx4InitEP18QSPI_HandleTypeDefm+0x260>
        return Result;
 80008d0:	7ffb      	ldrb	r3, [r7, #31]
 80008d2:	e02f      	b.n	8000934 <_ZN3Dad10cIS25LPxxx4InitEP18QSPI_HandleTypeDefm+0x2c0>
    }

    // Enable write operation
    if (HAL_OK != (Result = Command(IS25CMD::CMD_WRITE_ENABLE))) {
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2106      	movs	r1, #6
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fe2d 	bl	8000538 <_ZN3Dad7cHwQSPI7CommandEm>
 80008de:	4603      	mov	r3, r0
 80008e0:	77fb      	strb	r3, [r7, #31]
 80008e2:	7ffb      	ldrb	r3, [r7, #31]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	bf14      	ite	ne
 80008e8:	2301      	movne	r3, #1
 80008ea:	2300      	moveq	r3, #0
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <_ZN3Dad10cIS25LPxxx4InitEP18QSPI_HandleTypeDefm+0x282>
        return Result;
 80008f2:	7ffb      	ldrb	r3, [r7, #31]
 80008f4:	e01e      	b.n	8000934 <_ZN3Dad10cIS25LPxxx4InitEP18QSPI_HandleTypeDefm+0x2c0>
    }

    // Set Quad mode enable bit
    StatusReg.qe = 1;
 80008f6:	7d3b      	ldrb	r3, [r7, #20]
 80008f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008fc:	753b      	strb	r3, [r7, #20]

    if (HAL_OK != (Result = CommandTXData(IS25CMD::CMD_WRITE_STATUS, (uint8_t*)&StatusReg, 1))) {
 80008fe:	68f8      	ldr	r0, [r7, #12]
 8000900:	f107 0214 	add.w	r2, r7, #20
 8000904:	2301      	movs	r3, #1
 8000906:	2101      	movs	r1, #1
 8000908:	f7ff fe32 	bl	8000570 <_ZN3Dad7cHwQSPI13CommandTXDataEmPhm>
 800090c:	4603      	mov	r3, r0
 800090e:	77fb      	strb	r3, [r7, #31]
 8000910:	7ffb      	ldrb	r3, [r7, #31]
 8000912:	2b00      	cmp	r3, #0
 8000914:	bf14      	ite	ne
 8000916:	2301      	movne	r3, #1
 8000918:	2300      	moveq	r3, #0
 800091a:	b2db      	uxtb	r3, r3
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <_ZN3Dad10cIS25LPxxx4InitEP18QSPI_HandleTypeDefm+0x2b0>
        return Result;
 8000920:	7ffb      	ldrb	r3, [r7, #31]
 8000922:	e007      	b.n	8000934 <_ZN3Dad10cIS25LPxxx4InitEP18QSPI_HandleTypeDefm+0x2c0>
    }

    WaitNoBusy();
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	f000 f81b 	bl	8000960 <_ZN3Dad10cIS25LPxxx10WaitNoBusyEv>
    return MemoryMap();
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f000 f806 	bl	800093c <_ZN3Dad10cIS25LPxxx9MemoryMapEv>
 8000930:	4603      	mov	r3, r0
 8000932:	bf00      	nop
}
 8000934:	4618      	mov	r0, r3
 8000936:	3720      	adds	r7, #32
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <_ZN3Dad10cIS25LPxxx9MemoryMapEv>:
// without requiring explicit read commands.
//
// Returns:
//   HAL status indicating success or failure of the configuration.
// ------------------------------------------------------------------------
inline HAL_StatusTypeDef cIS25LPxxx::MemoryMap() {
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Result;

    // Enable memory-mapped mode using the configured settings.
    Result = SwapModeMemoryMap();
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fe76 	bl	8000638 <_ZN3Dad7cHwQSPI17SwapModeMemoryMapEv>
 800094c:	4603      	mov	r3, r0
 800094e:	73fb      	strb	r3, [r7, #15]
    WaitNoBusy();
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f000 f805 	bl	8000960 <_ZN3Dad10cIS25LPxxx10WaitNoBusyEv>
    return Result;
 8000956:	7bfb      	ldrb	r3, [r7, #15]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <_ZN3Dad10cIS25LPxxx10WaitNoBusyEv>:
// Waits until the flash memory is not busy.
// This method continuously checks the status register until the flash memory
// is no longer busy, indicating that the previous operation has completed.
// Returns:
//  - HAL status
HAL_StatusTypeDef cIS25LPxxx::WaitNoBusy() {
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Result;
	while(1) {
		IS25LP064A_StatusReg StatusReg;
		if(HAL_OK != (Result = CommandRXData(IS25CMD::CMD_READ_STATUS, (uint8_t*) &StatusReg, 1))) {
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f107 020c 	add.w	r2, r7, #12
 800096e:	2301      	movs	r3, #1
 8000970:	2105      	movs	r1, #5
 8000972:	f7ff fe2f 	bl	80005d4 <_ZN3Dad7cHwQSPI13CommandRXDataEmPhm>
 8000976:	4603      	mov	r3, r0
 8000978:	73fb      	strb	r3, [r7, #15]
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	2b00      	cmp	r3, #0
 800097e:	bf14      	ite	ne
 8000980:	2301      	movne	r3, #1
 8000982:	2300      	moveq	r3, #0
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <_ZN3Dad10cIS25LPxxx10WaitNoBusyEv+0x2e>
			return Result;
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	e00b      	b.n	80009a6 <_ZN3Dad10cIS25LPxxx10WaitNoBusyEv+0x46>
		} else if(StatusReg.wip == 0) {
 800098e:	7b3b      	ldrb	r3, [r7, #12]
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b00      	cmp	r3, #0
 8000998:	d101      	bne.n	800099e <_ZN3Dad10cIS25LPxxx10WaitNoBusyEv+0x3e>
			return Result;
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	e003      	b.n	80009a6 <_ZN3Dad10cIS25LPxxx10WaitNoBusyEv+0x46>
		}
		HAL_Delay(1);
 800099e:	2001      	movs	r0, #1
 80009a0:	f001 f8e6 	bl	8001b70 <HAL_Delay>
	}
 80009a4:	e7e0      	b.n	8000968 <_ZN3Dad10cIS25LPxxx10WaitNoBusyEv+0x8>
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <_ZN3Dad7cHwQSPIC1Ev>:
    cHwQSPI() {};
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	4a06      	ldr	r2, [pc, #24]	@ (80009d4 <_ZN3Dad7cHwQSPIC1Ev+0x24>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2200      	movs	r2, #0
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	08009d98 	.word	0x08009d98

080009d8 <_ZN3Dad7cHwQSPID1Ev>:
    virtual ~cHwQSPI() {};
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	4a04      	ldr	r2, [pc, #16]	@ (80009f4 <_ZN3Dad7cHwQSPID1Ev+0x1c>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4618      	mov	r0, r3
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	08009d98 	.word	0x08009d98

080009f8 <_ZN3Dad7cHwQSPID0Ev>:
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff ffe9 	bl	80009d8 <_ZN3Dad7cHwQSPID1Ev>
 8000a06:	21b4      	movs	r1, #180	@ 0xb4
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f009 f91d 	bl	8009c48 <_ZdlPvj>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <_ZN3Dad10cIS25LPxxxC1Ev>:
//
class cIS25LPxxx : public cHwQSPI{
public:
	// ------------------------------------------------------------------------
    // Constructor & Destructor
	cIS25LPxxx(){};
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff ffc4 	bl	80009b0 <_ZN3Dad7cHwQSPIC1Ev>
 8000a28:	4a09      	ldr	r2, [pc, #36]	@ (8000a50 <_ZN3Dad10cIS25LPxxxC1Ev+0x38>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	08009d88 	.word	0x08009d88

08000a54 <_ZN3Dad10cIS25LPxxxD1Ev>:
	virtual ~cIS25LPxxx(){};
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	4a05      	ldr	r2, [pc, #20]	@ (8000a74 <_ZN3Dad10cIS25LPxxxD1Ev+0x20>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ffb7 	bl	80009d8 <_ZN3Dad7cHwQSPID1Ev>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	08009d88 	.word	0x08009d88

08000a78 <_ZN3Dad10cIS25LPxxxD0Ev>:
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff ffe7 	bl	8000a54 <_ZN3Dad10cIS25LPxxxD1Ev>
 8000a86:	21b8      	movs	r1, #184	@ 0xb8
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f009 f8dd 	bl	8009c48 <_ZdlPvj>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <_Z13AudioCallbackP11AudioBufferS0_>:
//QFlash
Dad::cIS25LPxxx __Flash;

// ------------------------------------------------------------------------
// AudioCallback
void AudioCallback(AudioBuffer *pIn, AudioBuffer *pOut){
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
	for (size_t i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	e010      	b.n	8000aca <_Z13AudioCallbackP11AudioBufferS0_+0x32>
	{
		pOut->Right = pIn->Right;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	601a      	str	r2, [r3, #0]
		pOut->Left = pIn->Left;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685a      	ldr	r2, [r3, #4]
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
		pOut++;
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	3308      	adds	r3, #8
 8000abc:	603b      	str	r3, [r7, #0]
		pIn++;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	607b      	str	r3, [r7, #4]
	for (size_t i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	2b03      	cmp	r3, #3
 8000ace:	d9eb      	bls.n	8000aa8 <_Z13AudioCallbackP11AudioBufferS0_+0x10>
	}
}
 8000ad0:	bf00      	nop
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000ae6:	f000 fb47 	bl	8001178 <_ZL10MPU_Configv>

  /* MCU Configuration--------------------------------------------------------*/

  /* Configure The Vector Table address */
  SCB->VTOR = 0x08000000;
 8000aea:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <main+0x5c>)
 8000aec:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000af0:	609a      	str	r2, [r3, #8]

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af2:	f000 ffab 	bl	8001a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af6:	f000 f829 	bl	8000b4c <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000afa:	f000 f8b1 	bl	8000c60 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afe:	f000 fa77 	bl	8000ff0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000b02:	f000 f97b 	bl	8000dfc <_ZL11MX_DMA_Initv>
  MX_QUADSPI_Init();
 8000b06:	f000 f8df 	bl	8000cc8 <_ZL15MX_QUADSPI_Initv>
  MX_FMC_Init();
 8000b0a:	f000 f99f 	bl	8000e4c <_ZL11MX_FMC_Initv>
  MX_SAI1_Init();
 8000b0e:	f000 f90b 	bl	8000d28 <_ZL12MX_SAI1_Initv>
  /* USER CODE BEGIN 2 */
  __Flash.Init(&hqspi);
 8000b12:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
 8000b16:	490a      	ldr	r1, [pc, #40]	@ (8000b40 <main+0x60>)
 8000b18:	480a      	ldr	r0, [pc, #40]	@ (8000b44 <main+0x64>)
 8000b1a:	f7ff fdab 	bl	8000674 <_ZN3Dad10cIS25LPxxx4InitEP18QSPI_HandleTypeDefm>
  StartAudio();
 8000b1e:	f7ff fcc7 	bl	80004b0 <StartAudio>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  GPIO_PinState LedState = GPIO_PIN_RESET;
 8000b22:	2300      	movs	r3, #0
 8000b24:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b26:	2180      	movs	r1, #128	@ 0x80
 8000b28:	4807      	ldr	r0, [pc, #28]	@ (8000b48 <main+0x68>)
 8000b2a:	f003 fc86 	bl	800443a <HAL_GPIO_TogglePin>

	  HAL_Delay(300);
 8000b2e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000b32:	f001 f81d 	bl	8001b70 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b36:	bf00      	nop
 8000b38:	e7f5      	b.n	8000b26 <main+0x46>
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00
 8000b40:	24000160 	.word	0x24000160
 8000b44:	24000400 	.word	0x24000400
 8000b48:	58020800 	.word	0x58020800

08000b4c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b09c      	sub	sp, #112	@ 0x70
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b56:	224c      	movs	r2, #76	@ 0x4c
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f009 f88c 	bl	8009c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2220      	movs	r2, #32
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f009 f886 	bl	8009c78 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f003 fca5 	bl	80044bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b72:	2300      	movs	r3, #0
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	4b38      	ldr	r3, [pc, #224]	@ (8000c58 <_Z18SystemClock_Configv+0x10c>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	4a37      	ldr	r2, [pc, #220]	@ (8000c58 <_Z18SystemClock_Configv+0x10c>)
 8000b7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b80:	6193      	str	r3, [r2, #24]
 8000b82:	4b35      	ldr	r3, [pc, #212]	@ (8000c58 <_Z18SystemClock_Configv+0x10c>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	4b33      	ldr	r3, [pc, #204]	@ (8000c5c <_Z18SystemClock_Configv+0x110>)
 8000b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b90:	4a32      	ldr	r2, [pc, #200]	@ (8000c5c <_Z18SystemClock_Configv+0x110>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b98:	4b30      	ldr	r3, [pc, #192]	@ (8000c5c <_Z18SystemClock_Configv+0x110>)
 8000b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ba4:	bf00      	nop
 8000ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8000c58 <_Z18SystemClock_Configv+0x10c>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bb2:	bf14      	ite	ne
 8000bb4:	2301      	movne	r3, #1
 8000bb6:	2300      	moveq	r3, #0
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d1f3      	bne.n	8000ba6 <_Z18SystemClock_Configv+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bc2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000bd4:	23f0      	movs	r3, #240	@ 0xf0
 8000bd6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000bdc:	2306      	movs	r3, #6
 8000bde:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 8;
 8000be0:	2308      	movs	r3, #8
 8000be2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000be4:	2308      	movs	r3, #8
 8000be6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f004 fb17 	bl	8005228 <HAL_RCC_OscConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	bf14      	ite	ne
 8000c00:	2301      	movne	r3, #1
 8000c02:	2300      	moveq	r3, #0
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8000c0a:	f000 fb18 	bl	800123e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0e:	233f      	movs	r3, #63	@ 0x3f
 8000c10:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c12:	2303      	movs	r3, #3
 8000c14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c1e:	2340      	movs	r3, #64	@ 0x40
 8000c20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c22:	2340      	movs	r3, #64	@ 0x40
 8000c24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c2a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c2c:	2340      	movs	r3, #64	@ 0x40
 8000c2e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2104      	movs	r1, #4
 8000c34:	4618      	mov	r0, r3
 8000c36:	f004 ff51 	bl	8005adc <HAL_RCC_ClockConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	bf14      	ite	ne
 8000c40:	2301      	movne	r3, #1
 8000c42:	2300      	moveq	r3, #0
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <_Z18SystemClock_Configv+0x102>
  {
    Error_Handler();
 8000c4a:	f000 faf8 	bl	800123e <Error_Handler>
  }
}
 8000c4e:	bf00      	nop
 8000c50:	3770      	adds	r7, #112	@ 0x70
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	58024800 	.word	0x58024800
 8000c5c:	58000400 	.word	0x58000400

08000c60 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b0b0      	sub	sp, #192	@ 0xc0
 8000c64:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c66:	463b      	mov	r3, r7
 8000c68:	22c0      	movs	r2, #192	@ 0xc0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f009 f803 	bl	8009c78 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000c72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c76:	f04f 0300 	mov.w	r3, #0
 8000c7a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000c7e:	2304      	movs	r3, #4
 8000c80:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 147;
 8000c82:	2393      	movs	r3, #147	@ 0x93
 8000c84:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000c86:	2304      	movs	r3, #4
 8000c88:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000c92:	2380      	movs	r3, #128	@ 0x80
 8000c94:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3750;
 8000c9a:	f640 63a6 	movw	r3, #3750	@ 0xea6
 8000c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f005 fa8e 	bl	80061c8 <HAL_RCCEx_PeriphCLKConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	bf14      	ite	ne
 8000cb2:	2301      	movne	r3, #1
 8000cb4:	2300      	moveq	r3, #0
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <_Z24PeriphCommonClock_Configv+0x60>
  {
    Error_Handler();
 8000cbc:	f000 fabf 	bl	800123e <Error_Handler>
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	37c0      	adds	r7, #192	@ 0xc0
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <_ZL15MX_QUADSPI_Initv+0x58>)
 8000cce:	4a15      	ldr	r2, [pc, #84]	@ (8000d24 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <_ZL15MX_QUADSPI_Initv+0x58>)
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <_ZL15MX_QUADSPI_Initv+0x58>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000cde:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <_ZL15MX_QUADSPI_Initv+0x58>)
 8000ce0:	2210      	movs	r2, #16
 8000ce2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <_ZL15MX_QUADSPI_Initv+0x58>)
 8000ce6:	2216      	movs	r2, #22
 8000ce8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000cea:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <_ZL15MX_QUADSPI_Initv+0x58>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <_ZL15MX_QUADSPI_Initv+0x58>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <_ZL15MX_QUADSPI_Initv+0x58>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000cfc:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <_ZL15MX_QUADSPI_Initv+0x58>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d02:	4807      	ldr	r0, [pc, #28]	@ (8000d20 <_ZL15MX_QUADSPI_Initv+0x58>)
 8000d04:	f003 fc14 	bl	8004530 <HAL_QSPI_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	bf14      	ite	ne
 8000d0e:	2301      	movne	r3, #1
 8000d10:	2300      	moveq	r3, #0
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <_ZL15MX_QUADSPI_Initv+0x54>
  {
    Error_Handler();
 8000d18:	f000 fa91 	bl	800123e <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	24000160 	.word	0x24000160
 8000d24:	52005000 	.word	0x52005000

08000d28 <_ZL12MX_SAI1_Initv>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000dec <_ZL12MX_SAI1_Initv+0xc4>)
 8000d2e:	4a30      	ldr	r2, [pc, #192]	@ (8000df0 <_ZL12MX_SAI1_Initv+0xc8>)
 8000d30:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d32:	4b2e      	ldr	r3, [pc, #184]	@ (8000dec <_ZL12MX_SAI1_Initv+0xc4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d38:	4b2c      	ldr	r3, [pc, #176]	@ (8000dec <_ZL12MX_SAI1_Initv+0xc4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000dec <_ZL12MX_SAI1_Initv+0xc4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d44:	4b29      	ldr	r3, [pc, #164]	@ (8000dec <_ZL12MX_SAI1_Initv+0xc4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d4a:	4b28      	ldr	r3, [pc, #160]	@ (8000dec <_ZL12MX_SAI1_Initv+0xc4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000d50:	4b26      	ldr	r3, [pc, #152]	@ (8000dec <_ZL12MX_SAI1_Initv+0xc4>)
 8000d52:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000d56:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d58:	4b24      	ldr	r3, [pc, #144]	@ (8000dec <_ZL12MX_SAI1_Initv+0xc4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d5e:	4b23      	ldr	r3, [pc, #140]	@ (8000dec <_ZL12MX_SAI1_Initv+0xc4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d64:	4b21      	ldr	r3, [pc, #132]	@ (8000dec <_ZL12MX_SAI1_Initv+0xc4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d6a:	4b20      	ldr	r3, [pc, #128]	@ (8000dec <_ZL12MX_SAI1_Initv+0xc4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8000d70:	2302      	movs	r3, #2
 8000d72:	2202      	movs	r2, #2
 8000d74:	2101      	movs	r1, #1
 8000d76:	481d      	ldr	r0, [pc, #116]	@ (8000dec <_ZL12MX_SAI1_Initv+0xc4>)
 8000d78:	f007 ff24 	bl	8008bc4 <HAL_SAI_InitProtocol>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	bf14      	ite	ne
 8000d82:	2301      	movne	r3, #1
 8000d84:	2300      	moveq	r3, #0
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <_ZL12MX_SAI1_Initv+0x68>
  {
    Error_Handler();
 8000d8c:	f000 fa57 	bl	800123e <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000d90:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <_ZL12MX_SAI1_Initv+0xcc>)
 8000d92:	4a19      	ldr	r2, [pc, #100]	@ (8000df8 <_ZL12MX_SAI1_Initv+0xd0>)
 8000d94:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000d96:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <_ZL12MX_SAI1_Initv+0xcc>)
 8000d98:	2203      	movs	r2, #3
 8000d9a:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <_ZL12MX_SAI1_Initv+0xcc>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000da2:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <_ZL12MX_SAI1_Initv+0xcc>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000da8:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <_ZL12MX_SAI1_Initv+0xcc>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000dae:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <_ZL12MX_SAI1_Initv+0xcc>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	@ (8000df4 <_ZL12MX_SAI1_Initv+0xcc>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <_ZL12MX_SAI1_Initv+0xcc>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <_ZL12MX_SAI1_Initv+0xcc>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	2202      	movs	r2, #2
 8000dca:	2101      	movs	r1, #1
 8000dcc:	4809      	ldr	r0, [pc, #36]	@ (8000df4 <_ZL12MX_SAI1_Initv+0xcc>)
 8000dce:	f007 fef9 	bl	8008bc4 <HAL_SAI_InitProtocol>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	bf14      	ite	ne
 8000dd8:	2301      	movne	r3, #1
 8000dda:	2300      	moveq	r3, #0
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <_ZL12MX_SAI1_Initv+0xbe>
  {
    Error_Handler();
 8000de2:	f000 fa2c 	bl	800123e <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	240001ac 	.word	0x240001ac
 8000df0:	40015804 	.word	0x40015804
 8000df4:	24000244 	.word	0x24000244
 8000df8:	40015824 	.word	0x40015824

08000dfc <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <_ZL11MX_DMA_Initv+0x4c>)
 8000e04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e08:	4a0f      	ldr	r2, [pc, #60]	@ (8000e48 <_ZL11MX_DMA_Initv+0x4c>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e12:	4b0d      	ldr	r3, [pc, #52]	@ (8000e48 <_ZL11MX_DMA_Initv+0x4c>)
 8000e14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	200b      	movs	r0, #11
 8000e26:	f000 ffae 	bl	8001d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e2a:	200b      	movs	r0, #11
 8000e2c:	f000 ffc5 	bl	8001dba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2100      	movs	r1, #0
 8000e34:	200c      	movs	r0, #12
 8000e36:	f000 ffa6 	bl	8001d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e3a:	200c      	movs	r0, #12
 8000e3c:	f000 ffbd 	bl	8001dba <HAL_NVIC_EnableIRQ>

}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	58024400 	.word	0x58024400

08000e4c <_ZL11MX_FMC_Initv>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08c      	sub	sp, #48	@ 0x30
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]
 8000e62:	615a      	str	r2, [r3, #20]
 8000e64:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e66:	4b60      	ldr	r3, [pc, #384]	@ (8000fe8 <_ZL11MX_FMC_Initv+0x19c>)
 8000e68:	4a60      	ldr	r2, [pc, #384]	@ (8000fec <_ZL11MX_FMC_Initv+0x1a0>)
 8000e6a:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000e6c:	4b5e      	ldr	r3, [pc, #376]	@ (8000fe8 <_ZL11MX_FMC_Initv+0x19c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000e72:	4b5d      	ldr	r3, [pc, #372]	@ (8000fe8 <_ZL11MX_FMC_Initv+0x19c>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000e78:	4b5b      	ldr	r3, [pc, #364]	@ (8000fe8 <_ZL11MX_FMC_Initv+0x19c>)
 8000e7a:	2208      	movs	r2, #8
 8000e7c:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e7e:	4b5a      	ldr	r3, [pc, #360]	@ (8000fe8 <_ZL11MX_FMC_Initv+0x19c>)
 8000e80:	2220      	movs	r2, #32
 8000e82:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e84:	4b58      	ldr	r3, [pc, #352]	@ (8000fe8 <_ZL11MX_FMC_Initv+0x19c>)
 8000e86:	2240      	movs	r2, #64	@ 0x40
 8000e88:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e8a:	4b57      	ldr	r3, [pc, #348]	@ (8000fe8 <_ZL11MX_FMC_Initv+0x19c>)
 8000e8c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000e90:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e92:	4b55      	ldr	r3, [pc, #340]	@ (8000fe8 <_ZL11MX_FMC_Initv+0x19c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000e98:	4b53      	ldr	r3, [pc, #332]	@ (8000fe8 <_ZL11MX_FMC_Initv+0x19c>)
 8000e9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e9e:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000ea0:	4b51      	ldr	r3, [pc, #324]	@ (8000fe8 <_ZL11MX_FMC_Initv+0x19c>)
 8000ea2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ea6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000ea8:	4b4f      	ldr	r3, [pc, #316]	@ (8000fe8 <_ZL11MX_FMC_Initv+0x19c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	613b      	str	r3, [r7, #16]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	617b      	str	r3, [r7, #20]
  SdramTiming.SelfRefreshTime = 4;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RowCycleDelay = 8;
 8000eba:	2308      	movs	r3, #8
 8000ebc:	61fb      	str	r3, [r7, #28]
  SdramTiming.WriteRecoveryTime = 3;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	623b      	str	r3, [r7, #32]
  SdramTiming.RPDelay = 16;
 8000ec2:	2310      	movs	r3, #16
 8000ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  SdramTiming.RCDDelay = 10;
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4845      	ldr	r0, [pc, #276]	@ (8000fe8 <_ZL11MX_FMC_Initv+0x19c>)
 8000ed2:	f008 fcf9 	bl	80098c8 <HAL_SDRAM_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bf14      	ite	ne
 8000edc:	2301      	movne	r3, #1
 8000ede:	2300      	moveq	r3, #0
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <_ZL11MX_FMC_Initv+0x9e>
  {
    Error_Handler( );
 8000ee6:	f000 f9aa 	bl	800123e <Error_Handler>
#define SDRAM_MODEREG_WRITEBURST_MODE_PROG_BURST ((0 << 9))

   FMC_SDRAM_CommandTypeDef Command;

   /* Step 3:  Configure a clock configuration enable command */
   Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000eea:	2301      	movs	r3, #1
 8000eec:	603b      	str	r3, [r7, #0]
   Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000eee:	2310      	movs	r3, #16
 8000ef0:	607b      	str	r3, [r7, #4]
   Command.AutoRefreshNumber      = 1;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	60bb      	str	r3, [r7, #8]
   Command.ModeRegisterDefinition = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]

   /* Send the command */
   if(HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000) != HAL_OK){
 8000efa:	463b      	mov	r3, r7
 8000efc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f00:	4619      	mov	r1, r3
 8000f02:	4839      	ldr	r0, [pc, #228]	@ (8000fe8 <_ZL11MX_FMC_Initv+0x19c>)
 8000f04:	f008 fd40 	bl	8009988 <HAL_SDRAM_SendCommand>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	bf14      	ite	ne
 8000f0e:	2301      	movne	r3, #1
 8000f10:	2300      	moveq	r3, #0
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <_ZL11MX_FMC_Initv+0xd0>
	    Error_Handler();
 8000f18:	f000 f991 	bl	800123e <Error_Handler>
   }

   /* Step 4: Insert 100 ms delay */
   HAL_Delay(100);
 8000f1c:	2064      	movs	r0, #100	@ 0x64
 8000f1e:	f000 fe27 	bl	8001b70 <HAL_Delay>

   /* Step 5: Configure a PALL (precharge all) command */
   Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000f22:	2302      	movs	r3, #2
 8000f24:	603b      	str	r3, [r7, #0]
   Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000f26:	2310      	movs	r3, #16
 8000f28:	607b      	str	r3, [r7, #4]
   Command.AutoRefreshNumber      = 1;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	60bb      	str	r3, [r7, #8]
   Command.ModeRegisterDefinition = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]

   /* Send the command */
   if(HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000) != HAL_OK){
 8000f32:	463b      	mov	r3, r7
 8000f34:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f38:	4619      	mov	r1, r3
 8000f3a:	482b      	ldr	r0, [pc, #172]	@ (8000fe8 <_ZL11MX_FMC_Initv+0x19c>)
 8000f3c:	f008 fd24 	bl	8009988 <HAL_SDRAM_SendCommand>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	bf14      	ite	ne
 8000f46:	2301      	movne	r3, #1
 8000f48:	2300      	moveq	r3, #0
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <_ZL11MX_FMC_Initv+0x108>
	    Error_Handler();
 8000f50:	f000 f975 	bl	800123e <Error_Handler>
   }

   /* Step 6 : Configure a Auto-Refresh command */
   Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000f54:	2303      	movs	r3, #3
 8000f56:	603b      	str	r3, [r7, #0]
   Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000f58:	2310      	movs	r3, #16
 8000f5a:	607b      	str	r3, [r7, #4]
   Command.AutoRefreshNumber      = 4;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	60bb      	str	r3, [r7, #8]
   Command.ModeRegisterDefinition = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]

   /* Send the command */
   if(HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000) != HAL_OK){
 8000f64:	463b      	mov	r3, r7
 8000f66:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	481e      	ldr	r0, [pc, #120]	@ (8000fe8 <_ZL11MX_FMC_Initv+0x19c>)
 8000f6e:	f008 fd0b 	bl	8009988 <HAL_SDRAM_SendCommand>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	bf14      	ite	ne
 8000f78:	2301      	movne	r3, #1
 8000f7a:	2300      	moveq	r3, #0
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <_ZL11MX_FMC_Initv+0x13a>
	    Error_Handler();
 8000f82:	f000 f95c 	bl	800123e <Error_Handler>
   }

   /* Step 7: Program the external memory mode register */
   uint32_t tmpmrd = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 8000f8a:	f240 2332 	movw	r3, #562	@ 0x232
 8000f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_3
            | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

   Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8000f90:	2304      	movs	r3, #4
 8000f92:	603b      	str	r3, [r7, #0]
   Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000f94:	2310      	movs	r3, #16
 8000f96:	607b      	str	r3, [r7, #4]
   Command.AutoRefreshNumber      = 1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
   Command.ModeRegisterDefinition = tmpmrd;
 8000f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f9e:	60fb      	str	r3, [r7, #12]

   /* Send the command */
   if(HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000) != HAL_OK){
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	480f      	ldr	r0, [pc, #60]	@ (8000fe8 <_ZL11MX_FMC_Initv+0x19c>)
 8000faa:	f008 fced 	bl	8009988 <HAL_SDRAM_SendCommand>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	bf14      	ite	ne
 8000fb4:	2301      	movne	r3, #1
 8000fb6:	2300      	moveq	r3, #0
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <_ZL11MX_FMC_Initv+0x176>
	    Error_Handler();
 8000fbe:	f000 f93e 	bl	800123e <Error_Handler>
   }

   //HAL_SDRAM_ProgramRefreshRate(hsdram, 0x56A - 20);
   if(HAL_SDRAM_ProgramRefreshRate(&hsdram1, 0x81A - 20) != HAL_OK){
 8000fc2:	f640 0106 	movw	r1, #2054	@ 0x806
 8000fc6:	4808      	ldr	r0, [pc, #32]	@ (8000fe8 <_ZL11MX_FMC_Initv+0x19c>)
 8000fc8:	f008 fd13 	bl	80099f2 <HAL_SDRAM_ProgramRefreshRate>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	bf14      	ite	ne
 8000fd2:	2301      	movne	r3, #1
 8000fd4:	2300      	moveq	r3, #0
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <_ZL11MX_FMC_Initv+0x194>
	    Error_Handler();
 8000fdc:	f000 f92f 	bl	800123e <Error_Handler>
   }

  /* USER CODE END FMC_Init 2 */
}
 8000fe0:	bf00      	nop
 8000fe2:	3730      	adds	r7, #48	@ 0x30
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	240003cc 	.word	0x240003cc
 8000fec:	52004140 	.word	0x52004140

08000ff0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08e      	sub	sp, #56	@ 0x38
 8000ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001006:	4b59      	ldr	r3, [pc, #356]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 8001008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100c:	4a57      	ldr	r2, [pc, #348]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 800100e:	f043 0310 	orr.w	r3, r3, #16
 8001012:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001016:	4b55      	ldr	r3, [pc, #340]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 8001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101c:	f003 0310 	and.w	r3, r3, #16
 8001020:	623b      	str	r3, [r7, #32]
 8001022:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001024:	4b51      	ldr	r3, [pc, #324]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 8001026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102a:	4a50      	ldr	r2, [pc, #320]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001034:	4b4d      	ldr	r3, [pc, #308]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 8001036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	61fb      	str	r3, [r7, #28]
 8001040:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b4a      	ldr	r3, [pc, #296]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 8001044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001048:	4a48      	ldr	r2, [pc, #288]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001052:	4b46      	ldr	r3, [pc, #280]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 8001054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001060:	4b42      	ldr	r3, [pc, #264]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001066:	4a41      	ldr	r2, [pc, #260]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 8001068:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800106c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001070:	4b3e      	ldr	r3, [pc, #248]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800107e:	4b3b      	ldr	r3, [pc, #236]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001084:	4a39      	ldr	r2, [pc, #228]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 8001086:	f043 0308 	orr.w	r3, r3, #8
 800108a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800108e:	4b37      	ldr	r3, [pc, #220]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001094:	f003 0308 	and.w	r3, r3, #8
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800109c:	4b33      	ldr	r3, [pc, #204]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 800109e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a2:	4a32      	ldr	r2, [pc, #200]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 80010a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ac:	4b2f      	ldr	r3, [pc, #188]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ba:	4b2c      	ldr	r3, [pc, #176]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c0:	4a2a      	ldr	r2, [pc, #168]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 80010c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ca:	4b28      	ldr	r3, [pc, #160]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010d8:	4b24      	ldr	r3, [pc, #144]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010de:	4a23      	ldr	r2, [pc, #140]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 80010e0:	f043 0320 	orr.w	r3, r3, #32
 80010e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e8:	4b20      	ldr	r3, [pc, #128]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ee:	f003 0320 	and.w	r3, r3, #32
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f6:	4b1d      	ldr	r3, [pc, #116]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fc:	4a1b      	ldr	r2, [pc, #108]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001106:	4b19      	ldr	r3, [pc, #100]	@ (800116c <_ZL12MX_GPIO_Initv+0x17c>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	2180      	movs	r1, #128	@ 0x80
 8001118:	4815      	ldr	r0, [pc, #84]	@ (8001170 <_ZL12MX_GPIO_Initv+0x180>)
 800111a:	f003 f975 	bl	8004408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_CODEC_GPIO_Port, RESET_CODEC_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001124:	4813      	ldr	r0, [pc, #76]	@ (8001174 <_ZL12MX_GPIO_Initv+0x184>)
 8001126:	f003 f96f 	bl	8004408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800112a:	2380      	movs	r3, #128	@ 0x80
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112e:	2301      	movs	r3, #1
 8001130:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800113e:	4619      	mov	r1, r3
 8001140:	480b      	ldr	r0, [pc, #44]	@ (8001170 <_ZL12MX_GPIO_Initv+0x180>)
 8001142:	f002 ffb1 	bl	80040a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_CODEC_Pin */
  GPIO_InitStruct.Pin = RESET_CODEC_Pin;
 8001146:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800114a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114c:	2301      	movs	r3, #1
 800114e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RESET_CODEC_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800115c:	4619      	mov	r1, r3
 800115e:	4805      	ldr	r0, [pc, #20]	@ (8001174 <_ZL12MX_GPIO_Initv+0x184>)
 8001160:	f002 ffa2 	bl	80040a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001164:	bf00      	nop
 8001166:	3738      	adds	r7, #56	@ 0x38
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	58024400 	.word	0x58024400
 8001170:	58020800 	.word	0x58020800
 8001174:	58020400 	.word	0x58020400

08001178 <_ZL10MPU_Configv>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800117e:	463b      	mov	r3, r7
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800118a:	f000 fe31 	bl	8001df0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800118e:	2301      	movs	r3, #1
 8001190:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001192:	2300      	movs	r3, #0
 8001194:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800119a:	231f      	movs	r3, #31
 800119c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800119e:	2387      	movs	r3, #135	@ 0x87
 80011a0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80011a6:	2300      	movs	r3, #0
 80011a8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80011aa:	2301      	movs	r3, #1
 80011ac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80011ae:	2301      	movs	r3, #1
 80011b0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011ba:	463b      	mov	r3, r7
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 fe4f 	bl	8001e60 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80011c2:	2301      	movs	r3, #1
 80011c4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x08000000;
 80011c6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80011ca:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80011cc:	2310      	movs	r3, #16
 80011ce:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO;
 80011d4:	2305      	movs	r3, #5
 80011d6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80011e0:	2301      	movs	r3, #1
 80011e2:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011e4:	463b      	mov	r3, r7
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 fe3a 	bl	8001e60 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80011ec:	2302      	movs	r3, #2
 80011ee:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80011f0:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 80011f4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 80011f6:	2316      	movs	r3, #22
 80011f8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80011fa:	2301      	movs	r3, #1
 80011fc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 80011fe:	2306      	movs	r3, #6
 8001200:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001202:	2301      	movs	r3, #1
 8001204:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001206:	2301      	movs	r3, #1
 8001208:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800120e:	463b      	mov	r3, r7
 8001210:	4618      	mov	r0, r3
 8001212:	f000 fe25 	bl	8001e60 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8001216:	2303      	movs	r3, #3
 8001218:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xC0000000;
 800121a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800121e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8001220:	2319      	movs	r3, #25
 8001222:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001224:	2303      	movs	r3, #3
 8001226:	72fb      	strb	r3, [r7, #11]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001228:	463b      	mov	r3, r7
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fe18 	bl	8001e60 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001230:	2004      	movs	r0, #4
 8001232:	f000 fdf5 	bl	8001e20 <HAL_MPU_Enable>

}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001242:	b672      	cpsid	i
}
 8001244:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001246:	bf00      	nop
 8001248:	e7fd      	b.n	8001246 <Error_Handler+0x8>
	...

0800124c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d107      	bne.n	800126c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001262:	4293      	cmp	r3, r2
 8001264:	d102      	bne.n	800126c <_Z41__static_initialization_and_destruction_0ii+0x20>
Dad::cIS25LPxxx __Flash;
 8001266:	4809      	ldr	r0, [pc, #36]	@ (800128c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001268:	f7ff fbd6 	bl	8000a18 <_ZN3Dad10cIS25LPxxxC1Ev>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d107      	bne.n	8001282 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001278:	4293      	cmp	r3, r2
 800127a:	d102      	bne.n	8001282 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800127c:	4803      	ldr	r0, [pc, #12]	@ (800128c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800127e:	f7ff fbe9 	bl	8000a54 <_ZN3Dad10cIS25LPxxxD1Ev>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	24000400 	.word	0x24000400

08001290 <_GLOBAL__sub_I_hqspi>:
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
 8001294:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001298:	2001      	movs	r0, #1
 800129a:	f7ff ffd7 	bl	800124c <_Z41__static_initialization_and_destruction_0ii>
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_GLOBAL__sub_D_hqspi>:
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff ffcf 	bl	800124c <_Z41__static_initialization_and_destruction_0ii>
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <HAL_MspInit+0x30>)
 80012b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012bc:	4a08      	ldr	r2, [pc, #32]	@ (80012e0 <HAL_MspInit+0x30>)
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012c6:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <HAL_MspInit+0x30>)
 80012c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	58024400 	.word	0x58024400

080012e4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0bc      	sub	sp, #240	@ 0xf0
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012fc:	f107 0318 	add.w	r3, r7, #24
 8001300:	22c0      	movs	r2, #192	@ 0xc0
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f008 fcb7 	bl	8009c78 <memset>
  if(hqspi->Instance==QUADSPI)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a48      	ldr	r2, [pc, #288]	@ (8001430 <HAL_QSPI_MspInit+0x14c>)
 8001310:	4293      	cmp	r3, r2
 8001312:	f040 8088 	bne.w	8001426 <HAL_QSPI_MspInit+0x142>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001316:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001322:	2300      	movs	r3, #0
 8001324:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001326:	f107 0318 	add.w	r3, r7, #24
 800132a:	4618      	mov	r0, r3
 800132c:	f004 ff4c 	bl	80061c8 <HAL_RCCEx_PeriphCLKConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001336:	f7ff ff82 	bl	800123e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800133a:	4b3e      	ldr	r3, [pc, #248]	@ (8001434 <HAL_QSPI_MspInit+0x150>)
 800133c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001340:	4a3c      	ldr	r2, [pc, #240]	@ (8001434 <HAL_QSPI_MspInit+0x150>)
 8001342:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001346:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800134a:	4b3a      	ldr	r3, [pc, #232]	@ (8001434 <HAL_QSPI_MspInit+0x150>)
 800134c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001350:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001358:	4b36      	ldr	r3, [pc, #216]	@ (8001434 <HAL_QSPI_MspInit+0x150>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800135e:	4a35      	ldr	r2, [pc, #212]	@ (8001434 <HAL_QSPI_MspInit+0x150>)
 8001360:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001364:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001368:	4b32      	ldr	r3, [pc, #200]	@ (8001434 <HAL_QSPI_MspInit+0x150>)
 800136a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800136e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001376:	4b2f      	ldr	r3, [pc, #188]	@ (8001434 <HAL_QSPI_MspInit+0x150>)
 8001378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800137c:	4a2d      	ldr	r2, [pc, #180]	@ (8001434 <HAL_QSPI_MspInit+0x150>)
 800137e:	f043 0320 	orr.w	r3, r3, #32
 8001382:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001386:	4b2b      	ldr	r3, [pc, #172]	@ (8001434 <HAL_QSPI_MspInit+0x150>)
 8001388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800138c:	f003 0320 	and.w	r3, r3, #32
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001394:	2340      	movs	r3, #64	@ 0x40
 8001396:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80013ac:	230a      	movs	r3, #10
 80013ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013b2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013b6:	4619      	mov	r1, r3
 80013b8:	481f      	ldr	r0, [pc, #124]	@ (8001438 <HAL_QSPI_MspInit+0x154>)
 80013ba:	f002 fe75 	bl	80040a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
 80013be:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80013c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80013d8:	2309      	movs	r3, #9
 80013da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013de:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013e2:	4619      	mov	r1, r3
 80013e4:	4815      	ldr	r0, [pc, #84]	@ (800143c <HAL_QSPI_MspInit+0x158>)
 80013e6:	f002 fe5f 	bl	80040a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80013ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001404:	230a      	movs	r3, #10
 8001406:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800140a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800140e:	4619      	mov	r1, r3
 8001410:	480a      	ldr	r0, [pc, #40]	@ (800143c <HAL_QSPI_MspInit+0x158>)
 8001412:	f002 fe49 	bl	80040a8 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	205c      	movs	r0, #92	@ 0x5c
 800141c:	f000 fcb3 	bl	8001d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8001420:	205c      	movs	r0, #92	@ 0x5c
 8001422:	f000 fcca 	bl	8001dba <HAL_NVIC_EnableIRQ>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001426:	bf00      	nop
 8001428:	37f0      	adds	r7, #240	@ 0xf0
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	52005000 	.word	0x52005000
 8001434:	58024400 	.word	0x58024400
 8001438:	58021800 	.word	0x58021800
 800143c:	58021400 	.word	0x58021400

08001440 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001440:	b580      	push	{r7, lr}
 8001442:	b0b8      	sub	sp, #224	@ 0xe0
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001446:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001456:	4b60      	ldr	r3, [pc, #384]	@ (80015d8 <HAL_FMC_MspInit+0x198>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	f040 80b8 	bne.w	80015d0 <HAL_FMC_MspInit+0x190>
    return;
  }
  FMC_Initialized = 1;
 8001460:	4b5d      	ldr	r3, [pc, #372]	@ (80015d8 <HAL_FMC_MspInit+0x198>)
 8001462:	2201      	movs	r2, #1
 8001464:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	22c0      	movs	r2, #192	@ 0xc0
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f008 fc02 	bl	8009c78 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001474:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8001480:	2300      	movs	r3, #0
 8001482:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	4618      	mov	r0, r3
 800148a:	f004 fe9d 	bl	80061c8 <HAL_RCCEx_PeriphCLKConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8001494:	f7ff fed3 	bl	800123e <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001498:	4b50      	ldr	r3, [pc, #320]	@ (80015dc <HAL_FMC_MspInit+0x19c>)
 800149a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800149e:	4a4f      	ldr	r2, [pc, #316]	@ (80015dc <HAL_FMC_MspInit+0x19c>)
 80014a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014a4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80014a8:	4b4c      	ldr	r3, [pc, #304]	@ (80015dc <HAL_FMC_MspInit+0x19c>)
 80014aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
 80014b6:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80014ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014d0:	230c      	movs	r3, #12
 80014d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80014da:	4619      	mov	r1, r3
 80014dc:	4840      	ldr	r0, [pc, #256]	@ (80015e0 <HAL_FMC_MspInit+0x1a0>)
 80014de:	f002 fde3 	bl	80040a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80014e2:	f248 1337 	movw	r3, #33079	@ 0x8137
 80014e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014fc:	230c      	movs	r3, #12
 80014fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001502:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001506:	4619      	mov	r1, r3
 8001508:	4836      	ldr	r0, [pc, #216]	@ (80015e4 <HAL_FMC_MspInit+0x1a4>)
 800150a:	f002 fdcd 	bl	80040a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800150e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001512:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001528:	230c      	movs	r3, #12
 800152a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800152e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001532:	4619      	mov	r1, r3
 8001534:	482c      	ldr	r0, [pc, #176]	@ (80015e8 <HAL_FMC_MspInit+0x1a8>)
 8001536:	f002 fdb7 	bl	80040a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
 800153a:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 800153e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_2|GPIO_PIN_9|GPIO_PIN_4|GPIO_PIN_1
                          |GPIO_PIN_10|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001554:	230c      	movs	r3, #12
 8001556:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800155a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800155e:	4619      	mov	r1, r3
 8001560:	4822      	ldr	r0, [pc, #136]	@ (80015ec <HAL_FMC_MspInit+0x1ac>)
 8001562:	f002 fda1 	bl	80040a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
 8001566:	f64f 732c 	movw	r3, #65324	@ 0xff2c
 800156a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_11
                          |GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157a:	2303      	movs	r3, #3
 800157c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001580:	230c      	movs	r3, #12
 8001582:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001586:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800158a:	4619      	mov	r1, r3
 800158c:	4818      	ldr	r0, [pc, #96]	@ (80015f0 <HAL_FMC_MspInit+0x1b0>)
 800158e:	f002 fd8b 	bl	80040a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 8001592:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001596:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015ac:	230c      	movs	r3, #12
 80015ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015b2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80015b6:	4619      	mov	r1, r3
 80015b8:	480e      	ldr	r0, [pc, #56]	@ (80015f4 <HAL_FMC_MspInit+0x1b4>)
 80015ba:	f002 fd75 	bl	80040a8 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FMC_IRQn, 0, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	2030      	movs	r0, #48	@ 0x30
 80015c4:	f000 fbdf 	bl	8001d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 80015c8:	2030      	movs	r0, #48	@ 0x30
 80015ca:	f000 fbf6 	bl	8001dba <HAL_NVIC_EnableIRQ>
 80015ce:	e000      	b.n	80015d2 <HAL_FMC_MspInit+0x192>
    return;
 80015d0:	bf00      	nop
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80015d2:	37e0      	adds	r7, #224	@ 0xe0
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	240004b8 	.word	0x240004b8
 80015dc:	58024400 	.word	0x58024400
 80015e0:	58021000 	.word	0x58021000
 80015e4:	58021800 	.word	0x58021800
 80015e8:	58020c00 	.word	0x58020c00
 80015ec:	58022000 	.word	0x58022000
 80015f0:	58021c00 	.word	0x58021c00
 80015f4:	58021400 	.word	0x58021400

080015f8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001600:	f7ff ff1e 	bl	8001440 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	@ 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a65      	ldr	r2, [pc, #404]	@ (80017b0 <HAL_SAI_MspInit+0x1a4>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d15f      	bne.n	80016de <HAL_SAI_MspInit+0xd2>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800161e:	4b65      	ldr	r3, [pc, #404]	@ (80017b4 <HAL_SAI_MspInit+0x1a8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10e      	bne.n	8001644 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001626:	4b64      	ldr	r3, [pc, #400]	@ (80017b8 <HAL_SAI_MspInit+0x1ac>)
 8001628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800162c:	4a62      	ldr	r2, [pc, #392]	@ (80017b8 <HAL_SAI_MspInit+0x1ac>)
 800162e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001632:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001636:	4b60      	ldr	r3, [pc, #384]	@ (80017b8 <HAL_SAI_MspInit+0x1ac>)
 8001638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800163c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001644:	4b5b      	ldr	r3, [pc, #364]	@ (80017b4 <HAL_SAI_MspInit+0x1a8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	3301      	adds	r3, #1
 800164a:	4a5a      	ldr	r2, [pc, #360]	@ (80017b4 <HAL_SAI_MspInit+0x1a8>)
 800164c:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800164e:	2374      	movs	r3, #116	@ 0x74
 8001650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165a:	2303      	movs	r3, #3
 800165c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800165e:	2306      	movs	r3, #6
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	4854      	ldr	r0, [pc, #336]	@ (80017bc <HAL_SAI_MspInit+0x1b0>)
 800166a:	f002 fd1d 	bl	80040a8 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 800166e:	4b54      	ldr	r3, [pc, #336]	@ (80017c0 <HAL_SAI_MspInit+0x1b4>)
 8001670:	4a54      	ldr	r2, [pc, #336]	@ (80017c4 <HAL_SAI_MspInit+0x1b8>)
 8001672:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8001674:	4b52      	ldr	r3, [pc, #328]	@ (80017c0 <HAL_SAI_MspInit+0x1b4>)
 8001676:	2257      	movs	r2, #87	@ 0x57
 8001678:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800167a:	4b51      	ldr	r3, [pc, #324]	@ (80017c0 <HAL_SAI_MspInit+0x1b4>)
 800167c:	2240      	movs	r2, #64	@ 0x40
 800167e:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001680:	4b4f      	ldr	r3, [pc, #316]	@ (80017c0 <HAL_SAI_MspInit+0x1b4>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001686:	4b4e      	ldr	r3, [pc, #312]	@ (80017c0 <HAL_SAI_MspInit+0x1b4>)
 8001688:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800168c:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800168e:	4b4c      	ldr	r3, [pc, #304]	@ (80017c0 <HAL_SAI_MspInit+0x1b4>)
 8001690:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001694:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001696:	4b4a      	ldr	r3, [pc, #296]	@ (80017c0 <HAL_SAI_MspInit+0x1b4>)
 8001698:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800169c:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800169e:	4b48      	ldr	r3, [pc, #288]	@ (80017c0 <HAL_SAI_MspInit+0x1b4>)
 80016a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016a4:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 80016a6:	4b46      	ldr	r3, [pc, #280]	@ (80017c0 <HAL_SAI_MspInit+0x1b4>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ac:	4b44      	ldr	r3, [pc, #272]	@ (80017c0 <HAL_SAI_MspInit+0x1b4>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80016b2:	4843      	ldr	r0, [pc, #268]	@ (80017c0 <HAL_SAI_MspInit+0x1b4>)
 80016b4:	f000 fc14 	bl	8001ee0 <HAL_DMA_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_SAI_MspInit+0xb6>
    {
      Error_Handler();
 80016be:	f7ff fdbe 	bl	800123e <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a3e      	ldr	r2, [pc, #248]	@ (80017c0 <HAL_SAI_MspInit+0x1b4>)
 80016c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80016ca:	4a3d      	ldr	r2, [pc, #244]	@ (80017c0 <HAL_SAI_MspInit+0x1b4>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a3b      	ldr	r2, [pc, #236]	@ (80017c0 <HAL_SAI_MspInit+0x1b4>)
 80016d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80016d8:	4a39      	ldr	r2, [pc, #228]	@ (80017c0 <HAL_SAI_MspInit+0x1b4>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a39      	ldr	r2, [pc, #228]	@ (80017c8 <HAL_SAI_MspInit+0x1bc>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d15f      	bne.n	80017a8 <HAL_SAI_MspInit+0x19c>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 80016e8:	4b32      	ldr	r3, [pc, #200]	@ (80017b4 <HAL_SAI_MspInit+0x1a8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10e      	bne.n	800170e <HAL_SAI_MspInit+0x102>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80016f0:	4b31      	ldr	r3, [pc, #196]	@ (80017b8 <HAL_SAI_MspInit+0x1ac>)
 80016f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016f6:	4a30      	ldr	r2, [pc, #192]	@ (80017b8 <HAL_SAI_MspInit+0x1ac>)
 80016f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001700:	4b2d      	ldr	r3, [pc, #180]	@ (80017b8 <HAL_SAI_MspInit+0x1ac>)
 8001702:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800170e:	4b29      	ldr	r3, [pc, #164]	@ (80017b4 <HAL_SAI_MspInit+0x1a8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	4a27      	ldr	r2, [pc, #156]	@ (80017b4 <HAL_SAI_MspInit+0x1a8>)
 8001716:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001718:	2308      	movs	r3, #8
 800171a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001728:	2306      	movs	r3, #6
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	4822      	ldr	r0, [pc, #136]	@ (80017bc <HAL_SAI_MspInit+0x1b0>)
 8001734:	f002 fcb8 	bl	80040a8 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 8001738:	4b24      	ldr	r3, [pc, #144]	@ (80017cc <HAL_SAI_MspInit+0x1c0>)
 800173a:	4a25      	ldr	r2, [pc, #148]	@ (80017d0 <HAL_SAI_MspInit+0x1c4>)
 800173c:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800173e:	4b23      	ldr	r3, [pc, #140]	@ (80017cc <HAL_SAI_MspInit+0x1c0>)
 8001740:	2258      	movs	r2, #88	@ 0x58
 8001742:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001744:	4b21      	ldr	r3, [pc, #132]	@ (80017cc <HAL_SAI_MspInit+0x1c0>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800174a:	4b20      	ldr	r3, [pc, #128]	@ (80017cc <HAL_SAI_MspInit+0x1c0>)
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8001750:	4b1e      	ldr	r3, [pc, #120]	@ (80017cc <HAL_SAI_MspInit+0x1c0>)
 8001752:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001756:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001758:	4b1c      	ldr	r3, [pc, #112]	@ (80017cc <HAL_SAI_MspInit+0x1c0>)
 800175a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800175e:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001760:	4b1a      	ldr	r3, [pc, #104]	@ (80017cc <HAL_SAI_MspInit+0x1c0>)
 8001762:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001766:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8001768:	4b18      	ldr	r3, [pc, #96]	@ (80017cc <HAL_SAI_MspInit+0x1c0>)
 800176a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800176e:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 8001770:	4b16      	ldr	r3, [pc, #88]	@ (80017cc <HAL_SAI_MspInit+0x1c0>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001776:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <HAL_SAI_MspInit+0x1c0>)
 8001778:	2200      	movs	r2, #0
 800177a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800177c:	4813      	ldr	r0, [pc, #76]	@ (80017cc <HAL_SAI_MspInit+0x1c0>)
 800177e:	f000 fbaf 	bl	8001ee0 <HAL_DMA_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8001788:	f7ff fd59 	bl	800123e <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a0f      	ldr	r2, [pc, #60]	@ (80017cc <HAL_SAI_MspInit+0x1c0>)
 8001790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001794:	4a0d      	ldr	r2, [pc, #52]	@ (80017cc <HAL_SAI_MspInit+0x1c0>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a0b      	ldr	r2, [pc, #44]	@ (80017cc <HAL_SAI_MspInit+0x1c0>)
 800179e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80017a2:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <HAL_SAI_MspInit+0x1c0>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 80017a8:	bf00      	nop
 80017aa:	3728      	adds	r7, #40	@ 0x28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40015804 	.word	0x40015804
 80017b4:	240004bc 	.word	0x240004bc
 80017b8:	58024400 	.word	0x58024400
 80017bc:	58021000 	.word	0x58021000
 80017c0:	240002dc 	.word	0x240002dc
 80017c4:	40020010 	.word	0x40020010
 80017c8:	40015824 	.word	0x40015824
 80017cc:	24000354 	.word	0x24000354
 80017d0:	40020028 	.word	0x40020028

080017d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <NMI_Handler+0x4>

080017dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <HardFault_Handler+0x4>

080017e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <MemManage_Handler+0x4>

080017ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <BusFault_Handler+0x4>

080017f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <UsageFault_Handler+0x4>

080017fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800182a:	f000 f981 	bl	8001b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001838:	4802      	ldr	r0, [pc, #8]	@ (8001844 <DMA1_Stream0_IRQHandler+0x10>)
 800183a:	f001 f917 	bl	8002a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	240002dc 	.word	0x240002dc

08001848 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800184c:	4802      	ldr	r0, [pc, #8]	@ (8001858 <DMA1_Stream1_IRQHandler+0x10>)
 800184e:	f001 f90d 	bl	8002a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	24000354 	.word	0x24000354

0800185c <FMC_IRQHandler>:

/**
  * @brief This function handles FMC global interrupt.
  */
void FMC_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 8001860:	4802      	ldr	r0, [pc, #8]	@ (800186c <FMC_IRQHandler+0x10>)
 8001862:	f008 f86d 	bl	8009940 <HAL_SDRAM_IRQHandler>
  /* USER CODE BEGIN FMC_IRQn 1 */

  /* USER CODE END FMC_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	240003cc 	.word	0x240003cc

08001870 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8001874:	4802      	ldr	r0, [pc, #8]	@ (8001880 <QUADSPI_IRQHandler+0x10>)
 8001876:	f002 fecf 	bl	8004618 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	24000160 	.word	0x24000160

08001884 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001888:	4b43      	ldr	r3, [pc, #268]	@ (8001998 <SystemInit+0x114>)
 800188a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800188e:	4a42      	ldr	r2, [pc, #264]	@ (8001998 <SystemInit+0x114>)
 8001890:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001894:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001898:	4b40      	ldr	r3, [pc, #256]	@ (800199c <SystemInit+0x118>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 030f 	and.w	r3, r3, #15
 80018a0:	2b06      	cmp	r3, #6
 80018a2:	d807      	bhi.n	80018b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018a4:	4b3d      	ldr	r3, [pc, #244]	@ (800199c <SystemInit+0x118>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f023 030f 	bic.w	r3, r3, #15
 80018ac:	4a3b      	ldr	r2, [pc, #236]	@ (800199c <SystemInit+0x118>)
 80018ae:	f043 0307 	orr.w	r3, r3, #7
 80018b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018b4:	4b3a      	ldr	r3, [pc, #232]	@ (80019a0 <SystemInit+0x11c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a39      	ldr	r2, [pc, #228]	@ (80019a0 <SystemInit+0x11c>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018c0:	4b37      	ldr	r3, [pc, #220]	@ (80019a0 <SystemInit+0x11c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018c6:	4b36      	ldr	r3, [pc, #216]	@ (80019a0 <SystemInit+0x11c>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	4935      	ldr	r1, [pc, #212]	@ (80019a0 <SystemInit+0x11c>)
 80018cc:	4b35      	ldr	r3, [pc, #212]	@ (80019a4 <SystemInit+0x120>)
 80018ce:	4013      	ands	r3, r2
 80018d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018d2:	4b32      	ldr	r3, [pc, #200]	@ (800199c <SystemInit+0x118>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d007      	beq.n	80018ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018de:	4b2f      	ldr	r3, [pc, #188]	@ (800199c <SystemInit+0x118>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 030f 	bic.w	r3, r3, #15
 80018e6:	4a2d      	ldr	r2, [pc, #180]	@ (800199c <SystemInit+0x118>)
 80018e8:	f043 0307 	orr.w	r3, r3, #7
 80018ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80018ee:	4b2c      	ldr	r3, [pc, #176]	@ (80019a0 <SystemInit+0x11c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80018f4:	4b2a      	ldr	r3, [pc, #168]	@ (80019a0 <SystemInit+0x11c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80018fa:	4b29      	ldr	r3, [pc, #164]	@ (80019a0 <SystemInit+0x11c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001900:	4b27      	ldr	r3, [pc, #156]	@ (80019a0 <SystemInit+0x11c>)
 8001902:	4a29      	ldr	r2, [pc, #164]	@ (80019a8 <SystemInit+0x124>)
 8001904:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001906:	4b26      	ldr	r3, [pc, #152]	@ (80019a0 <SystemInit+0x11c>)
 8001908:	4a28      	ldr	r2, [pc, #160]	@ (80019ac <SystemInit+0x128>)
 800190a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800190c:	4b24      	ldr	r3, [pc, #144]	@ (80019a0 <SystemInit+0x11c>)
 800190e:	4a28      	ldr	r2, [pc, #160]	@ (80019b0 <SystemInit+0x12c>)
 8001910:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001912:	4b23      	ldr	r3, [pc, #140]	@ (80019a0 <SystemInit+0x11c>)
 8001914:	2200      	movs	r2, #0
 8001916:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001918:	4b21      	ldr	r3, [pc, #132]	@ (80019a0 <SystemInit+0x11c>)
 800191a:	4a25      	ldr	r2, [pc, #148]	@ (80019b0 <SystemInit+0x12c>)
 800191c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800191e:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <SystemInit+0x11c>)
 8001920:	2200      	movs	r2, #0
 8001922:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001924:	4b1e      	ldr	r3, [pc, #120]	@ (80019a0 <SystemInit+0x11c>)
 8001926:	4a22      	ldr	r2, [pc, #136]	@ (80019b0 <SystemInit+0x12c>)
 8001928:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800192a:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <SystemInit+0x11c>)
 800192c:	2200      	movs	r2, #0
 800192e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001930:	4b1b      	ldr	r3, [pc, #108]	@ (80019a0 <SystemInit+0x11c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a1a      	ldr	r2, [pc, #104]	@ (80019a0 <SystemInit+0x11c>)
 8001936:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800193a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800193c:	4b18      	ldr	r3, [pc, #96]	@ (80019a0 <SystemInit+0x11c>)
 800193e:	2200      	movs	r2, #0
 8001940:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001942:	4b1c      	ldr	r3, [pc, #112]	@ (80019b4 <SystemInit+0x130>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	4b1c      	ldr	r3, [pc, #112]	@ (80019b8 <SystemInit+0x134>)
 8001948:	4013      	ands	r3, r2
 800194a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800194e:	d202      	bcs.n	8001956 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001950:	4b1a      	ldr	r3, [pc, #104]	@ (80019bc <SystemInit+0x138>)
 8001952:	2201      	movs	r2, #1
 8001954:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001956:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <SystemInit+0x11c>)
 8001958:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800195c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d113      	bne.n	800198c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001964:	4b0e      	ldr	r3, [pc, #56]	@ (80019a0 <SystemInit+0x11c>)
 8001966:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800196a:	4a0d      	ldr	r2, [pc, #52]	@ (80019a0 <SystemInit+0x11c>)
 800196c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001970:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001974:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <SystemInit+0x13c>)
 8001976:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800197a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800197c:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <SystemInit+0x11c>)
 800197e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001982:	4a07      	ldr	r2, [pc, #28]	@ (80019a0 <SystemInit+0x11c>)
 8001984:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001988:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000ed00 	.word	0xe000ed00
 800199c:	52002000 	.word	0x52002000
 80019a0:	58024400 	.word	0x58024400
 80019a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80019a8:	02020200 	.word	0x02020200
 80019ac:	01ff0000 	.word	0x01ff0000
 80019b0:	01010280 	.word	0x01010280
 80019b4:	5c001000 	.word	0x5c001000
 80019b8:	ffff0000 	.word	0xffff0000
 80019bc:	51008108 	.word	0x51008108
 80019c0:	52004000 	.word	0x52004000

080019c4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80019c8:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <ExitRun0Mode+0x2c>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	4a08      	ldr	r2, [pc, #32]	@ (80019f0 <ExitRun0Mode+0x2c>)
 80019ce:	f043 0302 	orr.w	r3, r3, #2
 80019d2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80019d4:	bf00      	nop
 80019d6:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <ExitRun0Mode+0x2c>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f9      	beq.n	80019d6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	58024800 	.word	0x58024800

080019f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019f4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001a30 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80019f8:	f7ff ffe4 	bl	80019c4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019fc:	f7ff ff42 	bl	8001884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a00:	480c      	ldr	r0, [pc, #48]	@ (8001a34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a02:	490d      	ldr	r1, [pc, #52]	@ (8001a38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a04:	4a0d      	ldr	r2, [pc, #52]	@ (8001a3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a08:	e002      	b.n	8001a10 <LoopCopyDataInit>

08001a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0e:	3304      	adds	r3, #4

08001a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a14:	d3f9      	bcc.n	8001a0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a16:	4a0a      	ldr	r2, [pc, #40]	@ (8001a40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a18:	4c0a      	ldr	r4, [pc, #40]	@ (8001a44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a1c:	e001      	b.n	8001a22 <LoopFillZerobss>

08001a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a20:	3204      	adds	r2, #4

08001a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a24:	d3fb      	bcc.n	8001a1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a26:	f008 f92f 	bl	8009c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a2a:	f7ff f859 	bl	8000ae0 <main>
  bx  lr
 8001a2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a30:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a38:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001a3c:	08009dc8 	.word	0x08009dc8
  ldr r2, =_sbss
 8001a40:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8001a44:	24000604 	.word	0x24000604

08001a48 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a48:	e7fe      	b.n	8001a48 <ADC3_IRQHandler>
	...

08001a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a52:	2003      	movs	r0, #3
 8001a54:	f000 f98c 	bl	8001d70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a58:	f004 f9f6 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	4b15      	ldr	r3, [pc, #84]	@ (8001ab4 <HAL_Init+0x68>)
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	0a1b      	lsrs	r3, r3, #8
 8001a64:	f003 030f 	and.w	r3, r3, #15
 8001a68:	4913      	ldr	r1, [pc, #76]	@ (8001ab8 <HAL_Init+0x6c>)
 8001a6a:	5ccb      	ldrb	r3, [r1, r3]
 8001a6c:	f003 031f 	and.w	r3, r3, #31
 8001a70:	fa22 f303 	lsr.w	r3, r2, r3
 8001a74:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a76:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab4 <HAL_Init+0x68>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab8 <HAL_Init+0x6c>)
 8001a80:	5cd3      	ldrb	r3, [r2, r3]
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001abc <HAL_Init+0x70>)
 8001a8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a90:	4a0b      	ldr	r2, [pc, #44]	@ (8001ac0 <HAL_Init+0x74>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a96:	200f      	movs	r0, #15
 8001a98:	f000 f814 	bl	8001ac4 <HAL_InitTick>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e002      	b.n	8001aac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa6:	f7ff fc03 	bl	80012b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	58024400 	.word	0x58024400
 8001ab8:	08009da0 	.word	0x08009da0
 8001abc:	24000008 	.word	0x24000008
 8001ac0:	24000004 	.word	0x24000004

08001ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001acc:	4b15      	ldr	r3, [pc, #84]	@ (8001b24 <HAL_InitTick+0x60>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e021      	b.n	8001b1c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ad8:	4b13      	ldr	r3, [pc, #76]	@ (8001b28 <HAL_InitTick+0x64>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <HAL_InitTick+0x60>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 f971 	bl	8001dd6 <HAL_SYSTICK_Config>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00e      	b.n	8001b1c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b0f      	cmp	r3, #15
 8001b02:	d80a      	bhi.n	8001b1a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b04:	2200      	movs	r2, #0
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f000 f93b 	bl	8001d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b10:	4a06      	ldr	r2, [pc, #24]	@ (8001b2c <HAL_InitTick+0x68>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	e000      	b.n	8001b1c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	24000010 	.word	0x24000010
 8001b28:	24000004 	.word	0x24000004
 8001b2c:	2400000c 	.word	0x2400000c

08001b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b34:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <HAL_IncTick+0x20>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <HAL_IncTick+0x24>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4413      	add	r3, r2
 8001b40:	4a04      	ldr	r2, [pc, #16]	@ (8001b54 <HAL_IncTick+0x24>)
 8001b42:	6013      	str	r3, [r2, #0]
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	24000010 	.word	0x24000010
 8001b54:	240004c0 	.word	0x240004c0

08001b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	@ (8001b6c <HAL_GetTick+0x14>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	240004c0 	.word	0x240004c0

08001b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b78:	f7ff ffee 	bl	8001b58 <HAL_GetTick>
 8001b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b88:	d005      	beq.n	8001b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <HAL_Delay+0x44>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b96:	bf00      	nop
 8001b98:	f7ff ffde 	bl	8001b58 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d8f7      	bhi.n	8001b98 <HAL_Delay+0x28>
  {
  }
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	24000010 	.word	0x24000010

08001bb8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001bbc:	4b03      	ldr	r3, [pc, #12]	@ (8001bcc <HAL_GetREVID+0x14>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	0c1b      	lsrs	r3, r3, #16
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	5c001000 	.word	0x5c001000

08001bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c10 <__NVIC_SetPriorityGrouping+0x40>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bec:	4013      	ands	r3, r2
 8001bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bf8:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfe:	4a04      	ldr	r2, [pc, #16]	@ (8001c10 <__NVIC_SetPriorityGrouping+0x40>)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	60d3      	str	r3, [r2, #12]
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00
 8001c14:	05fa0000 	.word	0x05fa0000

08001c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c1c:	4b04      	ldr	r3, [pc, #16]	@ (8001c30 <__NVIC_GetPriorityGrouping+0x18>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	f003 0307 	and.w	r3, r3, #7
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	db0b      	blt.n	8001c5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	f003 021f 	and.w	r2, r3, #31
 8001c4c:	4907      	ldr	r1, [pc, #28]	@ (8001c6c <__NVIC_EnableIRQ+0x38>)
 8001c4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	2001      	movs	r0, #1
 8001c56:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000e100 	.word	0xe000e100

08001c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	db0a      	blt.n	8001c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	490c      	ldr	r1, [pc, #48]	@ (8001cbc <__NVIC_SetPriority+0x4c>)
 8001c8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c8e:	0112      	lsls	r2, r2, #4
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	440b      	add	r3, r1
 8001c94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c98:	e00a      	b.n	8001cb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4908      	ldr	r1, [pc, #32]	@ (8001cc0 <__NVIC_SetPriority+0x50>)
 8001ca0:	88fb      	ldrh	r3, [r7, #6]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	3b04      	subs	r3, #4
 8001ca8:	0112      	lsls	r2, r2, #4
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	440b      	add	r3, r1
 8001cae:	761a      	strb	r2, [r3, #24]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000e100 	.word	0xe000e100
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	@ 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f1c3 0307 	rsb	r3, r3, #7
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	bf28      	it	cs
 8001ce2:	2304      	movcs	r3, #4
 8001ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	2b06      	cmp	r3, #6
 8001cec:	d902      	bls.n	8001cf4 <NVIC_EncodePriority+0x30>
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3b03      	subs	r3, #3
 8001cf2:	e000      	b.n	8001cf6 <NVIC_EncodePriority+0x32>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	401a      	ands	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	43d9      	mvns	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	4313      	orrs	r3, r2
         );
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3724      	adds	r7, #36	@ 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d3c:	d301      	bcc.n	8001d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00f      	b.n	8001d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d42:	4a0a      	ldr	r2, [pc, #40]	@ (8001d6c <SysTick_Config+0x40>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4a:	210f      	movs	r1, #15
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d50:	f7ff ff8e 	bl	8001c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d54:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <SysTick_Config+0x40>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5a:	4b04      	ldr	r3, [pc, #16]	@ (8001d6c <SysTick_Config+0x40>)
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	e000e010 	.word	0xe000e010

08001d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ff29 	bl	8001bd0 <__NVIC_SetPriorityGrouping>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d94:	f7ff ff40 	bl	8001c18 <__NVIC_GetPriorityGrouping>
 8001d98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	6978      	ldr	r0, [r7, #20]
 8001da0:	f7ff ff90 	bl	8001cc4 <NVIC_EncodePriority>
 8001da4:	4602      	mov	r2, r0
 8001da6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff5f 	bl	8001c70 <__NVIC_SetPriority>
}
 8001db2:	bf00      	nop
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff33 	bl	8001c34 <__NVIC_EnableIRQ>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff ffa4 	bl	8001d2c <SysTick_Config>
 8001de4:	4603      	mov	r3, r0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001df4:	f3bf 8f5f 	dmb	sy
}
 8001df8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001dfa:	4b07      	ldr	r3, [pc, #28]	@ (8001e18 <HAL_MPU_Disable+0x28>)
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfe:	4a06      	ldr	r2, [pc, #24]	@ (8001e18 <HAL_MPU_Disable+0x28>)
 8001e00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e04:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e06:	4b05      	ldr	r3, [pc, #20]	@ (8001e1c <HAL_MPU_Disable+0x2c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	605a      	str	r2, [r3, #4]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00
 8001e1c:	e000ed90 	.word	0xe000ed90

08001e20 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001e28:	4a0b      	ldr	r2, [pc, #44]	@ (8001e58 <HAL_MPU_Enable+0x38>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001e32:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <HAL_MPU_Enable+0x3c>)
 8001e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e36:	4a09      	ldr	r2, [pc, #36]	@ (8001e5c <HAL_MPU_Enable+0x3c>)
 8001e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e3c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3e:	f3bf 8f4f 	dsb	sy
}
 8001e42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e44:	f3bf 8f6f 	isb	sy
}
 8001e48:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000ed90 	.word	0xe000ed90
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	785a      	ldrb	r2, [r3, #1]
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001edc <HAL_MPU_ConfigRegion+0x7c>)
 8001e6e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001e70:	4b1a      	ldr	r3, [pc, #104]	@ (8001edc <HAL_MPU_ConfigRegion+0x7c>)
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	4a19      	ldr	r2, [pc, #100]	@ (8001edc <HAL_MPU_ConfigRegion+0x7c>)
 8001e76:	f023 0301 	bic.w	r3, r3, #1
 8001e7a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001e7c:	4a17      	ldr	r2, [pc, #92]	@ (8001edc <HAL_MPU_ConfigRegion+0x7c>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7b1b      	ldrb	r3, [r3, #12]
 8001e88:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	7adb      	ldrb	r3, [r3, #11]
 8001e8e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	7a9b      	ldrb	r3, [r3, #10]
 8001e96:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	7b5b      	ldrb	r3, [r3, #13]
 8001e9e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ea0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	7b9b      	ldrb	r3, [r3, #14]
 8001ea6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ea8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7bdb      	ldrb	r3, [r3, #15]
 8001eae:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001eb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	7a5b      	ldrb	r3, [r3, #9]
 8001eb6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001eb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7a1b      	ldrb	r3, [r3, #8]
 8001ebe:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ec0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	7812      	ldrb	r2, [r2, #0]
 8001ec6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ec8:	4a04      	ldr	r2, [pc, #16]	@ (8001edc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001eca:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ecc:	6113      	str	r3, [r2, #16]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000ed90 	.word	0xe000ed90

08001ee0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001ee8:	f7ff fe36 	bl	8001b58 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e316      	b.n	8002526 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a66      	ldr	r2, [pc, #408]	@ (8002098 <HAL_DMA_Init+0x1b8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d04a      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a65      	ldr	r2, [pc, #404]	@ (800209c <HAL_DMA_Init+0x1bc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d045      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a63      	ldr	r2, [pc, #396]	@ (80020a0 <HAL_DMA_Init+0x1c0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d040      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a62      	ldr	r2, [pc, #392]	@ (80020a4 <HAL_DMA_Init+0x1c4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d03b      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a60      	ldr	r2, [pc, #384]	@ (80020a8 <HAL_DMA_Init+0x1c8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d036      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a5f      	ldr	r2, [pc, #380]	@ (80020ac <HAL_DMA_Init+0x1cc>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d031      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a5d      	ldr	r2, [pc, #372]	@ (80020b0 <HAL_DMA_Init+0x1d0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d02c      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a5c      	ldr	r2, [pc, #368]	@ (80020b4 <HAL_DMA_Init+0x1d4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d027      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a5a      	ldr	r2, [pc, #360]	@ (80020b8 <HAL_DMA_Init+0x1d8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d022      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a59      	ldr	r2, [pc, #356]	@ (80020bc <HAL_DMA_Init+0x1dc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d01d      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a57      	ldr	r2, [pc, #348]	@ (80020c0 <HAL_DMA_Init+0x1e0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d018      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a56      	ldr	r2, [pc, #344]	@ (80020c4 <HAL_DMA_Init+0x1e4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d013      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a54      	ldr	r2, [pc, #336]	@ (80020c8 <HAL_DMA_Init+0x1e8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00e      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a53      	ldr	r2, [pc, #332]	@ (80020cc <HAL_DMA_Init+0x1ec>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d009      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a51      	ldr	r2, [pc, #324]	@ (80020d0 <HAL_DMA_Init+0x1f0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d004      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a50      	ldr	r2, [pc, #320]	@ (80020d4 <HAL_DMA_Init+0x1f4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d101      	bne.n	8001f9c <HAL_DMA_Init+0xbc>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_DMA_Init+0xbe>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 813b 	beq.w	800221a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a37      	ldr	r2, [pc, #220]	@ (8002098 <HAL_DMA_Init+0x1b8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d04a      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a36      	ldr	r2, [pc, #216]	@ (800209c <HAL_DMA_Init+0x1bc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d045      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a34      	ldr	r2, [pc, #208]	@ (80020a0 <HAL_DMA_Init+0x1c0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d040      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a33      	ldr	r2, [pc, #204]	@ (80020a4 <HAL_DMA_Init+0x1c4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d03b      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a31      	ldr	r2, [pc, #196]	@ (80020a8 <HAL_DMA_Init+0x1c8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d036      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a30      	ldr	r2, [pc, #192]	@ (80020ac <HAL_DMA_Init+0x1cc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d031      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a2e      	ldr	r2, [pc, #184]	@ (80020b0 <HAL_DMA_Init+0x1d0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d02c      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a2d      	ldr	r2, [pc, #180]	@ (80020b4 <HAL_DMA_Init+0x1d4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d027      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a2b      	ldr	r2, [pc, #172]	@ (80020b8 <HAL_DMA_Init+0x1d8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d022      	beq.n	8002054 <HAL_DMA_Init+0x174>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a2a      	ldr	r2, [pc, #168]	@ (80020bc <HAL_DMA_Init+0x1dc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d01d      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a28      	ldr	r2, [pc, #160]	@ (80020c0 <HAL_DMA_Init+0x1e0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d018      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a27      	ldr	r2, [pc, #156]	@ (80020c4 <HAL_DMA_Init+0x1e4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d013      	beq.n	8002054 <HAL_DMA_Init+0x174>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a25      	ldr	r2, [pc, #148]	@ (80020c8 <HAL_DMA_Init+0x1e8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00e      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a24      	ldr	r2, [pc, #144]	@ (80020cc <HAL_DMA_Init+0x1ec>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d009      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a22      	ldr	r2, [pc, #136]	@ (80020d0 <HAL_DMA_Init+0x1f0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d004      	beq.n	8002054 <HAL_DMA_Init+0x174>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a21      	ldr	r2, [pc, #132]	@ (80020d4 <HAL_DMA_Init+0x1f4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d108      	bne.n	8002066 <HAL_DMA_Init+0x186>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0201 	bic.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	e007      	b.n	8002076 <HAL_DMA_Init+0x196>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0201 	bic.w	r2, r2, #1
 8002074:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002076:	e02f      	b.n	80020d8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002078:	f7ff fd6e 	bl	8001b58 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b05      	cmp	r3, #5
 8002084:	d928      	bls.n	80020d8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2220      	movs	r2, #32
 800208a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2203      	movs	r2, #3
 8002090:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e246      	b.n	8002526 <HAL_DMA_Init+0x646>
 8002098:	40020010 	.word	0x40020010
 800209c:	40020028 	.word	0x40020028
 80020a0:	40020040 	.word	0x40020040
 80020a4:	40020058 	.word	0x40020058
 80020a8:	40020070 	.word	0x40020070
 80020ac:	40020088 	.word	0x40020088
 80020b0:	400200a0 	.word	0x400200a0
 80020b4:	400200b8 	.word	0x400200b8
 80020b8:	40020410 	.word	0x40020410
 80020bc:	40020428 	.word	0x40020428
 80020c0:	40020440 	.word	0x40020440
 80020c4:	40020458 	.word	0x40020458
 80020c8:	40020470 	.word	0x40020470
 80020cc:	40020488 	.word	0x40020488
 80020d0:	400204a0 	.word	0x400204a0
 80020d4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1c8      	bne.n	8002078 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4b83      	ldr	r3, [pc, #524]	@ (8002300 <HAL_DMA_Init+0x420>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80020fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002116:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4313      	orrs	r3, r2
 8002122:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002128:	2b04      	cmp	r3, #4
 800212a:	d107      	bne.n	800213c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002134:	4313      	orrs	r3, r2
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	4313      	orrs	r3, r2
 800213a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800213c:	4b71      	ldr	r3, [pc, #452]	@ (8002304 <HAL_DMA_Init+0x424>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b71      	ldr	r3, [pc, #452]	@ (8002308 <HAL_DMA_Init+0x428>)
 8002142:	4013      	ands	r3, r2
 8002144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002148:	d328      	bcc.n	800219c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b28      	cmp	r3, #40	@ 0x28
 8002150:	d903      	bls.n	800215a <HAL_DMA_Init+0x27a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b2e      	cmp	r3, #46	@ 0x2e
 8002158:	d917      	bls.n	800218a <HAL_DMA_Init+0x2aa>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002160:	d903      	bls.n	800216a <HAL_DMA_Init+0x28a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b42      	cmp	r3, #66	@ 0x42
 8002168:	d90f      	bls.n	800218a <HAL_DMA_Init+0x2aa>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b46      	cmp	r3, #70	@ 0x46
 8002170:	d903      	bls.n	800217a <HAL_DMA_Init+0x29a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b48      	cmp	r3, #72	@ 0x48
 8002178:	d907      	bls.n	800218a <HAL_DMA_Init+0x2aa>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b4e      	cmp	r3, #78	@ 0x4e
 8002180:	d905      	bls.n	800218e <HAL_DMA_Init+0x2ae>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b52      	cmp	r3, #82	@ 0x52
 8002188:	d801      	bhi.n	800218e <HAL_DMA_Init+0x2ae>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <HAL_DMA_Init+0x2b0>
 800218e:	2300      	movs	r3, #0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800219a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f023 0307 	bic.w	r3, r3, #7
 80021b2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d117      	bne.n	80021f6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00e      	beq.n	80021f6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f001 fddb 	bl	8003d94 <DMA_CheckFifoParam>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d008      	beq.n	80021f6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2240      	movs	r2, #64	@ 0x40
 80021e8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e197      	b.n	8002526 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f001 fd16 	bl	8003c30 <DMA_CalcBaseAndBitshift>
 8002204:	4603      	mov	r3, r0
 8002206:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	223f      	movs	r2, #63	@ 0x3f
 8002212:	409a      	lsls	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	e0cd      	b.n	80023b6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a3b      	ldr	r2, [pc, #236]	@ (800230c <HAL_DMA_Init+0x42c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d022      	beq.n	800226a <HAL_DMA_Init+0x38a>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a39      	ldr	r2, [pc, #228]	@ (8002310 <HAL_DMA_Init+0x430>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d01d      	beq.n	800226a <HAL_DMA_Init+0x38a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a38      	ldr	r2, [pc, #224]	@ (8002314 <HAL_DMA_Init+0x434>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d018      	beq.n	800226a <HAL_DMA_Init+0x38a>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a36      	ldr	r2, [pc, #216]	@ (8002318 <HAL_DMA_Init+0x438>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d013      	beq.n	800226a <HAL_DMA_Init+0x38a>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a35      	ldr	r2, [pc, #212]	@ (800231c <HAL_DMA_Init+0x43c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d00e      	beq.n	800226a <HAL_DMA_Init+0x38a>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a33      	ldr	r2, [pc, #204]	@ (8002320 <HAL_DMA_Init+0x440>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d009      	beq.n	800226a <HAL_DMA_Init+0x38a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a32      	ldr	r2, [pc, #200]	@ (8002324 <HAL_DMA_Init+0x444>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d004      	beq.n	800226a <HAL_DMA_Init+0x38a>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a30      	ldr	r2, [pc, #192]	@ (8002328 <HAL_DMA_Init+0x448>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d101      	bne.n	800226e <HAL_DMA_Init+0x38e>
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <HAL_DMA_Init+0x390>
 800226e:	2300      	movs	r3, #0
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 8097 	beq.w	80023a4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a24      	ldr	r2, [pc, #144]	@ (800230c <HAL_DMA_Init+0x42c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d021      	beq.n	80022c4 <HAL_DMA_Init+0x3e4>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a22      	ldr	r2, [pc, #136]	@ (8002310 <HAL_DMA_Init+0x430>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d01c      	beq.n	80022c4 <HAL_DMA_Init+0x3e4>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a21      	ldr	r2, [pc, #132]	@ (8002314 <HAL_DMA_Init+0x434>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d017      	beq.n	80022c4 <HAL_DMA_Init+0x3e4>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a1f      	ldr	r2, [pc, #124]	@ (8002318 <HAL_DMA_Init+0x438>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d012      	beq.n	80022c4 <HAL_DMA_Init+0x3e4>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a1e      	ldr	r2, [pc, #120]	@ (800231c <HAL_DMA_Init+0x43c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d00d      	beq.n	80022c4 <HAL_DMA_Init+0x3e4>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002320 <HAL_DMA_Init+0x440>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d008      	beq.n	80022c4 <HAL_DMA_Init+0x3e4>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002324 <HAL_DMA_Init+0x444>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d003      	beq.n	80022c4 <HAL_DMA_Init+0x3e4>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a19      	ldr	r2, [pc, #100]	@ (8002328 <HAL_DMA_Init+0x448>)
 80022c2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	4b13      	ldr	r3, [pc, #76]	@ (800232c <HAL_DMA_Init+0x44c>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b40      	cmp	r3, #64	@ 0x40
 80022ea:	d021      	beq.n	8002330 <HAL_DMA_Init+0x450>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b80      	cmp	r3, #128	@ 0x80
 80022f2:	d102      	bne.n	80022fa <HAL_DMA_Init+0x41a>
 80022f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022f8:	e01b      	b.n	8002332 <HAL_DMA_Init+0x452>
 80022fa:	2300      	movs	r3, #0
 80022fc:	e019      	b.n	8002332 <HAL_DMA_Init+0x452>
 80022fe:	bf00      	nop
 8002300:	fe10803f 	.word	0xfe10803f
 8002304:	5c001000 	.word	0x5c001000
 8002308:	ffff0000 	.word	0xffff0000
 800230c:	58025408 	.word	0x58025408
 8002310:	5802541c 	.word	0x5802541c
 8002314:	58025430 	.word	0x58025430
 8002318:	58025444 	.word	0x58025444
 800231c:	58025458 	.word	0x58025458
 8002320:	5802546c 	.word	0x5802546c
 8002324:	58025480 	.word	0x58025480
 8002328:	58025494 	.word	0x58025494
 800232c:	fffe000f 	.word	0xfffe000f
 8002330:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68d2      	ldr	r2, [r2, #12]
 8002336:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002338:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002340:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002348:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002350:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002358:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002360:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4313      	orrs	r3, r2
 8002366:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	4b6e      	ldr	r3, [pc, #440]	@ (8002530 <HAL_DMA_Init+0x650>)
 8002378:	4413      	add	r3, r2
 800237a:	4a6e      	ldr	r2, [pc, #440]	@ (8002534 <HAL_DMA_Init+0x654>)
 800237c:	fba2 2303 	umull	r2, r3, r2, r3
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	009a      	lsls	r2, r3, #2
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f001 fc51 	bl	8003c30 <DMA_CalcBaseAndBitshift>
 800238e:	4603      	mov	r3, r0
 8002390:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002396:	f003 031f 	and.w	r3, r3, #31
 800239a:	2201      	movs	r2, #1
 800239c:	409a      	lsls	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	e008      	b.n	80023b6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2240      	movs	r2, #64	@ 0x40
 80023a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2203      	movs	r2, #3
 80023ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e0b7      	b.n	8002526 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a5f      	ldr	r2, [pc, #380]	@ (8002538 <HAL_DMA_Init+0x658>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d072      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a5d      	ldr	r2, [pc, #372]	@ (800253c <HAL_DMA_Init+0x65c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d06d      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a5c      	ldr	r2, [pc, #368]	@ (8002540 <HAL_DMA_Init+0x660>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d068      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a5a      	ldr	r2, [pc, #360]	@ (8002544 <HAL_DMA_Init+0x664>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d063      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a59      	ldr	r2, [pc, #356]	@ (8002548 <HAL_DMA_Init+0x668>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d05e      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a57      	ldr	r2, [pc, #348]	@ (800254c <HAL_DMA_Init+0x66c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d059      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a56      	ldr	r2, [pc, #344]	@ (8002550 <HAL_DMA_Init+0x670>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d054      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a54      	ldr	r2, [pc, #336]	@ (8002554 <HAL_DMA_Init+0x674>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d04f      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a53      	ldr	r2, [pc, #332]	@ (8002558 <HAL_DMA_Init+0x678>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d04a      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a51      	ldr	r2, [pc, #324]	@ (800255c <HAL_DMA_Init+0x67c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d045      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a50      	ldr	r2, [pc, #320]	@ (8002560 <HAL_DMA_Init+0x680>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d040      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a4e      	ldr	r2, [pc, #312]	@ (8002564 <HAL_DMA_Init+0x684>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d03b      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a4d      	ldr	r2, [pc, #308]	@ (8002568 <HAL_DMA_Init+0x688>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d036      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a4b      	ldr	r2, [pc, #300]	@ (800256c <HAL_DMA_Init+0x68c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d031      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a4a      	ldr	r2, [pc, #296]	@ (8002570 <HAL_DMA_Init+0x690>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d02c      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a48      	ldr	r2, [pc, #288]	@ (8002574 <HAL_DMA_Init+0x694>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d027      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a47      	ldr	r2, [pc, #284]	@ (8002578 <HAL_DMA_Init+0x698>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d022      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a45      	ldr	r2, [pc, #276]	@ (800257c <HAL_DMA_Init+0x69c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d01d      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a44      	ldr	r2, [pc, #272]	@ (8002580 <HAL_DMA_Init+0x6a0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d018      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a42      	ldr	r2, [pc, #264]	@ (8002584 <HAL_DMA_Init+0x6a4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a41      	ldr	r2, [pc, #260]	@ (8002588 <HAL_DMA_Init+0x6a8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d00e      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a3f      	ldr	r2, [pc, #252]	@ (800258c <HAL_DMA_Init+0x6ac>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d009      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a3e      	ldr	r2, [pc, #248]	@ (8002590 <HAL_DMA_Init+0x6b0>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d004      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a3c      	ldr	r2, [pc, #240]	@ (8002594 <HAL_DMA_Init+0x6b4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d101      	bne.n	80024aa <HAL_DMA_Init+0x5ca>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <HAL_DMA_Init+0x5cc>
 80024aa:	2300      	movs	r3, #0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d032      	beq.n	8002516 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f001 fceb 	bl	8003e8c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b80      	cmp	r3, #128	@ 0x80
 80024bc:	d102      	bne.n	80024c4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80024d8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d010      	beq.n	8002504 <HAL_DMA_Init+0x624>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d80c      	bhi.n	8002504 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f001 fd68 	bl	8003fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	e008      	b.n	8002516 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	a7fdabf8 	.word	0xa7fdabf8
 8002534:	cccccccd 	.word	0xcccccccd
 8002538:	40020010 	.word	0x40020010
 800253c:	40020028 	.word	0x40020028
 8002540:	40020040 	.word	0x40020040
 8002544:	40020058 	.word	0x40020058
 8002548:	40020070 	.word	0x40020070
 800254c:	40020088 	.word	0x40020088
 8002550:	400200a0 	.word	0x400200a0
 8002554:	400200b8 	.word	0x400200b8
 8002558:	40020410 	.word	0x40020410
 800255c:	40020428 	.word	0x40020428
 8002560:	40020440 	.word	0x40020440
 8002564:	40020458 	.word	0x40020458
 8002568:	40020470 	.word	0x40020470
 800256c:	40020488 	.word	0x40020488
 8002570:	400204a0 	.word	0x400204a0
 8002574:	400204b8 	.word	0x400204b8
 8002578:	58025408 	.word	0x58025408
 800257c:	5802541c 	.word	0x5802541c
 8002580:	58025430 	.word	0x58025430
 8002584:	58025444 	.word	0x58025444
 8002588:	58025458 	.word	0x58025458
 800258c:	5802546c 	.word	0x5802546c
 8002590:	58025480 	.word	0x58025480
 8002594:	58025494 	.word	0x58025494

08002598 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
 80025a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e226      	b.n	8002a02 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_DMA_Start_IT+0x2a>
 80025be:	2302      	movs	r3, #2
 80025c0:	e21f      	b.n	8002a02 <HAL_DMA_Start_IT+0x46a>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	f040 820a 	bne.w	80029ec <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a68      	ldr	r2, [pc, #416]	@ (800278c <HAL_DMA_Start_IT+0x1f4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d04a      	beq.n	8002686 <HAL_DMA_Start_IT+0xee>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a66      	ldr	r2, [pc, #408]	@ (8002790 <HAL_DMA_Start_IT+0x1f8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d045      	beq.n	8002686 <HAL_DMA_Start_IT+0xee>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a65      	ldr	r2, [pc, #404]	@ (8002794 <HAL_DMA_Start_IT+0x1fc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d040      	beq.n	8002686 <HAL_DMA_Start_IT+0xee>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a63      	ldr	r2, [pc, #396]	@ (8002798 <HAL_DMA_Start_IT+0x200>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d03b      	beq.n	8002686 <HAL_DMA_Start_IT+0xee>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a62      	ldr	r2, [pc, #392]	@ (800279c <HAL_DMA_Start_IT+0x204>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d036      	beq.n	8002686 <HAL_DMA_Start_IT+0xee>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a60      	ldr	r2, [pc, #384]	@ (80027a0 <HAL_DMA_Start_IT+0x208>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d031      	beq.n	8002686 <HAL_DMA_Start_IT+0xee>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a5f      	ldr	r2, [pc, #380]	@ (80027a4 <HAL_DMA_Start_IT+0x20c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d02c      	beq.n	8002686 <HAL_DMA_Start_IT+0xee>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a5d      	ldr	r2, [pc, #372]	@ (80027a8 <HAL_DMA_Start_IT+0x210>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d027      	beq.n	8002686 <HAL_DMA_Start_IT+0xee>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a5c      	ldr	r2, [pc, #368]	@ (80027ac <HAL_DMA_Start_IT+0x214>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d022      	beq.n	8002686 <HAL_DMA_Start_IT+0xee>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a5a      	ldr	r2, [pc, #360]	@ (80027b0 <HAL_DMA_Start_IT+0x218>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d01d      	beq.n	8002686 <HAL_DMA_Start_IT+0xee>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a59      	ldr	r2, [pc, #356]	@ (80027b4 <HAL_DMA_Start_IT+0x21c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d018      	beq.n	8002686 <HAL_DMA_Start_IT+0xee>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a57      	ldr	r2, [pc, #348]	@ (80027b8 <HAL_DMA_Start_IT+0x220>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d013      	beq.n	8002686 <HAL_DMA_Start_IT+0xee>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a56      	ldr	r2, [pc, #344]	@ (80027bc <HAL_DMA_Start_IT+0x224>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d00e      	beq.n	8002686 <HAL_DMA_Start_IT+0xee>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a54      	ldr	r2, [pc, #336]	@ (80027c0 <HAL_DMA_Start_IT+0x228>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d009      	beq.n	8002686 <HAL_DMA_Start_IT+0xee>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a53      	ldr	r2, [pc, #332]	@ (80027c4 <HAL_DMA_Start_IT+0x22c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d004      	beq.n	8002686 <HAL_DMA_Start_IT+0xee>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a51      	ldr	r2, [pc, #324]	@ (80027c8 <HAL_DMA_Start_IT+0x230>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d108      	bne.n	8002698 <HAL_DMA_Start_IT+0x100>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0201 	bic.w	r2, r2, #1
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	e007      	b.n	80026a8 <HAL_DMA_Start_IT+0x110>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0201 	bic.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f001 f912 	bl	80038d8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a34      	ldr	r2, [pc, #208]	@ (800278c <HAL_DMA_Start_IT+0x1f4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d04a      	beq.n	8002754 <HAL_DMA_Start_IT+0x1bc>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a33      	ldr	r2, [pc, #204]	@ (8002790 <HAL_DMA_Start_IT+0x1f8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d045      	beq.n	8002754 <HAL_DMA_Start_IT+0x1bc>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a31      	ldr	r2, [pc, #196]	@ (8002794 <HAL_DMA_Start_IT+0x1fc>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d040      	beq.n	8002754 <HAL_DMA_Start_IT+0x1bc>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a30      	ldr	r2, [pc, #192]	@ (8002798 <HAL_DMA_Start_IT+0x200>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d03b      	beq.n	8002754 <HAL_DMA_Start_IT+0x1bc>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a2e      	ldr	r2, [pc, #184]	@ (800279c <HAL_DMA_Start_IT+0x204>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d036      	beq.n	8002754 <HAL_DMA_Start_IT+0x1bc>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a2d      	ldr	r2, [pc, #180]	@ (80027a0 <HAL_DMA_Start_IT+0x208>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d031      	beq.n	8002754 <HAL_DMA_Start_IT+0x1bc>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a2b      	ldr	r2, [pc, #172]	@ (80027a4 <HAL_DMA_Start_IT+0x20c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d02c      	beq.n	8002754 <HAL_DMA_Start_IT+0x1bc>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a2a      	ldr	r2, [pc, #168]	@ (80027a8 <HAL_DMA_Start_IT+0x210>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d027      	beq.n	8002754 <HAL_DMA_Start_IT+0x1bc>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a28      	ldr	r2, [pc, #160]	@ (80027ac <HAL_DMA_Start_IT+0x214>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d022      	beq.n	8002754 <HAL_DMA_Start_IT+0x1bc>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a27      	ldr	r2, [pc, #156]	@ (80027b0 <HAL_DMA_Start_IT+0x218>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d01d      	beq.n	8002754 <HAL_DMA_Start_IT+0x1bc>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a25      	ldr	r2, [pc, #148]	@ (80027b4 <HAL_DMA_Start_IT+0x21c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d018      	beq.n	8002754 <HAL_DMA_Start_IT+0x1bc>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a24      	ldr	r2, [pc, #144]	@ (80027b8 <HAL_DMA_Start_IT+0x220>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d013      	beq.n	8002754 <HAL_DMA_Start_IT+0x1bc>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a22      	ldr	r2, [pc, #136]	@ (80027bc <HAL_DMA_Start_IT+0x224>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00e      	beq.n	8002754 <HAL_DMA_Start_IT+0x1bc>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a21      	ldr	r2, [pc, #132]	@ (80027c0 <HAL_DMA_Start_IT+0x228>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d009      	beq.n	8002754 <HAL_DMA_Start_IT+0x1bc>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a1f      	ldr	r2, [pc, #124]	@ (80027c4 <HAL_DMA_Start_IT+0x22c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d004      	beq.n	8002754 <HAL_DMA_Start_IT+0x1bc>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a1e      	ldr	r2, [pc, #120]	@ (80027c8 <HAL_DMA_Start_IT+0x230>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d101      	bne.n	8002758 <HAL_DMA_Start_IT+0x1c0>
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <HAL_DMA_Start_IT+0x1c2>
 8002758:	2300      	movs	r3, #0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d036      	beq.n	80027cc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 021e 	bic.w	r2, r3, #30
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0216 	orr.w	r2, r2, #22
 8002770:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d03e      	beq.n	80027f8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f042 0208 	orr.w	r2, r2, #8
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	e035      	b.n	80027f8 <HAL_DMA_Start_IT+0x260>
 800278c:	40020010 	.word	0x40020010
 8002790:	40020028 	.word	0x40020028
 8002794:	40020040 	.word	0x40020040
 8002798:	40020058 	.word	0x40020058
 800279c:	40020070 	.word	0x40020070
 80027a0:	40020088 	.word	0x40020088
 80027a4:	400200a0 	.word	0x400200a0
 80027a8:	400200b8 	.word	0x400200b8
 80027ac:	40020410 	.word	0x40020410
 80027b0:	40020428 	.word	0x40020428
 80027b4:	40020440 	.word	0x40020440
 80027b8:	40020458 	.word	0x40020458
 80027bc:	40020470 	.word	0x40020470
 80027c0:	40020488 	.word	0x40020488
 80027c4:	400204a0 	.word	0x400204a0
 80027c8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 020e 	bic.w	r2, r3, #14
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 020a 	orr.w	r2, r2, #10
 80027de:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d007      	beq.n	80027f8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0204 	orr.w	r2, r2, #4
 80027f6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a83      	ldr	r2, [pc, #524]	@ (8002a0c <HAL_DMA_Start_IT+0x474>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d072      	beq.n	80028e8 <HAL_DMA_Start_IT+0x350>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a82      	ldr	r2, [pc, #520]	@ (8002a10 <HAL_DMA_Start_IT+0x478>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d06d      	beq.n	80028e8 <HAL_DMA_Start_IT+0x350>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a80      	ldr	r2, [pc, #512]	@ (8002a14 <HAL_DMA_Start_IT+0x47c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d068      	beq.n	80028e8 <HAL_DMA_Start_IT+0x350>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a7f      	ldr	r2, [pc, #508]	@ (8002a18 <HAL_DMA_Start_IT+0x480>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d063      	beq.n	80028e8 <HAL_DMA_Start_IT+0x350>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a7d      	ldr	r2, [pc, #500]	@ (8002a1c <HAL_DMA_Start_IT+0x484>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d05e      	beq.n	80028e8 <HAL_DMA_Start_IT+0x350>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a7c      	ldr	r2, [pc, #496]	@ (8002a20 <HAL_DMA_Start_IT+0x488>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d059      	beq.n	80028e8 <HAL_DMA_Start_IT+0x350>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a7a      	ldr	r2, [pc, #488]	@ (8002a24 <HAL_DMA_Start_IT+0x48c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d054      	beq.n	80028e8 <HAL_DMA_Start_IT+0x350>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a79      	ldr	r2, [pc, #484]	@ (8002a28 <HAL_DMA_Start_IT+0x490>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d04f      	beq.n	80028e8 <HAL_DMA_Start_IT+0x350>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a77      	ldr	r2, [pc, #476]	@ (8002a2c <HAL_DMA_Start_IT+0x494>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d04a      	beq.n	80028e8 <HAL_DMA_Start_IT+0x350>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a76      	ldr	r2, [pc, #472]	@ (8002a30 <HAL_DMA_Start_IT+0x498>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d045      	beq.n	80028e8 <HAL_DMA_Start_IT+0x350>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a74      	ldr	r2, [pc, #464]	@ (8002a34 <HAL_DMA_Start_IT+0x49c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d040      	beq.n	80028e8 <HAL_DMA_Start_IT+0x350>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a73      	ldr	r2, [pc, #460]	@ (8002a38 <HAL_DMA_Start_IT+0x4a0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d03b      	beq.n	80028e8 <HAL_DMA_Start_IT+0x350>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a71      	ldr	r2, [pc, #452]	@ (8002a3c <HAL_DMA_Start_IT+0x4a4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d036      	beq.n	80028e8 <HAL_DMA_Start_IT+0x350>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a70      	ldr	r2, [pc, #448]	@ (8002a40 <HAL_DMA_Start_IT+0x4a8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d031      	beq.n	80028e8 <HAL_DMA_Start_IT+0x350>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a6e      	ldr	r2, [pc, #440]	@ (8002a44 <HAL_DMA_Start_IT+0x4ac>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d02c      	beq.n	80028e8 <HAL_DMA_Start_IT+0x350>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a6d      	ldr	r2, [pc, #436]	@ (8002a48 <HAL_DMA_Start_IT+0x4b0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d027      	beq.n	80028e8 <HAL_DMA_Start_IT+0x350>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a6b      	ldr	r2, [pc, #428]	@ (8002a4c <HAL_DMA_Start_IT+0x4b4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d022      	beq.n	80028e8 <HAL_DMA_Start_IT+0x350>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a6a      	ldr	r2, [pc, #424]	@ (8002a50 <HAL_DMA_Start_IT+0x4b8>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d01d      	beq.n	80028e8 <HAL_DMA_Start_IT+0x350>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a68      	ldr	r2, [pc, #416]	@ (8002a54 <HAL_DMA_Start_IT+0x4bc>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d018      	beq.n	80028e8 <HAL_DMA_Start_IT+0x350>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a67      	ldr	r2, [pc, #412]	@ (8002a58 <HAL_DMA_Start_IT+0x4c0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d013      	beq.n	80028e8 <HAL_DMA_Start_IT+0x350>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a65      	ldr	r2, [pc, #404]	@ (8002a5c <HAL_DMA_Start_IT+0x4c4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d00e      	beq.n	80028e8 <HAL_DMA_Start_IT+0x350>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a64      	ldr	r2, [pc, #400]	@ (8002a60 <HAL_DMA_Start_IT+0x4c8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d009      	beq.n	80028e8 <HAL_DMA_Start_IT+0x350>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a62      	ldr	r2, [pc, #392]	@ (8002a64 <HAL_DMA_Start_IT+0x4cc>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d004      	beq.n	80028e8 <HAL_DMA_Start_IT+0x350>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a61      	ldr	r2, [pc, #388]	@ (8002a68 <HAL_DMA_Start_IT+0x4d0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d101      	bne.n	80028ec <HAL_DMA_Start_IT+0x354>
 80028e8:	2301      	movs	r3, #1
 80028ea:	e000      	b.n	80028ee <HAL_DMA_Start_IT+0x356>
 80028ec:	2300      	movs	r3, #0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d01a      	beq.n	8002928 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d007      	beq.n	8002910 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800290a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800290e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002922:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002926:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a37      	ldr	r2, [pc, #220]	@ (8002a0c <HAL_DMA_Start_IT+0x474>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d04a      	beq.n	80029c8 <HAL_DMA_Start_IT+0x430>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a36      	ldr	r2, [pc, #216]	@ (8002a10 <HAL_DMA_Start_IT+0x478>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d045      	beq.n	80029c8 <HAL_DMA_Start_IT+0x430>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a34      	ldr	r2, [pc, #208]	@ (8002a14 <HAL_DMA_Start_IT+0x47c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d040      	beq.n	80029c8 <HAL_DMA_Start_IT+0x430>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a33      	ldr	r2, [pc, #204]	@ (8002a18 <HAL_DMA_Start_IT+0x480>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d03b      	beq.n	80029c8 <HAL_DMA_Start_IT+0x430>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a31      	ldr	r2, [pc, #196]	@ (8002a1c <HAL_DMA_Start_IT+0x484>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d036      	beq.n	80029c8 <HAL_DMA_Start_IT+0x430>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a30      	ldr	r2, [pc, #192]	@ (8002a20 <HAL_DMA_Start_IT+0x488>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d031      	beq.n	80029c8 <HAL_DMA_Start_IT+0x430>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a2e      	ldr	r2, [pc, #184]	@ (8002a24 <HAL_DMA_Start_IT+0x48c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d02c      	beq.n	80029c8 <HAL_DMA_Start_IT+0x430>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a2d      	ldr	r2, [pc, #180]	@ (8002a28 <HAL_DMA_Start_IT+0x490>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d027      	beq.n	80029c8 <HAL_DMA_Start_IT+0x430>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a2b      	ldr	r2, [pc, #172]	@ (8002a2c <HAL_DMA_Start_IT+0x494>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d022      	beq.n	80029c8 <HAL_DMA_Start_IT+0x430>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a2a      	ldr	r2, [pc, #168]	@ (8002a30 <HAL_DMA_Start_IT+0x498>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d01d      	beq.n	80029c8 <HAL_DMA_Start_IT+0x430>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a28      	ldr	r2, [pc, #160]	@ (8002a34 <HAL_DMA_Start_IT+0x49c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d018      	beq.n	80029c8 <HAL_DMA_Start_IT+0x430>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a27      	ldr	r2, [pc, #156]	@ (8002a38 <HAL_DMA_Start_IT+0x4a0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d013      	beq.n	80029c8 <HAL_DMA_Start_IT+0x430>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a25      	ldr	r2, [pc, #148]	@ (8002a3c <HAL_DMA_Start_IT+0x4a4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00e      	beq.n	80029c8 <HAL_DMA_Start_IT+0x430>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a24      	ldr	r2, [pc, #144]	@ (8002a40 <HAL_DMA_Start_IT+0x4a8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d009      	beq.n	80029c8 <HAL_DMA_Start_IT+0x430>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a22      	ldr	r2, [pc, #136]	@ (8002a44 <HAL_DMA_Start_IT+0x4ac>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d004      	beq.n	80029c8 <HAL_DMA_Start_IT+0x430>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a21      	ldr	r2, [pc, #132]	@ (8002a48 <HAL_DMA_Start_IT+0x4b0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d108      	bne.n	80029da <HAL_DMA_Start_IT+0x442>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	e012      	b.n	8002a00 <HAL_DMA_Start_IT+0x468>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0201 	orr.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	e009      	b.n	8002a00 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40020010 	.word	0x40020010
 8002a10:	40020028 	.word	0x40020028
 8002a14:	40020040 	.word	0x40020040
 8002a18:	40020058 	.word	0x40020058
 8002a1c:	40020070 	.word	0x40020070
 8002a20:	40020088 	.word	0x40020088
 8002a24:	400200a0 	.word	0x400200a0
 8002a28:	400200b8 	.word	0x400200b8
 8002a2c:	40020410 	.word	0x40020410
 8002a30:	40020428 	.word	0x40020428
 8002a34:	40020440 	.word	0x40020440
 8002a38:	40020458 	.word	0x40020458
 8002a3c:	40020470 	.word	0x40020470
 8002a40:	40020488 	.word	0x40020488
 8002a44:	400204a0 	.word	0x400204a0
 8002a48:	400204b8 	.word	0x400204b8
 8002a4c:	58025408 	.word	0x58025408
 8002a50:	5802541c 	.word	0x5802541c
 8002a54:	58025430 	.word	0x58025430
 8002a58:	58025444 	.word	0x58025444
 8002a5c:	58025458 	.word	0x58025458
 8002a60:	5802546c 	.word	0x5802546c
 8002a64:	58025480 	.word	0x58025480
 8002a68:	58025494 	.word	0x58025494

08002a6c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	@ 0x28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a78:	4b67      	ldr	r3, [pc, #412]	@ (8002c18 <HAL_DMA_IRQHandler+0x1ac>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a67      	ldr	r2, [pc, #412]	@ (8002c1c <HAL_DMA_IRQHandler+0x1b0>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	0a9b      	lsrs	r3, r3, #10
 8002a84:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a90:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a5f      	ldr	r2, [pc, #380]	@ (8002c20 <HAL_DMA_IRQHandler+0x1b4>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d04a      	beq.n	8002b3e <HAL_DMA_IRQHandler+0xd2>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a5d      	ldr	r2, [pc, #372]	@ (8002c24 <HAL_DMA_IRQHandler+0x1b8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d045      	beq.n	8002b3e <HAL_DMA_IRQHandler+0xd2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a5c      	ldr	r2, [pc, #368]	@ (8002c28 <HAL_DMA_IRQHandler+0x1bc>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d040      	beq.n	8002b3e <HAL_DMA_IRQHandler+0xd2>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a5a      	ldr	r2, [pc, #360]	@ (8002c2c <HAL_DMA_IRQHandler+0x1c0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d03b      	beq.n	8002b3e <HAL_DMA_IRQHandler+0xd2>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a59      	ldr	r2, [pc, #356]	@ (8002c30 <HAL_DMA_IRQHandler+0x1c4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d036      	beq.n	8002b3e <HAL_DMA_IRQHandler+0xd2>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a57      	ldr	r2, [pc, #348]	@ (8002c34 <HAL_DMA_IRQHandler+0x1c8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d031      	beq.n	8002b3e <HAL_DMA_IRQHandler+0xd2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a56      	ldr	r2, [pc, #344]	@ (8002c38 <HAL_DMA_IRQHandler+0x1cc>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d02c      	beq.n	8002b3e <HAL_DMA_IRQHandler+0xd2>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a54      	ldr	r2, [pc, #336]	@ (8002c3c <HAL_DMA_IRQHandler+0x1d0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d027      	beq.n	8002b3e <HAL_DMA_IRQHandler+0xd2>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a53      	ldr	r2, [pc, #332]	@ (8002c40 <HAL_DMA_IRQHandler+0x1d4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d022      	beq.n	8002b3e <HAL_DMA_IRQHandler+0xd2>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a51      	ldr	r2, [pc, #324]	@ (8002c44 <HAL_DMA_IRQHandler+0x1d8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d01d      	beq.n	8002b3e <HAL_DMA_IRQHandler+0xd2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a50      	ldr	r2, [pc, #320]	@ (8002c48 <HAL_DMA_IRQHandler+0x1dc>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d018      	beq.n	8002b3e <HAL_DMA_IRQHandler+0xd2>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a4e      	ldr	r2, [pc, #312]	@ (8002c4c <HAL_DMA_IRQHandler+0x1e0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d013      	beq.n	8002b3e <HAL_DMA_IRQHandler+0xd2>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a4d      	ldr	r2, [pc, #308]	@ (8002c50 <HAL_DMA_IRQHandler+0x1e4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d00e      	beq.n	8002b3e <HAL_DMA_IRQHandler+0xd2>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a4b      	ldr	r2, [pc, #300]	@ (8002c54 <HAL_DMA_IRQHandler+0x1e8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d009      	beq.n	8002b3e <HAL_DMA_IRQHandler+0xd2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a4a      	ldr	r2, [pc, #296]	@ (8002c58 <HAL_DMA_IRQHandler+0x1ec>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d004      	beq.n	8002b3e <HAL_DMA_IRQHandler+0xd2>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a48      	ldr	r2, [pc, #288]	@ (8002c5c <HAL_DMA_IRQHandler+0x1f0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d101      	bne.n	8002b42 <HAL_DMA_IRQHandler+0xd6>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <HAL_DMA_IRQHandler+0xd8>
 8002b42:	2300      	movs	r3, #0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 842b 	beq.w	80033a0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4e:	f003 031f 	and.w	r3, r3, #31
 8002b52:	2208      	movs	r2, #8
 8002b54:	409a      	lsls	r2, r3
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 80a2 	beq.w	8002ca4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a2e      	ldr	r2, [pc, #184]	@ (8002c20 <HAL_DMA_IRQHandler+0x1b4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d04a      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x194>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a2d      	ldr	r2, [pc, #180]	@ (8002c24 <HAL_DMA_IRQHandler+0x1b8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d045      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x194>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a2b      	ldr	r2, [pc, #172]	@ (8002c28 <HAL_DMA_IRQHandler+0x1bc>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d040      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x194>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a2a      	ldr	r2, [pc, #168]	@ (8002c2c <HAL_DMA_IRQHandler+0x1c0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d03b      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x194>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a28      	ldr	r2, [pc, #160]	@ (8002c30 <HAL_DMA_IRQHandler+0x1c4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d036      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x194>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a27      	ldr	r2, [pc, #156]	@ (8002c34 <HAL_DMA_IRQHandler+0x1c8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d031      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x194>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a25      	ldr	r2, [pc, #148]	@ (8002c38 <HAL_DMA_IRQHandler+0x1cc>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d02c      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x194>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a24      	ldr	r2, [pc, #144]	@ (8002c3c <HAL_DMA_IRQHandler+0x1d0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d027      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x194>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a22      	ldr	r2, [pc, #136]	@ (8002c40 <HAL_DMA_IRQHandler+0x1d4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d022      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x194>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a21      	ldr	r2, [pc, #132]	@ (8002c44 <HAL_DMA_IRQHandler+0x1d8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d01d      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x194>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a1f      	ldr	r2, [pc, #124]	@ (8002c48 <HAL_DMA_IRQHandler+0x1dc>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d018      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x194>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1e      	ldr	r2, [pc, #120]	@ (8002c4c <HAL_DMA_IRQHandler+0x1e0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d013      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x194>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8002c50 <HAL_DMA_IRQHandler+0x1e4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00e      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x194>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a1b      	ldr	r2, [pc, #108]	@ (8002c54 <HAL_DMA_IRQHandler+0x1e8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d009      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x194>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a19      	ldr	r2, [pc, #100]	@ (8002c58 <HAL_DMA_IRQHandler+0x1ec>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d004      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x194>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a18      	ldr	r2, [pc, #96]	@ (8002c5c <HAL_DMA_IRQHandler+0x1f0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d12f      	bne.n	8002c60 <HAL_DMA_IRQHandler+0x1f4>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	bf14      	ite	ne
 8002c0e:	2301      	movne	r3, #1
 8002c10:	2300      	moveq	r3, #0
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	e02e      	b.n	8002c74 <HAL_DMA_IRQHandler+0x208>
 8002c16:	bf00      	nop
 8002c18:	24000004 	.word	0x24000004
 8002c1c:	1b4e81b5 	.word	0x1b4e81b5
 8002c20:	40020010 	.word	0x40020010
 8002c24:	40020028 	.word	0x40020028
 8002c28:	40020040 	.word	0x40020040
 8002c2c:	40020058 	.word	0x40020058
 8002c30:	40020070 	.word	0x40020070
 8002c34:	40020088 	.word	0x40020088
 8002c38:	400200a0 	.word	0x400200a0
 8002c3c:	400200b8 	.word	0x400200b8
 8002c40:	40020410 	.word	0x40020410
 8002c44:	40020428 	.word	0x40020428
 8002c48:	40020440 	.word	0x40020440
 8002c4c:	40020458 	.word	0x40020458
 8002c50:	40020470 	.word	0x40020470
 8002c54:	40020488 	.word	0x40020488
 8002c58:	400204a0 	.word	0x400204a0
 8002c5c:	400204b8 	.word	0x400204b8
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	bf14      	ite	ne
 8002c6e:	2301      	movne	r3, #1
 8002c70:	2300      	moveq	r3, #0
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d015      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0204 	bic.w	r2, r2, #4
 8002c86:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8c:	f003 031f 	and.w	r3, r3, #31
 8002c90:	2208      	movs	r2, #8
 8002c92:	409a      	lsls	r2, r3
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c9c:	f043 0201 	orr.w	r2, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d06e      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a69      	ldr	r2, [pc, #420]	@ (8002e64 <HAL_DMA_IRQHandler+0x3f8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d04a      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x2ee>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a67      	ldr	r2, [pc, #412]	@ (8002e68 <HAL_DMA_IRQHandler+0x3fc>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d045      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x2ee>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a66      	ldr	r2, [pc, #408]	@ (8002e6c <HAL_DMA_IRQHandler+0x400>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d040      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x2ee>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a64      	ldr	r2, [pc, #400]	@ (8002e70 <HAL_DMA_IRQHandler+0x404>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d03b      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x2ee>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a63      	ldr	r2, [pc, #396]	@ (8002e74 <HAL_DMA_IRQHandler+0x408>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d036      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x2ee>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a61      	ldr	r2, [pc, #388]	@ (8002e78 <HAL_DMA_IRQHandler+0x40c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d031      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x2ee>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a60      	ldr	r2, [pc, #384]	@ (8002e7c <HAL_DMA_IRQHandler+0x410>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d02c      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x2ee>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a5e      	ldr	r2, [pc, #376]	@ (8002e80 <HAL_DMA_IRQHandler+0x414>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d027      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x2ee>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a5d      	ldr	r2, [pc, #372]	@ (8002e84 <HAL_DMA_IRQHandler+0x418>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d022      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x2ee>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a5b      	ldr	r2, [pc, #364]	@ (8002e88 <HAL_DMA_IRQHandler+0x41c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d01d      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x2ee>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a5a      	ldr	r2, [pc, #360]	@ (8002e8c <HAL_DMA_IRQHandler+0x420>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d018      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x2ee>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a58      	ldr	r2, [pc, #352]	@ (8002e90 <HAL_DMA_IRQHandler+0x424>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d013      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x2ee>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a57      	ldr	r2, [pc, #348]	@ (8002e94 <HAL_DMA_IRQHandler+0x428>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00e      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x2ee>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a55      	ldr	r2, [pc, #340]	@ (8002e98 <HAL_DMA_IRQHandler+0x42c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d009      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x2ee>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a54      	ldr	r2, [pc, #336]	@ (8002e9c <HAL_DMA_IRQHandler+0x430>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d004      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x2ee>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a52      	ldr	r2, [pc, #328]	@ (8002ea0 <HAL_DMA_IRQHandler+0x434>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d10a      	bne.n	8002d70 <HAL_DMA_IRQHandler+0x304>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	bf14      	ite	ne
 8002d68:	2301      	movne	r3, #1
 8002d6a:	2300      	moveq	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	e003      	b.n	8002d78 <HAL_DMA_IRQHandler+0x30c>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2300      	movs	r3, #0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00d      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d80:	f003 031f 	and.w	r3, r3, #31
 8002d84:	2201      	movs	r2, #1
 8002d86:	409a      	lsls	r2, r3
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d90:	f043 0202 	orr.w	r2, r3, #2
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9c:	f003 031f 	and.w	r3, r3, #31
 8002da0:	2204      	movs	r2, #4
 8002da2:	409a      	lsls	r2, r3
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 808f 	beq.w	8002ecc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a2c      	ldr	r2, [pc, #176]	@ (8002e64 <HAL_DMA_IRQHandler+0x3f8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d04a      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x3e2>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a2a      	ldr	r2, [pc, #168]	@ (8002e68 <HAL_DMA_IRQHandler+0x3fc>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d045      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x3e2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a29      	ldr	r2, [pc, #164]	@ (8002e6c <HAL_DMA_IRQHandler+0x400>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d040      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x3e2>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a27      	ldr	r2, [pc, #156]	@ (8002e70 <HAL_DMA_IRQHandler+0x404>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d03b      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x3e2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a26      	ldr	r2, [pc, #152]	@ (8002e74 <HAL_DMA_IRQHandler+0x408>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d036      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x3e2>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a24      	ldr	r2, [pc, #144]	@ (8002e78 <HAL_DMA_IRQHandler+0x40c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d031      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x3e2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a23      	ldr	r2, [pc, #140]	@ (8002e7c <HAL_DMA_IRQHandler+0x410>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d02c      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x3e2>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a21      	ldr	r2, [pc, #132]	@ (8002e80 <HAL_DMA_IRQHandler+0x414>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d027      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x3e2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a20      	ldr	r2, [pc, #128]	@ (8002e84 <HAL_DMA_IRQHandler+0x418>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d022      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x3e2>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a1e      	ldr	r2, [pc, #120]	@ (8002e88 <HAL_DMA_IRQHandler+0x41c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d01d      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x3e2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a1d      	ldr	r2, [pc, #116]	@ (8002e8c <HAL_DMA_IRQHandler+0x420>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d018      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x3e2>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1b      	ldr	r2, [pc, #108]	@ (8002e90 <HAL_DMA_IRQHandler+0x424>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d013      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x3e2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8002e94 <HAL_DMA_IRQHandler+0x428>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00e      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x3e2>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a18      	ldr	r2, [pc, #96]	@ (8002e98 <HAL_DMA_IRQHandler+0x42c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d009      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x3e2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a17      	ldr	r2, [pc, #92]	@ (8002e9c <HAL_DMA_IRQHandler+0x430>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d004      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x3e2>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a15      	ldr	r2, [pc, #84]	@ (8002ea0 <HAL_DMA_IRQHandler+0x434>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d12a      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0x438>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf14      	ite	ne
 8002e5c:	2301      	movne	r3, #1
 8002e5e:	2300      	moveq	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	e023      	b.n	8002eac <HAL_DMA_IRQHandler+0x440>
 8002e64:	40020010 	.word	0x40020010
 8002e68:	40020028 	.word	0x40020028
 8002e6c:	40020040 	.word	0x40020040
 8002e70:	40020058 	.word	0x40020058
 8002e74:	40020070 	.word	0x40020070
 8002e78:	40020088 	.word	0x40020088
 8002e7c:	400200a0 	.word	0x400200a0
 8002e80:	400200b8 	.word	0x400200b8
 8002e84:	40020410 	.word	0x40020410
 8002e88:	40020428 	.word	0x40020428
 8002e8c:	40020440 	.word	0x40020440
 8002e90:	40020458 	.word	0x40020458
 8002e94:	40020470 	.word	0x40020470
 8002e98:	40020488 	.word	0x40020488
 8002e9c:	400204a0 	.word	0x400204a0
 8002ea0:	400204b8 	.word	0x400204b8
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00d      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	2204      	movs	r2, #4
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec4:	f043 0204 	orr.w	r2, r3, #4
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	2210      	movs	r2, #16
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80a6 	beq.w	800302e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a85      	ldr	r2, [pc, #532]	@ (80030fc <HAL_DMA_IRQHandler+0x690>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d04a      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x516>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a83      	ldr	r2, [pc, #524]	@ (8003100 <HAL_DMA_IRQHandler+0x694>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d045      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x516>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a82      	ldr	r2, [pc, #520]	@ (8003104 <HAL_DMA_IRQHandler+0x698>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d040      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x516>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a80      	ldr	r2, [pc, #512]	@ (8003108 <HAL_DMA_IRQHandler+0x69c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d03b      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x516>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a7f      	ldr	r2, [pc, #508]	@ (800310c <HAL_DMA_IRQHandler+0x6a0>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d036      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x516>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a7d      	ldr	r2, [pc, #500]	@ (8003110 <HAL_DMA_IRQHandler+0x6a4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d031      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x516>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a7c      	ldr	r2, [pc, #496]	@ (8003114 <HAL_DMA_IRQHandler+0x6a8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d02c      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x516>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a7a      	ldr	r2, [pc, #488]	@ (8003118 <HAL_DMA_IRQHandler+0x6ac>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d027      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x516>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a79      	ldr	r2, [pc, #484]	@ (800311c <HAL_DMA_IRQHandler+0x6b0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d022      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x516>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a77      	ldr	r2, [pc, #476]	@ (8003120 <HAL_DMA_IRQHandler+0x6b4>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d01d      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x516>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a76      	ldr	r2, [pc, #472]	@ (8003124 <HAL_DMA_IRQHandler+0x6b8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d018      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x516>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a74      	ldr	r2, [pc, #464]	@ (8003128 <HAL_DMA_IRQHandler+0x6bc>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d013      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x516>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a73      	ldr	r2, [pc, #460]	@ (800312c <HAL_DMA_IRQHandler+0x6c0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d00e      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x516>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a71      	ldr	r2, [pc, #452]	@ (8003130 <HAL_DMA_IRQHandler+0x6c4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d009      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x516>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a70      	ldr	r2, [pc, #448]	@ (8003134 <HAL_DMA_IRQHandler+0x6c8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d004      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x516>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a6e      	ldr	r2, [pc, #440]	@ (8003138 <HAL_DMA_IRQHandler+0x6cc>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d10a      	bne.n	8002f98 <HAL_DMA_IRQHandler+0x52c>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	bf14      	ite	ne
 8002f90:	2301      	movne	r3, #1
 8002f92:	2300      	moveq	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	e009      	b.n	8002fac <HAL_DMA_IRQHandler+0x540>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bf14      	ite	ne
 8002fa6:	2301      	movne	r3, #1
 8002fa8:	2300      	moveq	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d03e      	beq.n	800302e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb4:	f003 031f 	and.w	r3, r3, #31
 8002fb8:	2210      	movs	r2, #16
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d018      	beq.n	8003000 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d108      	bne.n	8002fee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d024      	beq.n	800302e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	4798      	blx	r3
 8002fec:	e01f      	b.n	800302e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d01b      	beq.n	800302e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	4798      	blx	r3
 8002ffe:	e016      	b.n	800302e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d107      	bne.n	800301e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0208 	bic.w	r2, r2, #8
 800301c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003032:	f003 031f 	and.w	r3, r3, #31
 8003036:	2220      	movs	r2, #32
 8003038:	409a      	lsls	r2, r3
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 8110 	beq.w	8003264 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a2c      	ldr	r2, [pc, #176]	@ (80030fc <HAL_DMA_IRQHandler+0x690>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d04a      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x678>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a2b      	ldr	r2, [pc, #172]	@ (8003100 <HAL_DMA_IRQHandler+0x694>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d045      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x678>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a29      	ldr	r2, [pc, #164]	@ (8003104 <HAL_DMA_IRQHandler+0x698>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d040      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x678>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a28      	ldr	r2, [pc, #160]	@ (8003108 <HAL_DMA_IRQHandler+0x69c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d03b      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x678>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a26      	ldr	r2, [pc, #152]	@ (800310c <HAL_DMA_IRQHandler+0x6a0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d036      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x678>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a25      	ldr	r2, [pc, #148]	@ (8003110 <HAL_DMA_IRQHandler+0x6a4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d031      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x678>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a23      	ldr	r2, [pc, #140]	@ (8003114 <HAL_DMA_IRQHandler+0x6a8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d02c      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x678>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a22      	ldr	r2, [pc, #136]	@ (8003118 <HAL_DMA_IRQHandler+0x6ac>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d027      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x678>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a20      	ldr	r2, [pc, #128]	@ (800311c <HAL_DMA_IRQHandler+0x6b0>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d022      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x678>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003120 <HAL_DMA_IRQHandler+0x6b4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d01d      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x678>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003124 <HAL_DMA_IRQHandler+0x6b8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d018      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x678>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003128 <HAL_DMA_IRQHandler+0x6bc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d013      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x678>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a1a      	ldr	r2, [pc, #104]	@ (800312c <HAL_DMA_IRQHandler+0x6c0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00e      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x678>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a19      	ldr	r2, [pc, #100]	@ (8003130 <HAL_DMA_IRQHandler+0x6c4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d009      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x678>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a17      	ldr	r2, [pc, #92]	@ (8003134 <HAL_DMA_IRQHandler+0x6c8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d004      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x678>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a16      	ldr	r2, [pc, #88]	@ (8003138 <HAL_DMA_IRQHandler+0x6cc>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d12b      	bne.n	800313c <HAL_DMA_IRQHandler+0x6d0>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	bf14      	ite	ne
 80030f2:	2301      	movne	r3, #1
 80030f4:	2300      	moveq	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	e02a      	b.n	8003150 <HAL_DMA_IRQHandler+0x6e4>
 80030fa:	bf00      	nop
 80030fc:	40020010 	.word	0x40020010
 8003100:	40020028 	.word	0x40020028
 8003104:	40020040 	.word	0x40020040
 8003108:	40020058 	.word	0x40020058
 800310c:	40020070 	.word	0x40020070
 8003110:	40020088 	.word	0x40020088
 8003114:	400200a0 	.word	0x400200a0
 8003118:	400200b8 	.word	0x400200b8
 800311c:	40020410 	.word	0x40020410
 8003120:	40020428 	.word	0x40020428
 8003124:	40020440 	.word	0x40020440
 8003128:	40020458 	.word	0x40020458
 800312c:	40020470 	.word	0x40020470
 8003130:	40020488 	.word	0x40020488
 8003134:	400204a0 	.word	0x400204a0
 8003138:	400204b8 	.word	0x400204b8
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	bf14      	ite	ne
 800314a:	2301      	movne	r3, #1
 800314c:	2300      	moveq	r3, #0
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 8087 	beq.w	8003264 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	2220      	movs	r2, #32
 8003160:	409a      	lsls	r2, r3
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b04      	cmp	r3, #4
 8003170:	d139      	bne.n	80031e6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0216 	bic.w	r2, r2, #22
 8003180:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003190:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	d103      	bne.n	80031a2 <HAL_DMA_IRQHandler+0x736>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d007      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0208 	bic.w	r2, r2, #8
 80031b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b6:	f003 031f 	and.w	r3, r3, #31
 80031ba:	223f      	movs	r2, #63	@ 0x3f
 80031bc:	409a      	lsls	r2, r3
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 834a 	beq.w	8003870 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	4798      	blx	r3
          }
          return;
 80031e4:	e344      	b.n	8003870 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d018      	beq.n	8003226 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d108      	bne.n	8003214 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003206:	2b00      	cmp	r3, #0
 8003208:	d02c      	beq.n	8003264 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	4798      	blx	r3
 8003212:	e027      	b.n	8003264 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003218:	2b00      	cmp	r3, #0
 800321a:	d023      	beq.n	8003264 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	4798      	blx	r3
 8003224:	e01e      	b.n	8003264 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10f      	bne.n	8003254 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0210 	bic.w	r2, r2, #16
 8003242:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 8306 	beq.w	800387a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 8088 	beq.w	800338c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2204      	movs	r2, #4
 8003280:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a7a      	ldr	r2, [pc, #488]	@ (8003474 <HAL_DMA_IRQHandler+0xa08>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d04a      	beq.n	8003324 <HAL_DMA_IRQHandler+0x8b8>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a79      	ldr	r2, [pc, #484]	@ (8003478 <HAL_DMA_IRQHandler+0xa0c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d045      	beq.n	8003324 <HAL_DMA_IRQHandler+0x8b8>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a77      	ldr	r2, [pc, #476]	@ (800347c <HAL_DMA_IRQHandler+0xa10>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d040      	beq.n	8003324 <HAL_DMA_IRQHandler+0x8b8>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a76      	ldr	r2, [pc, #472]	@ (8003480 <HAL_DMA_IRQHandler+0xa14>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d03b      	beq.n	8003324 <HAL_DMA_IRQHandler+0x8b8>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a74      	ldr	r2, [pc, #464]	@ (8003484 <HAL_DMA_IRQHandler+0xa18>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d036      	beq.n	8003324 <HAL_DMA_IRQHandler+0x8b8>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a73      	ldr	r2, [pc, #460]	@ (8003488 <HAL_DMA_IRQHandler+0xa1c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d031      	beq.n	8003324 <HAL_DMA_IRQHandler+0x8b8>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a71      	ldr	r2, [pc, #452]	@ (800348c <HAL_DMA_IRQHandler+0xa20>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d02c      	beq.n	8003324 <HAL_DMA_IRQHandler+0x8b8>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a70      	ldr	r2, [pc, #448]	@ (8003490 <HAL_DMA_IRQHandler+0xa24>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d027      	beq.n	8003324 <HAL_DMA_IRQHandler+0x8b8>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003494 <HAL_DMA_IRQHandler+0xa28>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d022      	beq.n	8003324 <HAL_DMA_IRQHandler+0x8b8>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a6d      	ldr	r2, [pc, #436]	@ (8003498 <HAL_DMA_IRQHandler+0xa2c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d01d      	beq.n	8003324 <HAL_DMA_IRQHandler+0x8b8>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a6b      	ldr	r2, [pc, #428]	@ (800349c <HAL_DMA_IRQHandler+0xa30>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d018      	beq.n	8003324 <HAL_DMA_IRQHandler+0x8b8>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a6a      	ldr	r2, [pc, #424]	@ (80034a0 <HAL_DMA_IRQHandler+0xa34>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d013      	beq.n	8003324 <HAL_DMA_IRQHandler+0x8b8>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a68      	ldr	r2, [pc, #416]	@ (80034a4 <HAL_DMA_IRQHandler+0xa38>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00e      	beq.n	8003324 <HAL_DMA_IRQHandler+0x8b8>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a67      	ldr	r2, [pc, #412]	@ (80034a8 <HAL_DMA_IRQHandler+0xa3c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d009      	beq.n	8003324 <HAL_DMA_IRQHandler+0x8b8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a65      	ldr	r2, [pc, #404]	@ (80034ac <HAL_DMA_IRQHandler+0xa40>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d004      	beq.n	8003324 <HAL_DMA_IRQHandler+0x8b8>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a64      	ldr	r2, [pc, #400]	@ (80034b0 <HAL_DMA_IRQHandler+0xa44>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d108      	bne.n	8003336 <HAL_DMA_IRQHandler+0x8ca>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0201 	bic.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	e007      	b.n	8003346 <HAL_DMA_IRQHandler+0x8da>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0201 	bic.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	3301      	adds	r3, #1
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800334e:	429a      	cmp	r2, r3
 8003350:	d307      	bcc.n	8003362 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1f2      	bne.n	8003346 <HAL_DMA_IRQHandler+0x8da>
 8003360:	e000      	b.n	8003364 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003362:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d004      	beq.n	800337c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2203      	movs	r2, #3
 8003376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800337a:	e003      	b.n	8003384 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 8272 	beq.w	800387a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	4798      	blx	r3
 800339e:	e26c      	b.n	800387a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a43      	ldr	r2, [pc, #268]	@ (80034b4 <HAL_DMA_IRQHandler+0xa48>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d022      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x984>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a42      	ldr	r2, [pc, #264]	@ (80034b8 <HAL_DMA_IRQHandler+0xa4c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d01d      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x984>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a40      	ldr	r2, [pc, #256]	@ (80034bc <HAL_DMA_IRQHandler+0xa50>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d018      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x984>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a3f      	ldr	r2, [pc, #252]	@ (80034c0 <HAL_DMA_IRQHandler+0xa54>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d013      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x984>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a3d      	ldr	r2, [pc, #244]	@ (80034c4 <HAL_DMA_IRQHandler+0xa58>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00e      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x984>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a3c      	ldr	r2, [pc, #240]	@ (80034c8 <HAL_DMA_IRQHandler+0xa5c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d009      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x984>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a3a      	ldr	r2, [pc, #232]	@ (80034cc <HAL_DMA_IRQHandler+0xa60>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d004      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x984>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a39      	ldr	r2, [pc, #228]	@ (80034d0 <HAL_DMA_IRQHandler+0xa64>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d101      	bne.n	80033f4 <HAL_DMA_IRQHandler+0x988>
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <HAL_DMA_IRQHandler+0x98a>
 80033f4:	2300      	movs	r3, #0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 823f 	beq.w	800387a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	2204      	movs	r2, #4
 800340e:	409a      	lsls	r2, r3
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80cd 	beq.w	80035b4 <HAL_DMA_IRQHandler+0xb48>
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80c7 	beq.w	80035b4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342a:	f003 031f 	and.w	r3, r3, #31
 800342e:	2204      	movs	r2, #4
 8003430:	409a      	lsls	r2, r3
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d049      	beq.n	80034d4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 8210 	beq.w	8003874 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800345c:	e20a      	b.n	8003874 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 8206 	beq.w	8003874 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003470:	e200      	b.n	8003874 <HAL_DMA_IRQHandler+0xe08>
 8003472:	bf00      	nop
 8003474:	40020010 	.word	0x40020010
 8003478:	40020028 	.word	0x40020028
 800347c:	40020040 	.word	0x40020040
 8003480:	40020058 	.word	0x40020058
 8003484:	40020070 	.word	0x40020070
 8003488:	40020088 	.word	0x40020088
 800348c:	400200a0 	.word	0x400200a0
 8003490:	400200b8 	.word	0x400200b8
 8003494:	40020410 	.word	0x40020410
 8003498:	40020428 	.word	0x40020428
 800349c:	40020440 	.word	0x40020440
 80034a0:	40020458 	.word	0x40020458
 80034a4:	40020470 	.word	0x40020470
 80034a8:	40020488 	.word	0x40020488
 80034ac:	400204a0 	.word	0x400204a0
 80034b0:	400204b8 	.word	0x400204b8
 80034b4:	58025408 	.word	0x58025408
 80034b8:	5802541c 	.word	0x5802541c
 80034bc:	58025430 	.word	0x58025430
 80034c0:	58025444 	.word	0x58025444
 80034c4:	58025458 	.word	0x58025458
 80034c8:	5802546c 	.word	0x5802546c
 80034cc:	58025480 	.word	0x58025480
 80034d0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d160      	bne.n	80035a0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a7f      	ldr	r2, [pc, #508]	@ (80036e0 <HAL_DMA_IRQHandler+0xc74>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d04a      	beq.n	800357e <HAL_DMA_IRQHandler+0xb12>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a7d      	ldr	r2, [pc, #500]	@ (80036e4 <HAL_DMA_IRQHandler+0xc78>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d045      	beq.n	800357e <HAL_DMA_IRQHandler+0xb12>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a7c      	ldr	r2, [pc, #496]	@ (80036e8 <HAL_DMA_IRQHandler+0xc7c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d040      	beq.n	800357e <HAL_DMA_IRQHandler+0xb12>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a7a      	ldr	r2, [pc, #488]	@ (80036ec <HAL_DMA_IRQHandler+0xc80>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d03b      	beq.n	800357e <HAL_DMA_IRQHandler+0xb12>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a79      	ldr	r2, [pc, #484]	@ (80036f0 <HAL_DMA_IRQHandler+0xc84>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d036      	beq.n	800357e <HAL_DMA_IRQHandler+0xb12>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a77      	ldr	r2, [pc, #476]	@ (80036f4 <HAL_DMA_IRQHandler+0xc88>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d031      	beq.n	800357e <HAL_DMA_IRQHandler+0xb12>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a76      	ldr	r2, [pc, #472]	@ (80036f8 <HAL_DMA_IRQHandler+0xc8c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d02c      	beq.n	800357e <HAL_DMA_IRQHandler+0xb12>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a74      	ldr	r2, [pc, #464]	@ (80036fc <HAL_DMA_IRQHandler+0xc90>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d027      	beq.n	800357e <HAL_DMA_IRQHandler+0xb12>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a73      	ldr	r2, [pc, #460]	@ (8003700 <HAL_DMA_IRQHandler+0xc94>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d022      	beq.n	800357e <HAL_DMA_IRQHandler+0xb12>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a71      	ldr	r2, [pc, #452]	@ (8003704 <HAL_DMA_IRQHandler+0xc98>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d01d      	beq.n	800357e <HAL_DMA_IRQHandler+0xb12>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a70      	ldr	r2, [pc, #448]	@ (8003708 <HAL_DMA_IRQHandler+0xc9c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d018      	beq.n	800357e <HAL_DMA_IRQHandler+0xb12>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a6e      	ldr	r2, [pc, #440]	@ (800370c <HAL_DMA_IRQHandler+0xca0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d013      	beq.n	800357e <HAL_DMA_IRQHandler+0xb12>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a6d      	ldr	r2, [pc, #436]	@ (8003710 <HAL_DMA_IRQHandler+0xca4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00e      	beq.n	800357e <HAL_DMA_IRQHandler+0xb12>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a6b      	ldr	r2, [pc, #428]	@ (8003714 <HAL_DMA_IRQHandler+0xca8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d009      	beq.n	800357e <HAL_DMA_IRQHandler+0xb12>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a6a      	ldr	r2, [pc, #424]	@ (8003718 <HAL_DMA_IRQHandler+0xcac>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d004      	beq.n	800357e <HAL_DMA_IRQHandler+0xb12>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a68      	ldr	r2, [pc, #416]	@ (800371c <HAL_DMA_IRQHandler+0xcb0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d108      	bne.n	8003590 <HAL_DMA_IRQHandler+0xb24>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0208 	bic.w	r2, r2, #8
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	e007      	b.n	80035a0 <HAL_DMA_IRQHandler+0xb34>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0204 	bic.w	r2, r2, #4
 800359e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 8165 	beq.w	8003874 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035b2:	e15f      	b.n	8003874 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	2202      	movs	r2, #2
 80035be:	409a      	lsls	r2, r3
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 80c5 	beq.w	8003754 <HAL_DMA_IRQHandler+0xce8>
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 80bf 	beq.w	8003754 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035da:	f003 031f 	and.w	r3, r3, #31
 80035de:	2202      	movs	r2, #2
 80035e0:	409a      	lsls	r2, r3
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d018      	beq.n	8003622 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 813a 	beq.w	8003878 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800360c:	e134      	b.n	8003878 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 8130 	beq.w	8003878 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003620:	e12a      	b.n	8003878 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	2b00      	cmp	r3, #0
 800362a:	f040 8089 	bne.w	8003740 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a2b      	ldr	r2, [pc, #172]	@ (80036e0 <HAL_DMA_IRQHandler+0xc74>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d04a      	beq.n	80036ce <HAL_DMA_IRQHandler+0xc62>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a29      	ldr	r2, [pc, #164]	@ (80036e4 <HAL_DMA_IRQHandler+0xc78>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d045      	beq.n	80036ce <HAL_DMA_IRQHandler+0xc62>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a28      	ldr	r2, [pc, #160]	@ (80036e8 <HAL_DMA_IRQHandler+0xc7c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d040      	beq.n	80036ce <HAL_DMA_IRQHandler+0xc62>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a26      	ldr	r2, [pc, #152]	@ (80036ec <HAL_DMA_IRQHandler+0xc80>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d03b      	beq.n	80036ce <HAL_DMA_IRQHandler+0xc62>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a25      	ldr	r2, [pc, #148]	@ (80036f0 <HAL_DMA_IRQHandler+0xc84>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d036      	beq.n	80036ce <HAL_DMA_IRQHandler+0xc62>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a23      	ldr	r2, [pc, #140]	@ (80036f4 <HAL_DMA_IRQHandler+0xc88>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d031      	beq.n	80036ce <HAL_DMA_IRQHandler+0xc62>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a22      	ldr	r2, [pc, #136]	@ (80036f8 <HAL_DMA_IRQHandler+0xc8c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d02c      	beq.n	80036ce <HAL_DMA_IRQHandler+0xc62>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a20      	ldr	r2, [pc, #128]	@ (80036fc <HAL_DMA_IRQHandler+0xc90>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d027      	beq.n	80036ce <HAL_DMA_IRQHandler+0xc62>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1f      	ldr	r2, [pc, #124]	@ (8003700 <HAL_DMA_IRQHandler+0xc94>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d022      	beq.n	80036ce <HAL_DMA_IRQHandler+0xc62>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1d      	ldr	r2, [pc, #116]	@ (8003704 <HAL_DMA_IRQHandler+0xc98>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d01d      	beq.n	80036ce <HAL_DMA_IRQHandler+0xc62>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1c      	ldr	r2, [pc, #112]	@ (8003708 <HAL_DMA_IRQHandler+0xc9c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d018      	beq.n	80036ce <HAL_DMA_IRQHandler+0xc62>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a1a      	ldr	r2, [pc, #104]	@ (800370c <HAL_DMA_IRQHandler+0xca0>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d013      	beq.n	80036ce <HAL_DMA_IRQHandler+0xc62>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a19      	ldr	r2, [pc, #100]	@ (8003710 <HAL_DMA_IRQHandler+0xca4>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00e      	beq.n	80036ce <HAL_DMA_IRQHandler+0xc62>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a17      	ldr	r2, [pc, #92]	@ (8003714 <HAL_DMA_IRQHandler+0xca8>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d009      	beq.n	80036ce <HAL_DMA_IRQHandler+0xc62>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a16      	ldr	r2, [pc, #88]	@ (8003718 <HAL_DMA_IRQHandler+0xcac>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d004      	beq.n	80036ce <HAL_DMA_IRQHandler+0xc62>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a14      	ldr	r2, [pc, #80]	@ (800371c <HAL_DMA_IRQHandler+0xcb0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d128      	bne.n	8003720 <HAL_DMA_IRQHandler+0xcb4>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0214 	bic.w	r2, r2, #20
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	e027      	b.n	8003730 <HAL_DMA_IRQHandler+0xcc4>
 80036e0:	40020010 	.word	0x40020010
 80036e4:	40020028 	.word	0x40020028
 80036e8:	40020040 	.word	0x40020040
 80036ec:	40020058 	.word	0x40020058
 80036f0:	40020070 	.word	0x40020070
 80036f4:	40020088 	.word	0x40020088
 80036f8:	400200a0 	.word	0x400200a0
 80036fc:	400200b8 	.word	0x400200b8
 8003700:	40020410 	.word	0x40020410
 8003704:	40020428 	.word	0x40020428
 8003708:	40020440 	.word	0x40020440
 800370c:	40020458 	.word	0x40020458
 8003710:	40020470 	.word	0x40020470
 8003714:	40020488 	.word	0x40020488
 8003718:	400204a0 	.word	0x400204a0
 800371c:	400204b8 	.word	0x400204b8
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 020a 	bic.w	r2, r2, #10
 800372e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 8097 	beq.w	8003878 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003752:	e091      	b.n	8003878 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	2208      	movs	r2, #8
 800375e:	409a      	lsls	r2, r3
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	4013      	ands	r3, r2
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 8088 	beq.w	800387a <HAL_DMA_IRQHandler+0xe0e>
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8082 	beq.w	800387a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a41      	ldr	r2, [pc, #260]	@ (8003880 <HAL_DMA_IRQHandler+0xe14>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d04a      	beq.n	8003816 <HAL_DMA_IRQHandler+0xdaa>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a3f      	ldr	r2, [pc, #252]	@ (8003884 <HAL_DMA_IRQHandler+0xe18>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d045      	beq.n	8003816 <HAL_DMA_IRQHandler+0xdaa>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a3e      	ldr	r2, [pc, #248]	@ (8003888 <HAL_DMA_IRQHandler+0xe1c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d040      	beq.n	8003816 <HAL_DMA_IRQHandler+0xdaa>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a3c      	ldr	r2, [pc, #240]	@ (800388c <HAL_DMA_IRQHandler+0xe20>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d03b      	beq.n	8003816 <HAL_DMA_IRQHandler+0xdaa>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a3b      	ldr	r2, [pc, #236]	@ (8003890 <HAL_DMA_IRQHandler+0xe24>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d036      	beq.n	8003816 <HAL_DMA_IRQHandler+0xdaa>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a39      	ldr	r2, [pc, #228]	@ (8003894 <HAL_DMA_IRQHandler+0xe28>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d031      	beq.n	8003816 <HAL_DMA_IRQHandler+0xdaa>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a38      	ldr	r2, [pc, #224]	@ (8003898 <HAL_DMA_IRQHandler+0xe2c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d02c      	beq.n	8003816 <HAL_DMA_IRQHandler+0xdaa>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a36      	ldr	r2, [pc, #216]	@ (800389c <HAL_DMA_IRQHandler+0xe30>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d027      	beq.n	8003816 <HAL_DMA_IRQHandler+0xdaa>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a35      	ldr	r2, [pc, #212]	@ (80038a0 <HAL_DMA_IRQHandler+0xe34>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d022      	beq.n	8003816 <HAL_DMA_IRQHandler+0xdaa>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a33      	ldr	r2, [pc, #204]	@ (80038a4 <HAL_DMA_IRQHandler+0xe38>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d01d      	beq.n	8003816 <HAL_DMA_IRQHandler+0xdaa>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a32      	ldr	r2, [pc, #200]	@ (80038a8 <HAL_DMA_IRQHandler+0xe3c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d018      	beq.n	8003816 <HAL_DMA_IRQHandler+0xdaa>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a30      	ldr	r2, [pc, #192]	@ (80038ac <HAL_DMA_IRQHandler+0xe40>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d013      	beq.n	8003816 <HAL_DMA_IRQHandler+0xdaa>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a2f      	ldr	r2, [pc, #188]	@ (80038b0 <HAL_DMA_IRQHandler+0xe44>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00e      	beq.n	8003816 <HAL_DMA_IRQHandler+0xdaa>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a2d      	ldr	r2, [pc, #180]	@ (80038b4 <HAL_DMA_IRQHandler+0xe48>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d009      	beq.n	8003816 <HAL_DMA_IRQHandler+0xdaa>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a2c      	ldr	r2, [pc, #176]	@ (80038b8 <HAL_DMA_IRQHandler+0xe4c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d004      	beq.n	8003816 <HAL_DMA_IRQHandler+0xdaa>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a2a      	ldr	r2, [pc, #168]	@ (80038bc <HAL_DMA_IRQHandler+0xe50>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d108      	bne.n	8003828 <HAL_DMA_IRQHandler+0xdbc>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 021c 	bic.w	r2, r2, #28
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	e007      	b.n	8003838 <HAL_DMA_IRQHandler+0xdcc>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 020e 	bic.w	r2, r2, #14
 8003836:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	2201      	movs	r2, #1
 8003842:	409a      	lsls	r2, r3
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003862:	2b00      	cmp	r3, #0
 8003864:	d009      	beq.n	800387a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	4798      	blx	r3
 800386e:	e004      	b.n	800387a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003870:	bf00      	nop
 8003872:	e002      	b.n	800387a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003874:	bf00      	nop
 8003876:	e000      	b.n	800387a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003878:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800387a:	3728      	adds	r7, #40	@ 0x28
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40020010 	.word	0x40020010
 8003884:	40020028 	.word	0x40020028
 8003888:	40020040 	.word	0x40020040
 800388c:	40020058 	.word	0x40020058
 8003890:	40020070 	.word	0x40020070
 8003894:	40020088 	.word	0x40020088
 8003898:	400200a0 	.word	0x400200a0
 800389c:	400200b8 	.word	0x400200b8
 80038a0:	40020410 	.word	0x40020410
 80038a4:	40020428 	.word	0x40020428
 80038a8:	40020440 	.word	0x40020440
 80038ac:	40020458 	.word	0x40020458
 80038b0:	40020470 	.word	0x40020470
 80038b4:	40020488 	.word	0x40020488
 80038b8:	400204a0 	.word	0x400204a0
 80038bc:	400204b8 	.word	0x400204b8

080038c0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a7f      	ldr	r2, [pc, #508]	@ (8003af4 <DMA_SetConfig+0x21c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d072      	beq.n	80039e2 <DMA_SetConfig+0x10a>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a7d      	ldr	r2, [pc, #500]	@ (8003af8 <DMA_SetConfig+0x220>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d06d      	beq.n	80039e2 <DMA_SetConfig+0x10a>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a7c      	ldr	r2, [pc, #496]	@ (8003afc <DMA_SetConfig+0x224>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d068      	beq.n	80039e2 <DMA_SetConfig+0x10a>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a7a      	ldr	r2, [pc, #488]	@ (8003b00 <DMA_SetConfig+0x228>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d063      	beq.n	80039e2 <DMA_SetConfig+0x10a>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a79      	ldr	r2, [pc, #484]	@ (8003b04 <DMA_SetConfig+0x22c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d05e      	beq.n	80039e2 <DMA_SetConfig+0x10a>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a77      	ldr	r2, [pc, #476]	@ (8003b08 <DMA_SetConfig+0x230>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d059      	beq.n	80039e2 <DMA_SetConfig+0x10a>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a76      	ldr	r2, [pc, #472]	@ (8003b0c <DMA_SetConfig+0x234>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d054      	beq.n	80039e2 <DMA_SetConfig+0x10a>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a74      	ldr	r2, [pc, #464]	@ (8003b10 <DMA_SetConfig+0x238>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d04f      	beq.n	80039e2 <DMA_SetConfig+0x10a>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a73      	ldr	r2, [pc, #460]	@ (8003b14 <DMA_SetConfig+0x23c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d04a      	beq.n	80039e2 <DMA_SetConfig+0x10a>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a71      	ldr	r2, [pc, #452]	@ (8003b18 <DMA_SetConfig+0x240>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d045      	beq.n	80039e2 <DMA_SetConfig+0x10a>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a70      	ldr	r2, [pc, #448]	@ (8003b1c <DMA_SetConfig+0x244>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d040      	beq.n	80039e2 <DMA_SetConfig+0x10a>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a6e      	ldr	r2, [pc, #440]	@ (8003b20 <DMA_SetConfig+0x248>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d03b      	beq.n	80039e2 <DMA_SetConfig+0x10a>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a6d      	ldr	r2, [pc, #436]	@ (8003b24 <DMA_SetConfig+0x24c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d036      	beq.n	80039e2 <DMA_SetConfig+0x10a>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a6b      	ldr	r2, [pc, #428]	@ (8003b28 <DMA_SetConfig+0x250>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d031      	beq.n	80039e2 <DMA_SetConfig+0x10a>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a6a      	ldr	r2, [pc, #424]	@ (8003b2c <DMA_SetConfig+0x254>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d02c      	beq.n	80039e2 <DMA_SetConfig+0x10a>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a68      	ldr	r2, [pc, #416]	@ (8003b30 <DMA_SetConfig+0x258>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d027      	beq.n	80039e2 <DMA_SetConfig+0x10a>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a67      	ldr	r2, [pc, #412]	@ (8003b34 <DMA_SetConfig+0x25c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d022      	beq.n	80039e2 <DMA_SetConfig+0x10a>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a65      	ldr	r2, [pc, #404]	@ (8003b38 <DMA_SetConfig+0x260>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d01d      	beq.n	80039e2 <DMA_SetConfig+0x10a>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a64      	ldr	r2, [pc, #400]	@ (8003b3c <DMA_SetConfig+0x264>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d018      	beq.n	80039e2 <DMA_SetConfig+0x10a>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a62      	ldr	r2, [pc, #392]	@ (8003b40 <DMA_SetConfig+0x268>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d013      	beq.n	80039e2 <DMA_SetConfig+0x10a>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a61      	ldr	r2, [pc, #388]	@ (8003b44 <DMA_SetConfig+0x26c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00e      	beq.n	80039e2 <DMA_SetConfig+0x10a>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a5f      	ldr	r2, [pc, #380]	@ (8003b48 <DMA_SetConfig+0x270>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d009      	beq.n	80039e2 <DMA_SetConfig+0x10a>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a5e      	ldr	r2, [pc, #376]	@ (8003b4c <DMA_SetConfig+0x274>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d004      	beq.n	80039e2 <DMA_SetConfig+0x10a>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a5c      	ldr	r2, [pc, #368]	@ (8003b50 <DMA_SetConfig+0x278>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d101      	bne.n	80039e6 <DMA_SetConfig+0x10e>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <DMA_SetConfig+0x110>
 80039e6:	2300      	movs	r3, #0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00d      	beq.n	8003a08 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80039f4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d004      	beq.n	8003a08 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a06:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a39      	ldr	r2, [pc, #228]	@ (8003af4 <DMA_SetConfig+0x21c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d04a      	beq.n	8003aa8 <DMA_SetConfig+0x1d0>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a38      	ldr	r2, [pc, #224]	@ (8003af8 <DMA_SetConfig+0x220>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d045      	beq.n	8003aa8 <DMA_SetConfig+0x1d0>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a36      	ldr	r2, [pc, #216]	@ (8003afc <DMA_SetConfig+0x224>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d040      	beq.n	8003aa8 <DMA_SetConfig+0x1d0>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a35      	ldr	r2, [pc, #212]	@ (8003b00 <DMA_SetConfig+0x228>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d03b      	beq.n	8003aa8 <DMA_SetConfig+0x1d0>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a33      	ldr	r2, [pc, #204]	@ (8003b04 <DMA_SetConfig+0x22c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d036      	beq.n	8003aa8 <DMA_SetConfig+0x1d0>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a32      	ldr	r2, [pc, #200]	@ (8003b08 <DMA_SetConfig+0x230>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d031      	beq.n	8003aa8 <DMA_SetConfig+0x1d0>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a30      	ldr	r2, [pc, #192]	@ (8003b0c <DMA_SetConfig+0x234>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d02c      	beq.n	8003aa8 <DMA_SetConfig+0x1d0>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a2f      	ldr	r2, [pc, #188]	@ (8003b10 <DMA_SetConfig+0x238>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d027      	beq.n	8003aa8 <DMA_SetConfig+0x1d0>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a2d      	ldr	r2, [pc, #180]	@ (8003b14 <DMA_SetConfig+0x23c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d022      	beq.n	8003aa8 <DMA_SetConfig+0x1d0>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a2c      	ldr	r2, [pc, #176]	@ (8003b18 <DMA_SetConfig+0x240>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d01d      	beq.n	8003aa8 <DMA_SetConfig+0x1d0>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a2a      	ldr	r2, [pc, #168]	@ (8003b1c <DMA_SetConfig+0x244>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d018      	beq.n	8003aa8 <DMA_SetConfig+0x1d0>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a29      	ldr	r2, [pc, #164]	@ (8003b20 <DMA_SetConfig+0x248>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d013      	beq.n	8003aa8 <DMA_SetConfig+0x1d0>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a27      	ldr	r2, [pc, #156]	@ (8003b24 <DMA_SetConfig+0x24c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00e      	beq.n	8003aa8 <DMA_SetConfig+0x1d0>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a26      	ldr	r2, [pc, #152]	@ (8003b28 <DMA_SetConfig+0x250>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d009      	beq.n	8003aa8 <DMA_SetConfig+0x1d0>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a24      	ldr	r2, [pc, #144]	@ (8003b2c <DMA_SetConfig+0x254>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d004      	beq.n	8003aa8 <DMA_SetConfig+0x1d0>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a23      	ldr	r2, [pc, #140]	@ (8003b30 <DMA_SetConfig+0x258>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d101      	bne.n	8003aac <DMA_SetConfig+0x1d4>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <DMA_SetConfig+0x1d6>
 8003aac:	2300      	movs	r3, #0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d059      	beq.n	8003b66 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab6:	f003 031f 	and.w	r3, r3, #31
 8003aba:	223f      	movs	r2, #63	@ 0x3f
 8003abc:	409a      	lsls	r2, r3
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ad0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b40      	cmp	r3, #64	@ 0x40
 8003ae0:	d138      	bne.n	8003b54 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003af2:	e086      	b.n	8003c02 <DMA_SetConfig+0x32a>
 8003af4:	40020010 	.word	0x40020010
 8003af8:	40020028 	.word	0x40020028
 8003afc:	40020040 	.word	0x40020040
 8003b00:	40020058 	.word	0x40020058
 8003b04:	40020070 	.word	0x40020070
 8003b08:	40020088 	.word	0x40020088
 8003b0c:	400200a0 	.word	0x400200a0
 8003b10:	400200b8 	.word	0x400200b8
 8003b14:	40020410 	.word	0x40020410
 8003b18:	40020428 	.word	0x40020428
 8003b1c:	40020440 	.word	0x40020440
 8003b20:	40020458 	.word	0x40020458
 8003b24:	40020470 	.word	0x40020470
 8003b28:	40020488 	.word	0x40020488
 8003b2c:	400204a0 	.word	0x400204a0
 8003b30:	400204b8 	.word	0x400204b8
 8003b34:	58025408 	.word	0x58025408
 8003b38:	5802541c 	.word	0x5802541c
 8003b3c:	58025430 	.word	0x58025430
 8003b40:	58025444 	.word	0x58025444
 8003b44:	58025458 	.word	0x58025458
 8003b48:	5802546c 	.word	0x5802546c
 8003b4c:	58025480 	.word	0x58025480
 8003b50:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	60da      	str	r2, [r3, #12]
}
 8003b64:	e04d      	b.n	8003c02 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a29      	ldr	r2, [pc, #164]	@ (8003c10 <DMA_SetConfig+0x338>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d022      	beq.n	8003bb6 <DMA_SetConfig+0x2de>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a27      	ldr	r2, [pc, #156]	@ (8003c14 <DMA_SetConfig+0x33c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d01d      	beq.n	8003bb6 <DMA_SetConfig+0x2de>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a26      	ldr	r2, [pc, #152]	@ (8003c18 <DMA_SetConfig+0x340>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d018      	beq.n	8003bb6 <DMA_SetConfig+0x2de>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a24      	ldr	r2, [pc, #144]	@ (8003c1c <DMA_SetConfig+0x344>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d013      	beq.n	8003bb6 <DMA_SetConfig+0x2de>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a23      	ldr	r2, [pc, #140]	@ (8003c20 <DMA_SetConfig+0x348>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d00e      	beq.n	8003bb6 <DMA_SetConfig+0x2de>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a21      	ldr	r2, [pc, #132]	@ (8003c24 <DMA_SetConfig+0x34c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d009      	beq.n	8003bb6 <DMA_SetConfig+0x2de>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a20      	ldr	r2, [pc, #128]	@ (8003c28 <DMA_SetConfig+0x350>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d004      	beq.n	8003bb6 <DMA_SetConfig+0x2de>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1e      	ldr	r2, [pc, #120]	@ (8003c2c <DMA_SetConfig+0x354>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d101      	bne.n	8003bba <DMA_SetConfig+0x2e2>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <DMA_SetConfig+0x2e4>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d020      	beq.n	8003c02 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	2201      	movs	r2, #1
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b40      	cmp	r3, #64	@ 0x40
 8003bde:	d108      	bne.n	8003bf2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	60da      	str	r2, [r3, #12]
}
 8003bf0:	e007      	b.n	8003c02 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	60da      	str	r2, [r3, #12]
}
 8003c02:	bf00      	nop
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	58025408 	.word	0x58025408
 8003c14:	5802541c 	.word	0x5802541c
 8003c18:	58025430 	.word	0x58025430
 8003c1c:	58025444 	.word	0x58025444
 8003c20:	58025458 	.word	0x58025458
 8003c24:	5802546c 	.word	0x5802546c
 8003c28:	58025480 	.word	0x58025480
 8003c2c:	58025494 	.word	0x58025494

08003c30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a42      	ldr	r2, [pc, #264]	@ (8003d48 <DMA_CalcBaseAndBitshift+0x118>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d04a      	beq.n	8003cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a41      	ldr	r2, [pc, #260]	@ (8003d4c <DMA_CalcBaseAndBitshift+0x11c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d045      	beq.n	8003cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a3f      	ldr	r2, [pc, #252]	@ (8003d50 <DMA_CalcBaseAndBitshift+0x120>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d040      	beq.n	8003cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a3e      	ldr	r2, [pc, #248]	@ (8003d54 <DMA_CalcBaseAndBitshift+0x124>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d03b      	beq.n	8003cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a3c      	ldr	r2, [pc, #240]	@ (8003d58 <DMA_CalcBaseAndBitshift+0x128>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d036      	beq.n	8003cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a3b      	ldr	r2, [pc, #236]	@ (8003d5c <DMA_CalcBaseAndBitshift+0x12c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d031      	beq.n	8003cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a39      	ldr	r2, [pc, #228]	@ (8003d60 <DMA_CalcBaseAndBitshift+0x130>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d02c      	beq.n	8003cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a38      	ldr	r2, [pc, #224]	@ (8003d64 <DMA_CalcBaseAndBitshift+0x134>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d027      	beq.n	8003cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a36      	ldr	r2, [pc, #216]	@ (8003d68 <DMA_CalcBaseAndBitshift+0x138>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d022      	beq.n	8003cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a35      	ldr	r2, [pc, #212]	@ (8003d6c <DMA_CalcBaseAndBitshift+0x13c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d01d      	beq.n	8003cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a33      	ldr	r2, [pc, #204]	@ (8003d70 <DMA_CalcBaseAndBitshift+0x140>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d018      	beq.n	8003cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a32      	ldr	r2, [pc, #200]	@ (8003d74 <DMA_CalcBaseAndBitshift+0x144>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d013      	beq.n	8003cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a30      	ldr	r2, [pc, #192]	@ (8003d78 <DMA_CalcBaseAndBitshift+0x148>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00e      	beq.n	8003cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a2f      	ldr	r2, [pc, #188]	@ (8003d7c <DMA_CalcBaseAndBitshift+0x14c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d009      	beq.n	8003cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a2d      	ldr	r2, [pc, #180]	@ (8003d80 <DMA_CalcBaseAndBitshift+0x150>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d004      	beq.n	8003cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a2c      	ldr	r2, [pc, #176]	@ (8003d84 <DMA_CalcBaseAndBitshift+0x154>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d101      	bne.n	8003cdc <DMA_CalcBaseAndBitshift+0xac>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e000      	b.n	8003cde <DMA_CalcBaseAndBitshift+0xae>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d024      	beq.n	8003d2c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	3b10      	subs	r3, #16
 8003cea:	4a27      	ldr	r2, [pc, #156]	@ (8003d88 <DMA_CalcBaseAndBitshift+0x158>)
 8003cec:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf0:	091b      	lsrs	r3, r3, #4
 8003cf2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	4a24      	ldr	r2, [pc, #144]	@ (8003d8c <DMA_CalcBaseAndBitshift+0x15c>)
 8003cfc:	5cd3      	ldrb	r3, [r2, r3]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d908      	bls.n	8003d1c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4b1f      	ldr	r3, [pc, #124]	@ (8003d90 <DMA_CalcBaseAndBitshift+0x160>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	1d1a      	adds	r2, r3, #4
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d1a:	e00d      	b.n	8003d38 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	4b1b      	ldr	r3, [pc, #108]	@ (8003d90 <DMA_CalcBaseAndBitshift+0x160>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d2a:	e005      	b.n	8003d38 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	40020010 	.word	0x40020010
 8003d4c:	40020028 	.word	0x40020028
 8003d50:	40020040 	.word	0x40020040
 8003d54:	40020058 	.word	0x40020058
 8003d58:	40020070 	.word	0x40020070
 8003d5c:	40020088 	.word	0x40020088
 8003d60:	400200a0 	.word	0x400200a0
 8003d64:	400200b8 	.word	0x400200b8
 8003d68:	40020410 	.word	0x40020410
 8003d6c:	40020428 	.word	0x40020428
 8003d70:	40020440 	.word	0x40020440
 8003d74:	40020458 	.word	0x40020458
 8003d78:	40020470 	.word	0x40020470
 8003d7c:	40020488 	.word	0x40020488
 8003d80:	400204a0 	.word	0x400204a0
 8003d84:	400204b8 	.word	0x400204b8
 8003d88:	aaaaaaab 	.word	0xaaaaaaab
 8003d8c:	08009db0 	.word	0x08009db0
 8003d90:	fffffc00 	.word	0xfffffc00

08003d94 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d120      	bne.n	8003dea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d858      	bhi.n	8003e62 <DMA_CheckFifoParam+0xce>
 8003db0:	a201      	add	r2, pc, #4	@ (adr r2, 8003db8 <DMA_CheckFifoParam+0x24>)
 8003db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db6:	bf00      	nop
 8003db8:	08003dc9 	.word	0x08003dc9
 8003dbc:	08003ddb 	.word	0x08003ddb
 8003dc0:	08003dc9 	.word	0x08003dc9
 8003dc4:	08003e63 	.word	0x08003e63
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d048      	beq.n	8003e66 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003dd8:	e045      	b.n	8003e66 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dde:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003de2:	d142      	bne.n	8003e6a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003de8:	e03f      	b.n	8003e6a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003df2:	d123      	bne.n	8003e3c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d838      	bhi.n	8003e6e <DMA_CheckFifoParam+0xda>
 8003dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8003e04 <DMA_CheckFifoParam+0x70>)
 8003dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e02:	bf00      	nop
 8003e04:	08003e15 	.word	0x08003e15
 8003e08:	08003e1b 	.word	0x08003e1b
 8003e0c:	08003e15 	.word	0x08003e15
 8003e10:	08003e2d 	.word	0x08003e2d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
        break;
 8003e18:	e030      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d025      	beq.n	8003e72 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e2a:	e022      	b.n	8003e72 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e30:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e34:	d11f      	bne.n	8003e76 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e3a:	e01c      	b.n	8003e76 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d902      	bls.n	8003e4a <DMA_CheckFifoParam+0xb6>
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d003      	beq.n	8003e50 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003e48:	e018      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	73fb      	strb	r3, [r7, #15]
        break;
 8003e4e:	e015      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00e      	beq.n	8003e7a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8003e60:	e00b      	b.n	8003e7a <DMA_CheckFifoParam+0xe6>
        break;
 8003e62:	bf00      	nop
 8003e64:	e00a      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
        break;
 8003e66:	bf00      	nop
 8003e68:	e008      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
        break;
 8003e6a:	bf00      	nop
 8003e6c:	e006      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
        break;
 8003e6e:	bf00      	nop
 8003e70:	e004      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
        break;
 8003e72:	bf00      	nop
 8003e74:	e002      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
        break;
 8003e76:	bf00      	nop
 8003e78:	e000      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
    break;
 8003e7a:	bf00      	nop
    }
  }

  return status;
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop

08003e8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a38      	ldr	r2, [pc, #224]	@ (8003f80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d022      	beq.n	8003eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a36      	ldr	r2, [pc, #216]	@ (8003f84 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d01d      	beq.n	8003eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a35      	ldr	r2, [pc, #212]	@ (8003f88 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d018      	beq.n	8003eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a33      	ldr	r2, [pc, #204]	@ (8003f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d013      	beq.n	8003eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a32      	ldr	r2, [pc, #200]	@ (8003f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00e      	beq.n	8003eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a30      	ldr	r2, [pc, #192]	@ (8003f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d009      	beq.n	8003eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a2f      	ldr	r2, [pc, #188]	@ (8003f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d004      	beq.n	8003eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2d      	ldr	r2, [pc, #180]	@ (8003f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d101      	bne.n	8003eee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d01a      	beq.n	8003f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	3b08      	subs	r3, #8
 8003efc:	4a28      	ldr	r2, [pc, #160]	@ (8003fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003efe:	fba2 2303 	umull	r2, r3, r2, r3
 8003f02:	091b      	lsrs	r3, r3, #4
 8003f04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4b26      	ldr	r3, [pc, #152]	@ (8003fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	461a      	mov	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a24      	ldr	r2, [pc, #144]	@ (8003fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003f18:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	2201      	movs	r2, #1
 8003f22:	409a      	lsls	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003f28:	e024      	b.n	8003f74 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	3b10      	subs	r3, #16
 8003f32:	4a1e      	ldr	r2, [pc, #120]	@ (8003fac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003f34:	fba2 2303 	umull	r2, r3, r2, r3
 8003f38:	091b      	lsrs	r3, r3, #4
 8003f3a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d806      	bhi.n	8003f52 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4a1b      	ldr	r2, [pc, #108]	@ (8003fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d902      	bls.n	8003f52 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	3308      	adds	r3, #8
 8003f50:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4b18      	ldr	r3, [pc, #96]	@ (8003fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a16      	ldr	r2, [pc, #88]	@ (8003fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003f64:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f003 031f 	and.w	r3, r3, #31
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	409a      	lsls	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f74:	bf00      	nop
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	58025408 	.word	0x58025408
 8003f84:	5802541c 	.word	0x5802541c
 8003f88:	58025430 	.word	0x58025430
 8003f8c:	58025444 	.word	0x58025444
 8003f90:	58025458 	.word	0x58025458
 8003f94:	5802546c 	.word	0x5802546c
 8003f98:	58025480 	.word	0x58025480
 8003f9c:	58025494 	.word	0x58025494
 8003fa0:	cccccccd 	.word	0xcccccccd
 8003fa4:	16009600 	.word	0x16009600
 8003fa8:	58025880 	.word	0x58025880
 8003fac:	aaaaaaab 	.word	0xaaaaaaab
 8003fb0:	400204b8 	.word	0x400204b8
 8003fb4:	4002040f 	.word	0x4002040f
 8003fb8:	10008200 	.word	0x10008200
 8003fbc:	40020880 	.word	0x40020880

08003fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d04a      	beq.n	800406c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d847      	bhi.n	800406c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a25      	ldr	r2, [pc, #148]	@ (8004078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d022      	beq.n	800402c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a24      	ldr	r2, [pc, #144]	@ (800407c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d01d      	beq.n	800402c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a22      	ldr	r2, [pc, #136]	@ (8004080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d018      	beq.n	800402c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a21      	ldr	r2, [pc, #132]	@ (8004084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d013      	beq.n	800402c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a1f      	ldr	r2, [pc, #124]	@ (8004088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00e      	beq.n	800402c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1e      	ldr	r2, [pc, #120]	@ (800408c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d009      	beq.n	800402c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a1c      	ldr	r2, [pc, #112]	@ (8004090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d004      	beq.n	800402c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1b      	ldr	r2, [pc, #108]	@ (8004094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d101      	bne.n	8004030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800402c:	2301      	movs	r3, #1
 800402e:	e000      	b.n	8004032 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004030:	2300      	movs	r3, #0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4b17      	ldr	r3, [pc, #92]	@ (8004098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800403a:	4413      	add	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	461a      	mov	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a15      	ldr	r2, [pc, #84]	@ (800409c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004048:	671a      	str	r2, [r3, #112]	@ 0x70
 800404a:	e009      	b.n	8004060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	4b14      	ldr	r3, [pc, #80]	@ (80040a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	461a      	mov	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a11      	ldr	r2, [pc, #68]	@ (80040a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800405e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	3b01      	subs	r3, #1
 8004064:	2201      	movs	r2, #1
 8004066:	409a      	lsls	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800406c:	bf00      	nop
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	58025408 	.word	0x58025408
 800407c:	5802541c 	.word	0x5802541c
 8004080:	58025430 	.word	0x58025430
 8004084:	58025444 	.word	0x58025444
 8004088:	58025458 	.word	0x58025458
 800408c:	5802546c 	.word	0x5802546c
 8004090:	58025480 	.word	0x58025480
 8004094:	58025494 	.word	0x58025494
 8004098:	1600963f 	.word	0x1600963f
 800409c:	58025940 	.word	0x58025940
 80040a0:	1000823f 	.word	0x1000823f
 80040a4:	40020940 	.word	0x40020940

080040a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b089      	sub	sp, #36	@ 0x24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80040b6:	4b89      	ldr	r3, [pc, #548]	@ (80042dc <HAL_GPIO_Init+0x234>)
 80040b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040ba:	e194      	b.n	80043e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	2101      	movs	r1, #1
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	fa01 f303 	lsl.w	r3, r1, r3
 80040c8:	4013      	ands	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 8186 	beq.w	80043e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f003 0303 	and.w	r3, r3, #3
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d005      	beq.n	80040ec <HAL_GPIO_Init+0x44>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f003 0303 	and.w	r3, r3, #3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d130      	bne.n	800414e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	2203      	movs	r2, #3
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	43db      	mvns	r3, r3
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4013      	ands	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4313      	orrs	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004122:	2201      	movs	r2, #1
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	43db      	mvns	r3, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4013      	ands	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	091b      	lsrs	r3, r3, #4
 8004138:	f003 0201 	and.w	r2, r3, #1
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	2b03      	cmp	r3, #3
 8004158:	d017      	beq.n	800418a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	2203      	movs	r2, #3
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	43db      	mvns	r3, r3
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	4013      	ands	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	4313      	orrs	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d123      	bne.n	80041de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	08da      	lsrs	r2, r3, #3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3208      	adds	r2, #8
 800419e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	220f      	movs	r2, #15
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	43db      	mvns	r3, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4013      	ands	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	691a      	ldr	r2, [r3, #16]
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	08da      	lsrs	r2, r3, #3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3208      	adds	r2, #8
 80041d8:	69b9      	ldr	r1, [r7, #24]
 80041da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	2203      	movs	r2, #3
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	43db      	mvns	r3, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4013      	ands	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f003 0203 	and.w	r2, r3, #3
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	4313      	orrs	r3, r2
 800420a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 80e0 	beq.w	80043e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004220:	4b2f      	ldr	r3, [pc, #188]	@ (80042e0 <HAL_GPIO_Init+0x238>)
 8004222:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004226:	4a2e      	ldr	r2, [pc, #184]	@ (80042e0 <HAL_GPIO_Init+0x238>)
 8004228:	f043 0302 	orr.w	r3, r3, #2
 800422c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004230:	4b2b      	ldr	r3, [pc, #172]	@ (80042e0 <HAL_GPIO_Init+0x238>)
 8004232:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800423e:	4a29      	ldr	r2, [pc, #164]	@ (80042e4 <HAL_GPIO_Init+0x23c>)
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	089b      	lsrs	r3, r3, #2
 8004244:	3302      	adds	r3, #2
 8004246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800424a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	220f      	movs	r2, #15
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43db      	mvns	r3, r3
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	4013      	ands	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a20      	ldr	r2, [pc, #128]	@ (80042e8 <HAL_GPIO_Init+0x240>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d052      	beq.n	8004310 <HAL_GPIO_Init+0x268>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a1f      	ldr	r2, [pc, #124]	@ (80042ec <HAL_GPIO_Init+0x244>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d031      	beq.n	80042d6 <HAL_GPIO_Init+0x22e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a1e      	ldr	r2, [pc, #120]	@ (80042f0 <HAL_GPIO_Init+0x248>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d02b      	beq.n	80042d2 <HAL_GPIO_Init+0x22a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a1d      	ldr	r2, [pc, #116]	@ (80042f4 <HAL_GPIO_Init+0x24c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d025      	beq.n	80042ce <HAL_GPIO_Init+0x226>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a1c      	ldr	r2, [pc, #112]	@ (80042f8 <HAL_GPIO_Init+0x250>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d01f      	beq.n	80042ca <HAL_GPIO_Init+0x222>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a1b      	ldr	r2, [pc, #108]	@ (80042fc <HAL_GPIO_Init+0x254>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d019      	beq.n	80042c6 <HAL_GPIO_Init+0x21e>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a1a      	ldr	r2, [pc, #104]	@ (8004300 <HAL_GPIO_Init+0x258>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d013      	beq.n	80042c2 <HAL_GPIO_Init+0x21a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a19      	ldr	r2, [pc, #100]	@ (8004304 <HAL_GPIO_Init+0x25c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d00d      	beq.n	80042be <HAL_GPIO_Init+0x216>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a18      	ldr	r2, [pc, #96]	@ (8004308 <HAL_GPIO_Init+0x260>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d007      	beq.n	80042ba <HAL_GPIO_Init+0x212>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a17      	ldr	r2, [pc, #92]	@ (800430c <HAL_GPIO_Init+0x264>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d101      	bne.n	80042b6 <HAL_GPIO_Init+0x20e>
 80042b2:	2309      	movs	r3, #9
 80042b4:	e02d      	b.n	8004312 <HAL_GPIO_Init+0x26a>
 80042b6:	230a      	movs	r3, #10
 80042b8:	e02b      	b.n	8004312 <HAL_GPIO_Init+0x26a>
 80042ba:	2308      	movs	r3, #8
 80042bc:	e029      	b.n	8004312 <HAL_GPIO_Init+0x26a>
 80042be:	2307      	movs	r3, #7
 80042c0:	e027      	b.n	8004312 <HAL_GPIO_Init+0x26a>
 80042c2:	2306      	movs	r3, #6
 80042c4:	e025      	b.n	8004312 <HAL_GPIO_Init+0x26a>
 80042c6:	2305      	movs	r3, #5
 80042c8:	e023      	b.n	8004312 <HAL_GPIO_Init+0x26a>
 80042ca:	2304      	movs	r3, #4
 80042cc:	e021      	b.n	8004312 <HAL_GPIO_Init+0x26a>
 80042ce:	2303      	movs	r3, #3
 80042d0:	e01f      	b.n	8004312 <HAL_GPIO_Init+0x26a>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e01d      	b.n	8004312 <HAL_GPIO_Init+0x26a>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e01b      	b.n	8004312 <HAL_GPIO_Init+0x26a>
 80042da:	bf00      	nop
 80042dc:	58000080 	.word	0x58000080
 80042e0:	58024400 	.word	0x58024400
 80042e4:	58000400 	.word	0x58000400
 80042e8:	58020000 	.word	0x58020000
 80042ec:	58020400 	.word	0x58020400
 80042f0:	58020800 	.word	0x58020800
 80042f4:	58020c00 	.word	0x58020c00
 80042f8:	58021000 	.word	0x58021000
 80042fc:	58021400 	.word	0x58021400
 8004300:	58021800 	.word	0x58021800
 8004304:	58021c00 	.word	0x58021c00
 8004308:	58022000 	.word	0x58022000
 800430c:	58022400 	.word	0x58022400
 8004310:	2300      	movs	r3, #0
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	f002 0203 	and.w	r2, r2, #3
 8004318:	0092      	lsls	r2, r2, #2
 800431a:	4093      	lsls	r3, r2
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4313      	orrs	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004322:	4938      	ldr	r1, [pc, #224]	@ (8004404 <HAL_GPIO_Init+0x35c>)
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	089b      	lsrs	r3, r3, #2
 8004328:	3302      	adds	r3, #2
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	43db      	mvns	r3, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4013      	ands	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004356:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800435e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	43db      	mvns	r3, r3
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4013      	ands	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004384:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	43db      	mvns	r3, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4013      	ands	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	43db      	mvns	r3, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4013      	ands	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	3301      	adds	r3, #1
 80043e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f47f ae63 	bne.w	80040bc <HAL_GPIO_Init+0x14>
  }
}
 80043f6:	bf00      	nop
 80043f8:	bf00      	nop
 80043fa:	3724      	adds	r7, #36	@ 0x24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	58000400 	.word	0x58000400

08004408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	807b      	strh	r3, [r7, #2]
 8004414:	4613      	mov	r3, r2
 8004416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004418:	787b      	ldrb	r3, [r7, #1]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800441e:	887a      	ldrh	r2, [r7, #2]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004424:	e003      	b.n	800442e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004426:	887b      	ldrh	r3, [r7, #2]
 8004428:	041a      	lsls	r2, r3, #16
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	619a      	str	r2, [r3, #24]
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800443a:	b480      	push	{r7}
 800443c:	b085      	sub	sp, #20
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	460b      	mov	r3, r1
 8004444:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800444c:	887a      	ldrh	r2, [r7, #2]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	4013      	ands	r3, r2
 8004452:	041a      	lsls	r2, r3, #16
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	43d9      	mvns	r1, r3
 8004458:	887b      	ldrh	r3, [r7, #2]
 800445a:	400b      	ands	r3, r1
 800445c:	431a      	orrs	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	619a      	str	r2, [r3, #24]
}
 8004462:	bf00      	nop
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e017      	b.n	80044b0 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d004      	beq.n	8004496 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2280      	movs	r2, #128	@ 0x80
 8004490:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e00c      	b.n	80044b0 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2204      	movs	r2, #4
 800449a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0201 	bic.w	r2, r2, #1
 80044ac:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80044c4:	4b19      	ldr	r3, [pc, #100]	@ (800452c <HAL_PWREx_ConfigSupply+0x70>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d00a      	beq.n	80044e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80044d0:	4b16      	ldr	r3, [pc, #88]	@ (800452c <HAL_PWREx_ConfigSupply+0x70>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d001      	beq.n	80044e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e01f      	b.n	8004522 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	e01d      	b.n	8004522 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80044e6:	4b11      	ldr	r3, [pc, #68]	@ (800452c <HAL_PWREx_ConfigSupply+0x70>)
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f023 0207 	bic.w	r2, r3, #7
 80044ee:	490f      	ldr	r1, [pc, #60]	@ (800452c <HAL_PWREx_ConfigSupply+0x70>)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80044f6:	f7fd fb2f 	bl	8001b58 <HAL_GetTick>
 80044fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80044fc:	e009      	b.n	8004512 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80044fe:	f7fd fb2b 	bl	8001b58 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800450c:	d901      	bls.n	8004512 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e007      	b.n	8004522 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004512:	4b06      	ldr	r3, [pc, #24]	@ (800452c <HAL_PWREx_ConfigSupply+0x70>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800451a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800451e:	d1ee      	bne.n	80044fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	58024800 	.word	0x58024800

08004530 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af02      	add	r7, sp, #8
 8004536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004538:	f7fd fb0e 	bl	8001b58 <HAL_GetTick>
 800453c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e05f      	b.n	8004608 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d107      	bne.n	8004564 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7fc fec5 	bl	80012e4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800455a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fc53 	bl	8004e0a <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	3b01      	subs	r3, #1
 8004574:	021a      	lsls	r2, r3, #8
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	2120      	movs	r1, #32
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 fc7e 	bl	8004e8c <QSPI_WaitFlagStateUntilTimeout>
 8004590:	4603      	mov	r3, r0
 8004592:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004594:	7afb      	ldrb	r3, [r7, #11]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d135      	bne.n	8004606 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004610 <HAL_QSPI_Init+0xe0>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6852      	ldr	r2, [r2, #4]
 80045a8:	0611      	lsls	r1, r2, #24
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	68d2      	ldr	r2, [r2, #12]
 80045ae:	4311      	orrs	r1, r2
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	69d2      	ldr	r2, [r2, #28]
 80045b4:	4311      	orrs	r1, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6a12      	ldr	r2, [r2, #32]
 80045ba:	4311      	orrs	r1, r2
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6812      	ldr	r2, [r2, #0]
 80045c0:	430b      	orrs	r3, r1
 80045c2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	4b12      	ldr	r3, [pc, #72]	@ (8004614 <HAL_QSPI_Init+0xe4>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6912      	ldr	r2, [r2, #16]
 80045d2:	0411      	lsls	r1, r2, #16
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6952      	ldr	r2, [r2, #20]
 80045d8:	4311      	orrs	r1, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6992      	ldr	r2, [r2, #24]
 80045de:	4311      	orrs	r1, r2
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	430b      	orrs	r3, r1
 80045e6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004606:	7afb      	ldrb	r3, [r7, #11]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	00ffff2f 	.word	0x00ffff2f
 8004614:	ffe0f8fe 	.word	0xffe0f8fe

08004618 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b00      	cmp	r3, #0
 8004638:	d064      	beq.n	8004704 <HAL_QSPI_IRQHandler+0xec>
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d05f      	beq.n	8004704 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3320      	adds	r3, #32
 800464a:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b12      	cmp	r3, #18
 8004656:	d125      	bne.n	80046a4 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8004658:	e01c      	b.n	8004694 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00f      	beq.n	8004682 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004666:	781a      	ldrb	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	625a      	str	r2, [r3, #36]	@ 0x24
          hqspi->TxXferCount--;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467a:	1e5a      	subs	r2, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004680:	e008      	b.n	8004694 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004690:	601a      	str	r2, [r3, #0]
          break;
 8004692:	e033      	b.n	80046fc <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 0304 	and.w	r3, r3, #4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1db      	bne.n	800465a <HAL_QSPI_IRQHandler+0x42>
 80046a2:	e02b      	b.n	80046fc <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b22      	cmp	r3, #34	@ 0x22
 80046ae:	d125      	bne.n	80046fc <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80046b0:	e01d      	b.n	80046ee <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d010      	beq.n	80046dc <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	7812      	ldrb	r2, [r2, #0]
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hqspi->RxXferCount--;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d4:	1e5a      	subs	r2, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80046da:	e008      	b.n	80046ee <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80046ea:	601a      	str	r2, [r3, #0]
          break;
 80046ec:	e006      	b.n	80046fc <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1da      	bne.n	80046b2 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 fb66 	bl	8004dce <HAL_QSPI_FifoThresholdCallback>
 8004702:	e13c      	b.n	800497e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 80b0 	beq.w	8004870 <HAL_QSPI_IRQHandler+0x258>
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 80aa 	beq.w	8004870 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2202      	movs	r2, #2
 8004722:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8004732:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b12      	cmp	r3, #18
 800473e:	d120      	bne.n	8004782 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0304 	and.w	r3, r3, #4
 800474a:	2b00      	cmp	r3, #0
 800474c:	d011      	beq.n	8004772 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0204 	bic.w	r2, r2, #4
 800475c:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0201 	bic.w	r2, r2, #1
 8004770:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 fb1d 	bl	8004dba <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004780:	e0fa      	b.n	8004978 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b22      	cmp	r3, #34	@ 0x22
 800478c:	d143      	bne.n	8004816 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d012      	beq.n	80047c2 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0204 	bic.w	r2, r2, #4
 80047aa:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0201 	bic.w	r2, r2, #1
 80047be:	60da      	str	r2, [r3, #12]
 80047c0:	e021      	b.n	8004806 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3320      	adds	r3, #32
 80047c8:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80047ca:	e013      	b.n	80047f4 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d017      	beq.n	8004804 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	7812      	ldrb	r2, [r2, #0]
 80047dc:	b2d2      	uxtb	r2, r2
 80047de:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	631a      	str	r2, [r3, #48]	@ 0x30
            hqspi->RxXferCount--;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ee:	1e5a      	subs	r2, r3, #1
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	639a      	str	r2, [r3, #56]	@ 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1e4      	bne.n	80047cc <HAL_QSPI_IRQHandler+0x1b4>
 8004802:	e000      	b.n	8004806 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8004804:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fac9 	bl	8004da6 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004814:	e0b0      	b.n	8004978 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d107      	bne.n	8004832 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fab1 	bl	8004d92 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004830:	e0a2      	b.n	8004978 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b08      	cmp	r3, #8
 800483c:	f040 809c 	bne.w	8004978 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695a      	ldr	r2, [r3, #20]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800484e:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800485c:	2b00      	cmp	r3, #0
 800485e:	d103      	bne.n	8004868 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 fa8c 	bl	8004d7e <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004866:	e087      	b.n	8004978 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fa7e 	bl	8004d6a <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800486e:	e083      	b.n	8004978 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d01f      	beq.n	80048ba <HAL_QSPI_IRQHandler+0x2a2>
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01a      	beq.n	80048ba <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2208      	movs	r2, #8
 800488a:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00b      	beq.n	80048b2 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 80048a8:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fa95 	bl	8004de2 <HAL_QSPI_StatusMatchCallback>
 80048b8:	e061      	b.n	800497e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d047      	beq.n	8004954 <HAL_QSPI_IRQHandler+0x33c>
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d042      	beq.n	8004954 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2201      	movs	r2, #1
 80048d4:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80048e4:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ea:	f043 0202 	orr.w	r2, r3, #2
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	645a      	str	r2, [r3, #68]	@ 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d021      	beq.n	8004944 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0204 	bic.w	r2, r2, #4
 800490e:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004914:	4a1c      	ldr	r2, [pc, #112]	@ (8004988 <HAL_QSPI_IRQHandler+0x370>)
 8004916:	659a      	str	r2, [r3, #88]	@ 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff fda6 	bl	800446e <HAL_MDMA_Abort_IT>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d029      	beq.n	800497c <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492c:	f043 0204 	orr.w	r2, r3, #4
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fa14 	bl	8004d6a <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004942:	e01b      	b.n	800497c <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fa0c 	bl	8004d6a <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004952:	e013      	b.n	800497c <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f003 0310 	and.w	r3, r3, #16
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00f      	beq.n	800497e <HAL_QSPI_IRQHandler+0x366>
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2210      	movs	r2, #16
 800496e:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fa40 	bl	8004df6 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8004976:	e002      	b.n	800497e <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004978:	bf00      	nop
 800497a:	e000      	b.n	800497e <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800497c:	bf00      	nop
}
 800497e:	bf00      	nop
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	08004e27 	.word	0x08004e27

0800498c <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af02      	add	r7, sp, #8
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004998:	f7fd f8de 	bl	8001b58 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d101      	bne.n	80049ae <HAL_QSPI_Command+0x22>
 80049aa:	2302      	movs	r3, #2
 80049ac:	e048      	b.n	8004a40 <HAL_QSPI_Command+0xb4>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d137      	bne.n	8004a32 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	2200      	movs	r2, #0
 80049d8:	2120      	movs	r1, #32
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 fa56 	bl	8004e8c <QSPI_WaitFlagStateUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80049e4:	7dfb      	ldrb	r3, [r7, #23]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d125      	bne.n	8004a36 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80049ea:	2200      	movs	r2, #0
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 fa83 	bl	8004efa <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d115      	bne.n	8004a28 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	2201      	movs	r2, #1
 8004a04:	2102      	movs	r1, #2
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 fa40 	bl	8004e8c <QSPI_WaitFlagStateUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8004a10:	7dfb      	ldrb	r3, [r7, #23]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10f      	bne.n	8004a36 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a26:	e006      	b.n	8004a36 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a30:	e001      	b.n	8004a36 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8004a32:	2302      	movs	r3, #2
 8004a34:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8004a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08a      	sub	sp, #40	@ 0x28
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a54:	2300      	movs	r3, #0
 8004a56:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004a58:	f7fd f87e 	bl	8001b58 <HAL_GetTick>
 8004a5c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3320      	adds	r3, #32
 8004a64:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <HAL_QSPI_Transmit+0x2e>
 8004a72:	2302      	movs	r3, #2
 8004a74:	e076      	b.n	8004b64 <HAL_QSPI_Transmit+0x11c>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d165      	bne.n	8004b56 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d056      	beq.n	8004b44 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2212      	movs	r2, #18
 8004a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695a      	ldr	r2, [r3, #20]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8004aca:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8004acc:	e01b      	b.n	8004b06 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	2104      	movs	r1, #4
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 f9d7 	bl	8004e8c <QSPI_WaitFlagStateUntilTimeout>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8004ae2:	7ffb      	ldrb	r3, [r7, #31]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d113      	bne.n	8004b10 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aec:	781a      	ldrb	r2, [r3, #0]
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	625a      	str	r2, [r3, #36]	@ 0x24
        hqspi->TxXferCount--;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b00:	1e5a      	subs	r2, r3, #1
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	62da      	str	r2, [r3, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1df      	bne.n	8004ace <HAL_QSPI_Transmit+0x86>
 8004b0e:	e000      	b.n	8004b12 <HAL_QSPI_Transmit+0xca>
          break;
 8004b10:	bf00      	nop
      }

      if (status == HAL_OK)
 8004b12:	7ffb      	ldrb	r3, [r7, #31]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d110      	bne.n	8004b3a <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	2102      	movs	r1, #2
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f9b2 	bl	8004e8c <QSPI_WaitFlagStateUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8004b2c:	7ffb      	ldrb	r3, [r7, #31]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d103      	bne.n	8004b3a <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2202      	movs	r2, #2
 8004b38:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b42:	e00a      	b.n	8004b5a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b48:	f043 0208 	orr.w	r2, r3, #8
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	77fb      	strb	r3, [r7, #31]
 8004b54:	e001      	b.n	8004b5a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004b56:	2302      	movs	r3, #2
 8004b58:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8004b62:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3720      	adds	r7, #32
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08a      	sub	sp, #40	@ 0x28
 8004b70:	af02      	add	r7, sp, #8
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004b7c:	f7fc ffec 	bl	8001b58 <HAL_GetTick>
 8004b80:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3320      	adds	r3, #32
 8004b90:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_QSPI_Receive+0x36>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e07d      	b.n	8004c9e <HAL_QSPI_Receive+0x132>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d16c      	bne.n	8004c90 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d05d      	beq.n	8004c7e <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2222      	movs	r2, #34	@ 0x22
 8004bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004bfa:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8004c04:	e01c      	b.n	8004c40 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	2106      	movs	r1, #6
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 f93b 	bl	8004e8c <QSPI_WaitFlagStateUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8004c1a:	7ffb      	ldrb	r3, [r7, #31]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d114      	bne.n	8004c4a <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	7812      	ldrb	r2, [r2, #0]
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c30:	1c5a      	adds	r2, r3, #1
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	631a      	str	r2, [r3, #48]	@ 0x30
        hqspi->RxXferCount--;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3a:	1e5a      	subs	r2, r3, #1
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	639a      	str	r2, [r3, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1de      	bne.n	8004c06 <HAL_QSPI_Receive+0x9a>
 8004c48:	e000      	b.n	8004c4c <HAL_QSPI_Receive+0xe0>
          break;
 8004c4a:	bf00      	nop
      }

      if (status == HAL_OK)
 8004c4c:	7ffb      	ldrb	r3, [r7, #31]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d110      	bne.n	8004c74 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	2102      	movs	r1, #2
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 f915 	bl	8004e8c <QSPI_WaitFlagStateUntilTimeout>
 8004c62:	4603      	mov	r3, r0
 8004c64:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8004c66:	7ffb      	ldrb	r3, [r7, #31]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d103      	bne.n	8004c74 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2202      	movs	r2, #2
 8004c72:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c7c:	e00a      	b.n	8004c94 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c82:	f043 0208 	orr.w	r2, r3, #8
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	77fb      	strb	r3, [r7, #31]
 8004c8e:	e001      	b.n	8004c94 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004c90:	2302      	movs	r3, #2
 8004c92:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8004c9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3720      	adds	r7, #32
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b088      	sub	sp, #32
 8004caa:	af02      	add	r7, sp, #8
 8004cac:	60f8      	str	r0, [r7, #12]
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004cb2:	f7fc ff51 	bl	8001b58 <HAL_GetTick>
 8004cb6:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_QSPI_MemoryMapped+0x22>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e04c      	b.n	8004d62 <HAL_QSPI_MemoryMapped+0xbc>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d13b      	bne.n	8004d54 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2282      	movs	r2, #130	@ 0x82
 8004ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	2120      	movs	r1, #32
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 f8c8 	bl	8004e8c <QSPI_WaitFlagStateUntilTimeout>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004d00:	7dfb      	ldrb	r3, [r7, #23]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d128      	bne.n	8004d58 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f023 0108 	bic.w	r1, r3, #8
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d110      	bne.n	8004d46 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2210      	movs	r2, #16
 8004d34:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004d44:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8004d46:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 f8d4 	bl	8004efa <QSPI_Config>
 8004d52:	e001      	b.n	8004d58 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004d54:	2302      	movs	r3, #2
 8004d56:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8004d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b084      	sub	sp, #16
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e32:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	639a      	str	r2, [r3, #56]	@ 0x38
  hqspi->TxXferCount = 0U;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d114      	bne.n	8004e76 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2202      	movs	r2, #2
 8004e52:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004e62:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0202 	orr.w	r2, r2, #2
 8004e72:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8004e74:	e006      	b.n	8004e84 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f7ff ff73 	bl	8004d6a <HAL_QSPI_ErrorCallback>
}
 8004e84:	bf00      	nop
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	603b      	str	r3, [r7, #0]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004e9c:	e01a      	b.n	8004ed4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea4:	d016      	beq.n	8004ed4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea6:	f7fc fe57 	bl	8001b58 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d302      	bcc.n	8004ebc <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10b      	bne.n	8004ed4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2204      	movs	r2, #4
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec8:	f043 0201 	orr.w	r2, r3, #1
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e00e      	b.n	8004ef2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	bf14      	ite	ne
 8004ee2:	2301      	movne	r3, #1
 8004ee4:	2300      	moveq	r3, #0
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	461a      	mov	r2, r3
 8004eea:	79fb      	ldrb	r3, [r7, #7]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d1d6      	bne.n	8004e9e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b085      	sub	sp, #20
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d009      	beq.n	8004f22 <QSPI_Config+0x28>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004f14:	d005      	beq.n	8004f22 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	3a01      	subs	r2, #1
 8004f20:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 80c1 	beq.w	80050ae <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d063      	beq.n	8004ffc <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	6892      	ldr	r2, [r2, #8]
 8004f3c:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d031      	beq.n	8004faa <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f54:	431a      	orrs	r2, r3
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	049b      	lsls	r3, r3, #18
 8004f62:	431a      	orrs	r2, r3
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	431a      	orrs	r2, r3
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	431a      	orrs	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	ea42 0103 	orr.w	r1, r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004f9a:	f000 813f 	beq.w	800521c <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	6852      	ldr	r2, [r2, #4]
 8004fa6:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 8004fa8:	e138      	b.n	800521c <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	049b      	lsls	r3, r3, #18
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	ea42 0103 	orr.w	r1, r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	619a      	str	r2, [r3, #24]
}
 8004ffa:	e10f      	b.n	800521c <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d02e      	beq.n	8005062 <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500c:	431a      	orrs	r2, r3
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005012:	431a      	orrs	r2, r3
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005018:	431a      	orrs	r2, r3
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	049b      	lsls	r3, r3, #18
 8005020:	431a      	orrs	r2, r3
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	431a      	orrs	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	431a      	orrs	r2, r3
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	431a      	orrs	r2, r3
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	431a      	orrs	r2, r3
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	ea42 0103 	orr.w	r1, r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	430a      	orrs	r2, r1
 800504a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005052:	f000 80e3 	beq.w	800521c <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	6852      	ldr	r2, [r2, #4]
 800505e:	619a      	str	r2, [r3, #24]
}
 8005060:	e0dc      	b.n	800521c <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506a:	431a      	orrs	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005070:	431a      	orrs	r2, r3
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005076:	431a      	orrs	r2, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	049b      	lsls	r3, r3, #18
 800507e:	431a      	orrs	r2, r3
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	431a      	orrs	r2, r3
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	431a      	orrs	r2, r3
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	431a      	orrs	r2, r3
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	ea42 0103 	orr.w	r1, r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2200      	movs	r2, #0
 80050aa:	619a      	str	r2, [r3, #24]
}
 80050ac:	e0b6      	b.n	800521c <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d05d      	beq.n	8005172 <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	6892      	ldr	r2, [r2, #8]
 80050be:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d02e      	beq.n	8005126 <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d0:	431a      	orrs	r2, r3
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050d6:	431a      	orrs	r2, r3
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050dc:	431a      	orrs	r2, r3
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	049b      	lsls	r3, r3, #18
 80050e4:	431a      	orrs	r2, r3
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	431a      	orrs	r2, r3
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	431a      	orrs	r2, r3
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	431a      	orrs	r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	431a      	orrs	r2, r3
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	ea42 0103 	orr.w	r1, r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	430a      	orrs	r2, r1
 800510e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005116:	f000 8081 	beq.w	800521c <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	6852      	ldr	r2, [r2, #4]
 8005122:	619a      	str	r2, [r3, #24]
}
 8005124:	e07a      	b.n	800521c <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512e:	431a      	orrs	r2, r3
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005134:	431a      	orrs	r2, r3
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513a:	431a      	orrs	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	049b      	lsls	r3, r3, #18
 8005142:	431a      	orrs	r2, r3
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	431a      	orrs	r2, r3
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	431a      	orrs	r2, r3
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	431a      	orrs	r2, r3
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	ea42 0103 	orr.w	r1, r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	430a      	orrs	r2, r1
 8005166:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2200      	movs	r2, #0
 800516e:	619a      	str	r2, [r3, #24]
}
 8005170:	e054      	b.n	800521c <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d02a      	beq.n	80051d0 <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005182:	431a      	orrs	r2, r3
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005188:	431a      	orrs	r2, r3
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518e:	431a      	orrs	r2, r3
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	049b      	lsls	r3, r3, #18
 8005196:	431a      	orrs	r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	431a      	orrs	r2, r3
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	431a      	orrs	r2, r3
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	431a      	orrs	r2, r3
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	ea42 0103 	orr.w	r1, r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80051c2:	d02b      	beq.n	800521c <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	6852      	ldr	r2, [r2, #4]
 80051cc:	619a      	str	r2, [r3, #24]
}
 80051ce:	e025      	b.n	800521c <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d021      	beq.n	800521c <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e0:	431a      	orrs	r2, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e6:	431a      	orrs	r2, r3
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ec:	431a      	orrs	r2, r3
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	049b      	lsls	r3, r3, #18
 80051f4:	431a      	orrs	r2, r3
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	431a      	orrs	r2, r3
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	ea42 0103 	orr.w	r1, r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	430a      	orrs	r2, r1
 8005212:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2200      	movs	r2, #0
 800521a:	619a      	str	r2, [r3, #24]
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b08c      	sub	sp, #48	@ 0x30
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d102      	bne.n	800523c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	f000 bc48 	b.w	8005acc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 8088 	beq.w	800535a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800524a:	4b99      	ldr	r3, [pc, #612]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005252:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005254:	4b96      	ldr	r3, [pc, #600]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 8005256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005258:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800525a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800525c:	2b10      	cmp	r3, #16
 800525e:	d007      	beq.n	8005270 <HAL_RCC_OscConfig+0x48>
 8005260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005262:	2b18      	cmp	r3, #24
 8005264:	d111      	bne.n	800528a <HAL_RCC_OscConfig+0x62>
 8005266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005268:	f003 0303 	and.w	r3, r3, #3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d10c      	bne.n	800528a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005270:	4b8f      	ldr	r3, [pc, #572]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d06d      	beq.n	8005358 <HAL_RCC_OscConfig+0x130>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d169      	bne.n	8005358 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	f000 bc21 	b.w	8005acc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005292:	d106      	bne.n	80052a2 <HAL_RCC_OscConfig+0x7a>
 8005294:	4b86      	ldr	r3, [pc, #536]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a85      	ldr	r2, [pc, #532]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 800529a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800529e:	6013      	str	r3, [r2, #0]
 80052a0:	e02e      	b.n	8005300 <HAL_RCC_OscConfig+0xd8>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10c      	bne.n	80052c4 <HAL_RCC_OscConfig+0x9c>
 80052aa:	4b81      	ldr	r3, [pc, #516]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a80      	ldr	r2, [pc, #512]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 80052b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052b4:	6013      	str	r3, [r2, #0]
 80052b6:	4b7e      	ldr	r3, [pc, #504]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a7d      	ldr	r2, [pc, #500]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 80052bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	e01d      	b.n	8005300 <HAL_RCC_OscConfig+0xd8>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052cc:	d10c      	bne.n	80052e8 <HAL_RCC_OscConfig+0xc0>
 80052ce:	4b78      	ldr	r3, [pc, #480]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a77      	ldr	r2, [pc, #476]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 80052d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	4b75      	ldr	r3, [pc, #468]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a74      	ldr	r2, [pc, #464]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 80052e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	e00b      	b.n	8005300 <HAL_RCC_OscConfig+0xd8>
 80052e8:	4b71      	ldr	r3, [pc, #452]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a70      	ldr	r2, [pc, #448]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 80052ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	4b6e      	ldr	r3, [pc, #440]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a6d      	ldr	r2, [pc, #436]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 80052fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d013      	beq.n	8005330 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005308:	f7fc fc26 	bl	8001b58 <HAL_GetTick>
 800530c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005310:	f7fc fc22 	bl	8001b58 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b64      	cmp	r3, #100	@ 0x64
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e3d4      	b.n	8005acc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005322:	4b63      	ldr	r3, [pc, #396]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f0      	beq.n	8005310 <HAL_RCC_OscConfig+0xe8>
 800532e:	e014      	b.n	800535a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005330:	f7fc fc12 	bl	8001b58 <HAL_GetTick>
 8005334:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005338:	f7fc fc0e 	bl	8001b58 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b64      	cmp	r3, #100	@ 0x64
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e3c0      	b.n	8005acc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800534a:	4b59      	ldr	r3, [pc, #356]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1f0      	bne.n	8005338 <HAL_RCC_OscConfig+0x110>
 8005356:	e000      	b.n	800535a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 80ca 	beq.w	80054fc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005368:	4b51      	ldr	r3, [pc, #324]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005370:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005372:	4b4f      	ldr	r3, [pc, #316]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 8005374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005376:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d007      	beq.n	800538e <HAL_RCC_OscConfig+0x166>
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	2b18      	cmp	r3, #24
 8005382:	d156      	bne.n	8005432 <HAL_RCC_OscConfig+0x20a>
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d151      	bne.n	8005432 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800538e:	4b48      	ldr	r3, [pc, #288]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0304 	and.w	r3, r3, #4
 8005396:	2b00      	cmp	r3, #0
 8005398:	d005      	beq.n	80053a6 <HAL_RCC_OscConfig+0x17e>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e392      	b.n	8005acc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80053a6:	4b42      	ldr	r3, [pc, #264]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f023 0219 	bic.w	r2, r3, #25
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	493f      	ldr	r1, [pc, #252]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b8:	f7fc fbce 	bl	8001b58 <HAL_GetTick>
 80053bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053c0:	f7fc fbca 	bl	8001b58 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e37c      	b.n	8005acc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053d2:	4b37      	ldr	r3, [pc, #220]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0f0      	beq.n	80053c0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053de:	f7fc fbeb 	bl	8001bb8 <HAL_GetREVID>
 80053e2:	4603      	mov	r3, r0
 80053e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d817      	bhi.n	800541c <HAL_RCC_OscConfig+0x1f4>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	2b40      	cmp	r3, #64	@ 0x40
 80053f2:	d108      	bne.n	8005406 <HAL_RCC_OscConfig+0x1de>
 80053f4:	4b2e      	ldr	r3, [pc, #184]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80053fc:	4a2c      	ldr	r2, [pc, #176]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 80053fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005402:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005404:	e07a      	b.n	80054fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005406:	4b2a      	ldr	r3, [pc, #168]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	031b      	lsls	r3, r3, #12
 8005414:	4926      	ldr	r1, [pc, #152]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 8005416:	4313      	orrs	r3, r2
 8005418:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800541a:	e06f      	b.n	80054fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800541c:	4b24      	ldr	r3, [pc, #144]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	061b      	lsls	r3, r3, #24
 800542a:	4921      	ldr	r1, [pc, #132]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 800542c:	4313      	orrs	r3, r2
 800542e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005430:	e064      	b.n	80054fc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d047      	beq.n	80054ca <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800543a:	4b1d      	ldr	r3, [pc, #116]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f023 0219 	bic.w	r2, r3, #25
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	491a      	ldr	r1, [pc, #104]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 8005448:	4313      	orrs	r3, r2
 800544a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800544c:	f7fc fb84 	bl	8001b58 <HAL_GetTick>
 8005450:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005454:	f7fc fb80 	bl	8001b58 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e332      	b.n	8005acc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005466:	4b12      	ldr	r3, [pc, #72]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0f0      	beq.n	8005454 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005472:	f7fc fba1 	bl	8001bb8 <HAL_GetREVID>
 8005476:	4603      	mov	r3, r0
 8005478:	f241 0203 	movw	r2, #4099	@ 0x1003
 800547c:	4293      	cmp	r3, r2
 800547e:	d819      	bhi.n	80054b4 <HAL_RCC_OscConfig+0x28c>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	2b40      	cmp	r3, #64	@ 0x40
 8005486:	d108      	bne.n	800549a <HAL_RCC_OscConfig+0x272>
 8005488:	4b09      	ldr	r3, [pc, #36]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005490:	4a07      	ldr	r2, [pc, #28]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 8005492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005496:	6053      	str	r3, [r2, #4]
 8005498:	e030      	b.n	80054fc <HAL_RCC_OscConfig+0x2d4>
 800549a:	4b05      	ldr	r3, [pc, #20]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	031b      	lsls	r3, r3, #12
 80054a8:	4901      	ldr	r1, [pc, #4]	@ (80054b0 <HAL_RCC_OscConfig+0x288>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	604b      	str	r3, [r1, #4]
 80054ae:	e025      	b.n	80054fc <HAL_RCC_OscConfig+0x2d4>
 80054b0:	58024400 	.word	0x58024400
 80054b4:	4b9a      	ldr	r3, [pc, #616]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	061b      	lsls	r3, r3, #24
 80054c2:	4997      	ldr	r1, [pc, #604]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	604b      	str	r3, [r1, #4]
 80054c8:	e018      	b.n	80054fc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054ca:	4b95      	ldr	r3, [pc, #596]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a94      	ldr	r2, [pc, #592]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 80054d0:	f023 0301 	bic.w	r3, r3, #1
 80054d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d6:	f7fc fb3f 	bl	8001b58 <HAL_GetTick>
 80054da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054de:	f7fc fb3b 	bl	8001b58 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e2ed      	b.n	8005acc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054f0:	4b8b      	ldr	r3, [pc, #556]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1f0      	bne.n	80054de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0310 	and.w	r3, r3, #16
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 80a9 	beq.w	800565c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800550a:	4b85      	ldr	r3, [pc, #532]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005512:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005514:	4b82      	ldr	r3, [pc, #520]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 8005516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005518:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	2b08      	cmp	r3, #8
 800551e:	d007      	beq.n	8005530 <HAL_RCC_OscConfig+0x308>
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	2b18      	cmp	r3, #24
 8005524:	d13a      	bne.n	800559c <HAL_RCC_OscConfig+0x374>
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f003 0303 	and.w	r3, r3, #3
 800552c:	2b01      	cmp	r3, #1
 800552e:	d135      	bne.n	800559c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005530:	4b7b      	ldr	r3, [pc, #492]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005538:	2b00      	cmp	r3, #0
 800553a:	d005      	beq.n	8005548 <HAL_RCC_OscConfig+0x320>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	2b80      	cmp	r3, #128	@ 0x80
 8005542:	d001      	beq.n	8005548 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e2c1      	b.n	8005acc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005548:	f7fc fb36 	bl	8001bb8 <HAL_GetREVID>
 800554c:	4603      	mov	r3, r0
 800554e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005552:	4293      	cmp	r3, r2
 8005554:	d817      	bhi.n	8005586 <HAL_RCC_OscConfig+0x35e>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	2b20      	cmp	r3, #32
 800555c:	d108      	bne.n	8005570 <HAL_RCC_OscConfig+0x348>
 800555e:	4b70      	ldr	r3, [pc, #448]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005566:	4a6e      	ldr	r2, [pc, #440]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 8005568:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800556c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800556e:	e075      	b.n	800565c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005570:	4b6b      	ldr	r3, [pc, #428]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	069b      	lsls	r3, r3, #26
 800557e:	4968      	ldr	r1, [pc, #416]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 8005580:	4313      	orrs	r3, r2
 8005582:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005584:	e06a      	b.n	800565c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005586:	4b66      	ldr	r3, [pc, #408]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	061b      	lsls	r3, r3, #24
 8005594:	4962      	ldr	r1, [pc, #392]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 8005596:	4313      	orrs	r3, r2
 8005598:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800559a:	e05f      	b.n	800565c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d042      	beq.n	800562a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055a4:	4b5e      	ldr	r3, [pc, #376]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a5d      	ldr	r2, [pc, #372]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 80055aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b0:	f7fc fad2 	bl	8001b58 <HAL_GetTick>
 80055b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055b6:	e008      	b.n	80055ca <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80055b8:	f7fc face 	bl	8001b58 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e280      	b.n	8005acc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055ca:	4b55      	ldr	r3, [pc, #340]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0f0      	beq.n	80055b8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055d6:	f7fc faef 	bl	8001bb8 <HAL_GetREVID>
 80055da:	4603      	mov	r3, r0
 80055dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d817      	bhi.n	8005614 <HAL_RCC_OscConfig+0x3ec>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	2b20      	cmp	r3, #32
 80055ea:	d108      	bne.n	80055fe <HAL_RCC_OscConfig+0x3d6>
 80055ec:	4b4c      	ldr	r3, [pc, #304]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80055f4:	4a4a      	ldr	r2, [pc, #296]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 80055f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055fa:	6053      	str	r3, [r2, #4]
 80055fc:	e02e      	b.n	800565c <HAL_RCC_OscConfig+0x434>
 80055fe:	4b48      	ldr	r3, [pc, #288]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	069b      	lsls	r3, r3, #26
 800560c:	4944      	ldr	r1, [pc, #272]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 800560e:	4313      	orrs	r3, r2
 8005610:	604b      	str	r3, [r1, #4]
 8005612:	e023      	b.n	800565c <HAL_RCC_OscConfig+0x434>
 8005614:	4b42      	ldr	r3, [pc, #264]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	061b      	lsls	r3, r3, #24
 8005622:	493f      	ldr	r1, [pc, #252]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 8005624:	4313      	orrs	r3, r2
 8005626:	60cb      	str	r3, [r1, #12]
 8005628:	e018      	b.n	800565c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800562a:	4b3d      	ldr	r3, [pc, #244]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a3c      	ldr	r2, [pc, #240]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 8005630:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005636:	f7fc fa8f 	bl	8001b58 <HAL_GetTick>
 800563a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800563e:	f7fc fa8b 	bl	8001b58 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e23d      	b.n	8005acc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005650:	4b33      	ldr	r3, [pc, #204]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1f0      	bne.n	800563e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0308 	and.w	r3, r3, #8
 8005664:	2b00      	cmp	r3, #0
 8005666:	d036      	beq.n	80056d6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d019      	beq.n	80056a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005670:	4b2b      	ldr	r3, [pc, #172]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 8005672:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005674:	4a2a      	ldr	r2, [pc, #168]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 8005676:	f043 0301 	orr.w	r3, r3, #1
 800567a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800567c:	f7fc fa6c 	bl	8001b58 <HAL_GetTick>
 8005680:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005684:	f7fc fa68 	bl	8001b58 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e21a      	b.n	8005acc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005696:	4b22      	ldr	r3, [pc, #136]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 8005698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0f0      	beq.n	8005684 <HAL_RCC_OscConfig+0x45c>
 80056a2:	e018      	b.n	80056d6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056a4:	4b1e      	ldr	r3, [pc, #120]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 80056a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 80056aa:	f023 0301 	bic.w	r3, r3, #1
 80056ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b0:	f7fc fa52 	bl	8001b58 <HAL_GetTick>
 80056b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056b8:	f7fc fa4e 	bl	8001b58 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e200      	b.n	8005acc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056ca:	4b15      	ldr	r3, [pc, #84]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 80056cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f0      	bne.n	80056b8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d039      	beq.n	8005756 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d01c      	beq.n	8005724 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a0c      	ldr	r2, [pc, #48]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 80056f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80056f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056f6:	f7fc fa2f 	bl	8001b58 <HAL_GetTick>
 80056fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056fc:	e008      	b.n	8005710 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056fe:	f7fc fa2b 	bl	8001b58 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d901      	bls.n	8005710 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e1dd      	b.n	8005acc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005710:	4b03      	ldr	r3, [pc, #12]	@ (8005720 <HAL_RCC_OscConfig+0x4f8>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d0f0      	beq.n	80056fe <HAL_RCC_OscConfig+0x4d6>
 800571c:	e01b      	b.n	8005756 <HAL_RCC_OscConfig+0x52e>
 800571e:	bf00      	nop
 8005720:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005724:	4b9b      	ldr	r3, [pc, #620]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a9a      	ldr	r2, [pc, #616]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 800572a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800572e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005730:	f7fc fa12 	bl	8001b58 <HAL_GetTick>
 8005734:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005738:	f7fc fa0e 	bl	8001b58 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e1c0      	b.n	8005acc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800574a:	4b92      	ldr	r3, [pc, #584]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1f0      	bne.n	8005738 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0304 	and.w	r3, r3, #4
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 8081 	beq.w	8005866 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005764:	4b8c      	ldr	r3, [pc, #560]	@ (8005998 <HAL_RCC_OscConfig+0x770>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a8b      	ldr	r2, [pc, #556]	@ (8005998 <HAL_RCC_OscConfig+0x770>)
 800576a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800576e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005770:	f7fc f9f2 	bl	8001b58 <HAL_GetTick>
 8005774:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005776:	e008      	b.n	800578a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005778:	f7fc f9ee 	bl	8001b58 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b64      	cmp	r3, #100	@ 0x64
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e1a0      	b.n	8005acc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800578a:	4b83      	ldr	r3, [pc, #524]	@ (8005998 <HAL_RCC_OscConfig+0x770>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005792:	2b00      	cmp	r3, #0
 8005794:	d0f0      	beq.n	8005778 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d106      	bne.n	80057ac <HAL_RCC_OscConfig+0x584>
 800579e:	4b7d      	ldr	r3, [pc, #500]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 80057a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057a2:	4a7c      	ldr	r2, [pc, #496]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 80057a4:	f043 0301 	orr.w	r3, r3, #1
 80057a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80057aa:	e02d      	b.n	8005808 <HAL_RCC_OscConfig+0x5e0>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10c      	bne.n	80057ce <HAL_RCC_OscConfig+0x5a6>
 80057b4:	4b77      	ldr	r3, [pc, #476]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 80057b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b8:	4a76      	ldr	r2, [pc, #472]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 80057ba:	f023 0301 	bic.w	r3, r3, #1
 80057be:	6713      	str	r3, [r2, #112]	@ 0x70
 80057c0:	4b74      	ldr	r3, [pc, #464]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 80057c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c4:	4a73      	ldr	r2, [pc, #460]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 80057c6:	f023 0304 	bic.w	r3, r3, #4
 80057ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80057cc:	e01c      	b.n	8005808 <HAL_RCC_OscConfig+0x5e0>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	2b05      	cmp	r3, #5
 80057d4:	d10c      	bne.n	80057f0 <HAL_RCC_OscConfig+0x5c8>
 80057d6:	4b6f      	ldr	r3, [pc, #444]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 80057d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057da:	4a6e      	ldr	r2, [pc, #440]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 80057dc:	f043 0304 	orr.w	r3, r3, #4
 80057e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80057e2:	4b6c      	ldr	r3, [pc, #432]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 80057e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057e6:	4a6b      	ldr	r2, [pc, #428]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 80057e8:	f043 0301 	orr.w	r3, r3, #1
 80057ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80057ee:	e00b      	b.n	8005808 <HAL_RCC_OscConfig+0x5e0>
 80057f0:	4b68      	ldr	r3, [pc, #416]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 80057f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f4:	4a67      	ldr	r2, [pc, #412]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 80057f6:	f023 0301 	bic.w	r3, r3, #1
 80057fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80057fc:	4b65      	ldr	r3, [pc, #404]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 80057fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005800:	4a64      	ldr	r2, [pc, #400]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 8005802:	f023 0304 	bic.w	r3, r3, #4
 8005806:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d015      	beq.n	800583c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005810:	f7fc f9a2 	bl	8001b58 <HAL_GetTick>
 8005814:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005816:	e00a      	b.n	800582e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005818:	f7fc f99e 	bl	8001b58 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005826:	4293      	cmp	r3, r2
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e14e      	b.n	8005acc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800582e:	4b59      	ldr	r3, [pc, #356]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 8005830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0ee      	beq.n	8005818 <HAL_RCC_OscConfig+0x5f0>
 800583a:	e014      	b.n	8005866 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800583c:	f7fc f98c 	bl	8001b58 <HAL_GetTick>
 8005840:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005842:	e00a      	b.n	800585a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005844:	f7fc f988 	bl	8001b58 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005852:	4293      	cmp	r3, r2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e138      	b.n	8005acc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800585a:	4b4e      	ldr	r3, [pc, #312]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 800585c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1ee      	bne.n	8005844 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 812d 	beq.w	8005aca <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005870:	4b48      	ldr	r3, [pc, #288]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005878:	2b18      	cmp	r3, #24
 800587a:	f000 80bd 	beq.w	80059f8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005882:	2b02      	cmp	r3, #2
 8005884:	f040 809e 	bne.w	80059c4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005888:	4b42      	ldr	r3, [pc, #264]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a41      	ldr	r2, [pc, #260]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 800588e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005894:	f7fc f960 	bl	8001b58 <HAL_GetTick>
 8005898:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800589a:	e008      	b.n	80058ae <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800589c:	f7fc f95c 	bl	8001b58 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e10e      	b.n	8005acc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058ae:	4b39      	ldr	r3, [pc, #228]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1f0      	bne.n	800589c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058ba:	4b36      	ldr	r3, [pc, #216]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 80058bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058be:	4b37      	ldr	r3, [pc, #220]	@ (800599c <HAL_RCC_OscConfig+0x774>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80058ca:	0112      	lsls	r2, r2, #4
 80058cc:	430a      	orrs	r2, r1
 80058ce:	4931      	ldr	r1, [pc, #196]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d8:	3b01      	subs	r3, #1
 80058da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058e2:	3b01      	subs	r3, #1
 80058e4:	025b      	lsls	r3, r3, #9
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	431a      	orrs	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ee:	3b01      	subs	r3, #1
 80058f0:	041b      	lsls	r3, r3, #16
 80058f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80058f6:	431a      	orrs	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fc:	3b01      	subs	r3, #1
 80058fe:	061b      	lsls	r3, r3, #24
 8005900:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005904:	4923      	ldr	r1, [pc, #140]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 8005906:	4313      	orrs	r3, r2
 8005908:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800590a:	4b22      	ldr	r3, [pc, #136]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 800590c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590e:	4a21      	ldr	r2, [pc, #132]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 8005910:	f023 0301 	bic.w	r3, r3, #1
 8005914:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005916:	4b1f      	ldr	r3, [pc, #124]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 8005918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800591a:	4b21      	ldr	r3, [pc, #132]	@ (80059a0 <HAL_RCC_OscConfig+0x778>)
 800591c:	4013      	ands	r3, r2
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005922:	00d2      	lsls	r2, r2, #3
 8005924:	491b      	ldr	r1, [pc, #108]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 8005926:	4313      	orrs	r3, r2
 8005928:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800592a:	4b1a      	ldr	r3, [pc, #104]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 800592c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592e:	f023 020c 	bic.w	r2, r3, #12
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005936:	4917      	ldr	r1, [pc, #92]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 8005938:	4313      	orrs	r3, r2
 800593a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800593c:	4b15      	ldr	r3, [pc, #84]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 800593e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005940:	f023 0202 	bic.w	r2, r3, #2
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005948:	4912      	ldr	r1, [pc, #72]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 800594a:	4313      	orrs	r3, r2
 800594c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800594e:	4b11      	ldr	r3, [pc, #68]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 8005950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005952:	4a10      	ldr	r2, [pc, #64]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 8005954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005958:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800595a:	4b0e      	ldr	r3, [pc, #56]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 800595c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595e:	4a0d      	ldr	r2, [pc, #52]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 8005960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005964:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005966:	4b0b      	ldr	r3, [pc, #44]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 8005968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596a:	4a0a      	ldr	r2, [pc, #40]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 800596c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005970:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005972:	4b08      	ldr	r3, [pc, #32]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 8005974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005976:	4a07      	ldr	r2, [pc, #28]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 8005978:	f043 0301 	orr.w	r3, r3, #1
 800597c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800597e:	4b05      	ldr	r3, [pc, #20]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a04      	ldr	r2, [pc, #16]	@ (8005994 <HAL_RCC_OscConfig+0x76c>)
 8005984:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598a:	f7fc f8e5 	bl	8001b58 <HAL_GetTick>
 800598e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005990:	e011      	b.n	80059b6 <HAL_RCC_OscConfig+0x78e>
 8005992:	bf00      	nop
 8005994:	58024400 	.word	0x58024400
 8005998:	58024800 	.word	0x58024800
 800599c:	fffffc0c 	.word	0xfffffc0c
 80059a0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059a4:	f7fc f8d8 	bl	8001b58 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e08a      	b.n	8005acc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059b6:	4b47      	ldr	r3, [pc, #284]	@ (8005ad4 <HAL_RCC_OscConfig+0x8ac>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0f0      	beq.n	80059a4 <HAL_RCC_OscConfig+0x77c>
 80059c2:	e082      	b.n	8005aca <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059c4:	4b43      	ldr	r3, [pc, #268]	@ (8005ad4 <HAL_RCC_OscConfig+0x8ac>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a42      	ldr	r2, [pc, #264]	@ (8005ad4 <HAL_RCC_OscConfig+0x8ac>)
 80059ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d0:	f7fc f8c2 	bl	8001b58 <HAL_GetTick>
 80059d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d8:	f7fc f8be 	bl	8001b58 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e070      	b.n	8005acc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059ea:	4b3a      	ldr	r3, [pc, #232]	@ (8005ad4 <HAL_RCC_OscConfig+0x8ac>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1f0      	bne.n	80059d8 <HAL_RCC_OscConfig+0x7b0>
 80059f6:	e068      	b.n	8005aca <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80059f8:	4b36      	ldr	r3, [pc, #216]	@ (8005ad4 <HAL_RCC_OscConfig+0x8ac>)
 80059fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80059fe:	4b35      	ldr	r3, [pc, #212]	@ (8005ad4 <HAL_RCC_OscConfig+0x8ac>)
 8005a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a02:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d031      	beq.n	8005a70 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f003 0203 	and.w	r2, r3, #3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d12a      	bne.n	8005a70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	091b      	lsrs	r3, r3, #4
 8005a1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d122      	bne.n	8005a70 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a34:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d11a      	bne.n	8005a70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	0a5b      	lsrs	r3, r3, #9
 8005a3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a46:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d111      	bne.n	8005a70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	0c1b      	lsrs	r3, r3, #16
 8005a50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a58:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d108      	bne.n	8005a70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	0e1b      	lsrs	r3, r3, #24
 8005a62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a6a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d001      	beq.n	8005a74 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e02b      	b.n	8005acc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005a74:	4b17      	ldr	r3, [pc, #92]	@ (8005ad4 <HAL_RCC_OscConfig+0x8ac>)
 8005a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a78:	08db      	lsrs	r3, r3, #3
 8005a7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a7e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d01f      	beq.n	8005aca <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005a8a:	4b12      	ldr	r3, [pc, #72]	@ (8005ad4 <HAL_RCC_OscConfig+0x8ac>)
 8005a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8e:	4a11      	ldr	r2, [pc, #68]	@ (8005ad4 <HAL_RCC_OscConfig+0x8ac>)
 8005a90:	f023 0301 	bic.w	r3, r3, #1
 8005a94:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a96:	f7fc f85f 	bl	8001b58 <HAL_GetTick>
 8005a9a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005a9c:	bf00      	nop
 8005a9e:	f7fc f85b 	bl	8001b58 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d0f9      	beq.n	8005a9e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad4 <HAL_RCC_OscConfig+0x8ac>)
 8005aac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005aae:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad8 <HAL_RCC_OscConfig+0x8b0>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005ab6:	00d2      	lsls	r2, r2, #3
 8005ab8:	4906      	ldr	r1, [pc, #24]	@ (8005ad4 <HAL_RCC_OscConfig+0x8ac>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005abe:	4b05      	ldr	r3, [pc, #20]	@ (8005ad4 <HAL_RCC_OscConfig+0x8ac>)
 8005ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac2:	4a04      	ldr	r2, [pc, #16]	@ (8005ad4 <HAL_RCC_OscConfig+0x8ac>)
 8005ac4:	f043 0301 	orr.w	r3, r3, #1
 8005ac8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3730      	adds	r7, #48	@ 0x30
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	58024400 	.word	0x58024400
 8005ad8:	ffff0007 	.word	0xffff0007

08005adc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e19c      	b.n	8005e2a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005af0:	4b8a      	ldr	r3, [pc, #552]	@ (8005d1c <HAL_RCC_ClockConfig+0x240>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 030f 	and.w	r3, r3, #15
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d910      	bls.n	8005b20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005afe:	4b87      	ldr	r3, [pc, #540]	@ (8005d1c <HAL_RCC_ClockConfig+0x240>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f023 020f 	bic.w	r2, r3, #15
 8005b06:	4985      	ldr	r1, [pc, #532]	@ (8005d1c <HAL_RCC_ClockConfig+0x240>)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0e:	4b83      	ldr	r3, [pc, #524]	@ (8005d1c <HAL_RCC_ClockConfig+0x240>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 030f 	and.w	r3, r3, #15
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d001      	beq.n	8005b20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e184      	b.n	8005e2a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d010      	beq.n	8005b4e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691a      	ldr	r2, [r3, #16]
 8005b30:	4b7b      	ldr	r3, [pc, #492]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d908      	bls.n	8005b4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b3c:	4b78      	ldr	r3, [pc, #480]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	4975      	ldr	r1, [pc, #468]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0308 	and.w	r3, r3, #8
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d010      	beq.n	8005b7c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695a      	ldr	r2, [r3, #20]
 8005b5e:	4b70      	ldr	r3, [pc, #448]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d908      	bls.n	8005b7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b6a:	4b6d      	ldr	r3, [pc, #436]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	496a      	ldr	r1, [pc, #424]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0310 	and.w	r3, r3, #16
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d010      	beq.n	8005baa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	699a      	ldr	r2, [r3, #24]
 8005b8c:	4b64      	ldr	r3, [pc, #400]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d908      	bls.n	8005baa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b98:	4b61      	ldr	r3, [pc, #388]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	495e      	ldr	r1, [pc, #376]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d010      	beq.n	8005bd8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	69da      	ldr	r2, [r3, #28]
 8005bba:	4b59      	ldr	r3, [pc, #356]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d908      	bls.n	8005bd8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005bc6:	4b56      	ldr	r3, [pc, #344]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	4953      	ldr	r1, [pc, #332]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d010      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68da      	ldr	r2, [r3, #12]
 8005be8:	4b4d      	ldr	r3, [pc, #308]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	f003 030f 	and.w	r3, r3, #15
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d908      	bls.n	8005c06 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bf4:	4b4a      	ldr	r3, [pc, #296]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	f023 020f 	bic.w	r2, r3, #15
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	4947      	ldr	r1, [pc, #284]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d055      	beq.n	8005cbe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005c12:	4b43      	ldr	r3, [pc, #268]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	4940      	ldr	r1, [pc, #256]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d107      	bne.n	8005c3c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c2c:	4b3c      	ldr	r3, [pc, #240]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d121      	bne.n	8005c7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0f6      	b.n	8005e2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d107      	bne.n	8005c54 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c44:	4b36      	ldr	r3, [pc, #216]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d115      	bne.n	8005c7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e0ea      	b.n	8005e2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d107      	bne.n	8005c6c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c5c:	4b30      	ldr	r3, [pc, #192]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d109      	bne.n	8005c7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e0de      	b.n	8005e2a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e0d6      	b.n	8005e2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c7c:	4b28      	ldr	r3, [pc, #160]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	f023 0207 	bic.w	r2, r3, #7
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	4925      	ldr	r1, [pc, #148]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c8e:	f7fb ff63 	bl	8001b58 <HAL_GetTick>
 8005c92:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c94:	e00a      	b.n	8005cac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c96:	f7fb ff5f 	bl	8001b58 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d901      	bls.n	8005cac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e0be      	b.n	8005e2a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cac:	4b1c      	ldr	r3, [pc, #112]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d1eb      	bne.n	8005c96 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d010      	beq.n	8005cec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	4b14      	ldr	r3, [pc, #80]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d208      	bcs.n	8005cec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cda:	4b11      	ldr	r3, [pc, #68]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	f023 020f 	bic.w	r2, r3, #15
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	490e      	ldr	r1, [pc, #56]	@ (8005d20 <HAL_RCC_ClockConfig+0x244>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cec:	4b0b      	ldr	r3, [pc, #44]	@ (8005d1c <HAL_RCC_ClockConfig+0x240>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 030f 	and.w	r3, r3, #15
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d214      	bcs.n	8005d24 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cfa:	4b08      	ldr	r3, [pc, #32]	@ (8005d1c <HAL_RCC_ClockConfig+0x240>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f023 020f 	bic.w	r2, r3, #15
 8005d02:	4906      	ldr	r1, [pc, #24]	@ (8005d1c <HAL_RCC_ClockConfig+0x240>)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d0a:	4b04      	ldr	r3, [pc, #16]	@ (8005d1c <HAL_RCC_ClockConfig+0x240>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d005      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e086      	b.n	8005e2a <HAL_RCC_ClockConfig+0x34e>
 8005d1c:	52002000 	.word	0x52002000
 8005d20:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d010      	beq.n	8005d52 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	4b3f      	ldr	r3, [pc, #252]	@ (8005e34 <HAL_RCC_ClockConfig+0x358>)
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d208      	bcs.n	8005d52 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d40:	4b3c      	ldr	r3, [pc, #240]	@ (8005e34 <HAL_RCC_ClockConfig+0x358>)
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	4939      	ldr	r1, [pc, #228]	@ (8005e34 <HAL_RCC_ClockConfig+0x358>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0308 	and.w	r3, r3, #8
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d010      	beq.n	8005d80 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	695a      	ldr	r2, [r3, #20]
 8005d62:	4b34      	ldr	r3, [pc, #208]	@ (8005e34 <HAL_RCC_ClockConfig+0x358>)
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d208      	bcs.n	8005d80 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d6e:	4b31      	ldr	r3, [pc, #196]	@ (8005e34 <HAL_RCC_ClockConfig+0x358>)
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	492e      	ldr	r1, [pc, #184]	@ (8005e34 <HAL_RCC_ClockConfig+0x358>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0310 	and.w	r3, r3, #16
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d010      	beq.n	8005dae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	699a      	ldr	r2, [r3, #24]
 8005d90:	4b28      	ldr	r3, [pc, #160]	@ (8005e34 <HAL_RCC_ClockConfig+0x358>)
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d208      	bcs.n	8005dae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d9c:	4b25      	ldr	r3, [pc, #148]	@ (8005e34 <HAL_RCC_ClockConfig+0x358>)
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	4922      	ldr	r1, [pc, #136]	@ (8005e34 <HAL_RCC_ClockConfig+0x358>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0320 	and.w	r3, r3, #32
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d010      	beq.n	8005ddc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	69da      	ldr	r2, [r3, #28]
 8005dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8005e34 <HAL_RCC_ClockConfig+0x358>)
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d208      	bcs.n	8005ddc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005dca:	4b1a      	ldr	r3, [pc, #104]	@ (8005e34 <HAL_RCC_ClockConfig+0x358>)
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	4917      	ldr	r1, [pc, #92]	@ (8005e34 <HAL_RCC_ClockConfig+0x358>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ddc:	f000 f834 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 8005de0:	4602      	mov	r2, r0
 8005de2:	4b14      	ldr	r3, [pc, #80]	@ (8005e34 <HAL_RCC_ClockConfig+0x358>)
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	0a1b      	lsrs	r3, r3, #8
 8005de8:	f003 030f 	and.w	r3, r3, #15
 8005dec:	4912      	ldr	r1, [pc, #72]	@ (8005e38 <HAL_RCC_ClockConfig+0x35c>)
 8005dee:	5ccb      	ldrb	r3, [r1, r3]
 8005df0:	f003 031f 	and.w	r3, r3, #31
 8005df4:	fa22 f303 	lsr.w	r3, r2, r3
 8005df8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8005e34 <HAL_RCC_ClockConfig+0x358>)
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	f003 030f 	and.w	r3, r3, #15
 8005e02:	4a0d      	ldr	r2, [pc, #52]	@ (8005e38 <HAL_RCC_ClockConfig+0x35c>)
 8005e04:	5cd3      	ldrb	r3, [r2, r3]
 8005e06:	f003 031f 	and.w	r3, r3, #31
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e10:	4a0a      	ldr	r2, [pc, #40]	@ (8005e3c <HAL_RCC_ClockConfig+0x360>)
 8005e12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e14:	4a0a      	ldr	r2, [pc, #40]	@ (8005e40 <HAL_RCC_ClockConfig+0x364>)
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8005e44 <HAL_RCC_ClockConfig+0x368>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fb fe50 	bl	8001ac4 <HAL_InitTick>
 8005e24:	4603      	mov	r3, r0
 8005e26:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	58024400 	.word	0x58024400
 8005e38:	08009da0 	.word	0x08009da0
 8005e3c:	24000008 	.word	0x24000008
 8005e40:	24000004 	.word	0x24000004
 8005e44:	2400000c 	.word	0x2400000c

08005e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b089      	sub	sp, #36	@ 0x24
 8005e4c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e4e:	4bb3      	ldr	r3, [pc, #716]	@ (800611c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e56:	2b18      	cmp	r3, #24
 8005e58:	f200 8155 	bhi.w	8006106 <HAL_RCC_GetSysClockFreq+0x2be>
 8005e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e64 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e62:	bf00      	nop
 8005e64:	08005ec9 	.word	0x08005ec9
 8005e68:	08006107 	.word	0x08006107
 8005e6c:	08006107 	.word	0x08006107
 8005e70:	08006107 	.word	0x08006107
 8005e74:	08006107 	.word	0x08006107
 8005e78:	08006107 	.word	0x08006107
 8005e7c:	08006107 	.word	0x08006107
 8005e80:	08006107 	.word	0x08006107
 8005e84:	08005eef 	.word	0x08005eef
 8005e88:	08006107 	.word	0x08006107
 8005e8c:	08006107 	.word	0x08006107
 8005e90:	08006107 	.word	0x08006107
 8005e94:	08006107 	.word	0x08006107
 8005e98:	08006107 	.word	0x08006107
 8005e9c:	08006107 	.word	0x08006107
 8005ea0:	08006107 	.word	0x08006107
 8005ea4:	08005ef5 	.word	0x08005ef5
 8005ea8:	08006107 	.word	0x08006107
 8005eac:	08006107 	.word	0x08006107
 8005eb0:	08006107 	.word	0x08006107
 8005eb4:	08006107 	.word	0x08006107
 8005eb8:	08006107 	.word	0x08006107
 8005ebc:	08006107 	.word	0x08006107
 8005ec0:	08006107 	.word	0x08006107
 8005ec4:	08005efb 	.word	0x08005efb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ec8:	4b94      	ldr	r3, [pc, #592]	@ (800611c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0320 	and.w	r3, r3, #32
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d009      	beq.n	8005ee8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ed4:	4b91      	ldr	r3, [pc, #580]	@ (800611c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	08db      	lsrs	r3, r3, #3
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	4a90      	ldr	r2, [pc, #576]	@ (8006120 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005ee6:	e111      	b.n	800610c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ee8:	4b8d      	ldr	r3, [pc, #564]	@ (8006120 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005eea:	61bb      	str	r3, [r7, #24]
      break;
 8005eec:	e10e      	b.n	800610c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005eee:	4b8d      	ldr	r3, [pc, #564]	@ (8006124 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005ef0:	61bb      	str	r3, [r7, #24]
      break;
 8005ef2:	e10b      	b.n	800610c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005ef4:	4b8c      	ldr	r3, [pc, #560]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005ef6:	61bb      	str	r3, [r7, #24]
      break;
 8005ef8:	e108      	b.n	800610c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005efa:	4b88      	ldr	r3, [pc, #544]	@ (800611c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efe:	f003 0303 	and.w	r3, r3, #3
 8005f02:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005f04:	4b85      	ldr	r3, [pc, #532]	@ (800611c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f08:	091b      	lsrs	r3, r3, #4
 8005f0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f0e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005f10:	4b82      	ldr	r3, [pc, #520]	@ (800611c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005f1a:	4b80      	ldr	r3, [pc, #512]	@ (800611c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f1e:	08db      	lsrs	r3, r3, #3
 8005f20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	fb02 f303 	mul.w	r3, r2, r3
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f32:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 80e1 	beq.w	8006100 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	f000 8083 	beq.w	800604c <HAL_RCC_GetSysClockFreq+0x204>
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	f200 80a1 	bhi.w	8006090 <HAL_RCC_GetSysClockFreq+0x248>
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <HAL_RCC_GetSysClockFreq+0x114>
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d056      	beq.n	8006008 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005f5a:	e099      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f5c:	4b6f      	ldr	r3, [pc, #444]	@ (800611c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d02d      	beq.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f68:	4b6c      	ldr	r3, [pc, #432]	@ (800611c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	08db      	lsrs	r3, r3, #3
 8005f6e:	f003 0303 	and.w	r3, r3, #3
 8005f72:	4a6b      	ldr	r2, [pc, #428]	@ (8006120 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f74:	fa22 f303 	lsr.w	r3, r2, r3
 8005f78:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	ee07 3a90 	vmov	s15, r3
 8005f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	ee07 3a90 	vmov	s15, r3
 8005f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f92:	4b62      	ldr	r3, [pc, #392]	@ (800611c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fa6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800612c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fbe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005fc2:	e087      	b.n	80060d4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fce:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006130 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd6:	4b51      	ldr	r3, [pc, #324]	@ (800611c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fea:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800612c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006002:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006006:	e065      	b.n	80060d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006012:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006134 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800601a:	4b40      	ldr	r3, [pc, #256]	@ (800611c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800601c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800601e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006022:	ee07 3a90 	vmov	s15, r3
 8006026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800602a:	ed97 6a02 	vldr	s12, [r7, #8]
 800602e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800612c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800603a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800603e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006046:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800604a:	e043      	b.n	80060d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	ee07 3a90 	vmov	s15, r3
 8006052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006056:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006138 <HAL_RCC_GetSysClockFreq+0x2f0>
 800605a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800605e:	4b2f      	ldr	r3, [pc, #188]	@ (800611c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006066:	ee07 3a90 	vmov	s15, r3
 800606a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006072:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800612c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800607a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800608a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800608e:	e021      	b.n	80060d4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	ee07 3a90 	vmov	s15, r3
 8006096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800609a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006134 <HAL_RCC_GetSysClockFreq+0x2ec>
 800609e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060a2:	4b1e      	ldr	r3, [pc, #120]	@ (800611c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060aa:	ee07 3a90 	vmov	s15, r3
 80060ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80060b6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800612c <HAL_RCC_GetSysClockFreq+0x2e4>
 80060ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80060d2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80060d4:	4b11      	ldr	r3, [pc, #68]	@ (800611c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d8:	0a5b      	lsrs	r3, r3, #9
 80060da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060de:	3301      	adds	r3, #1
 80060e0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	ee07 3a90 	vmov	s15, r3
 80060e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80060f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060f8:	ee17 3a90 	vmov	r3, s15
 80060fc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80060fe:	e005      	b.n	800610c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	61bb      	str	r3, [r7, #24]
      break;
 8006104:	e002      	b.n	800610c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006106:	4b07      	ldr	r3, [pc, #28]	@ (8006124 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006108:	61bb      	str	r3, [r7, #24]
      break;
 800610a:	bf00      	nop
  }

  return sysclockfreq;
 800610c:	69bb      	ldr	r3, [r7, #24]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3724      	adds	r7, #36	@ 0x24
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	58024400 	.word	0x58024400
 8006120:	03d09000 	.word	0x03d09000
 8006124:	003d0900 	.word	0x003d0900
 8006128:	00f42400 	.word	0x00f42400
 800612c:	46000000 	.word	0x46000000
 8006130:	4c742400 	.word	0x4c742400
 8006134:	4a742400 	.word	0x4a742400
 8006138:	4b742400 	.word	0x4b742400

0800613c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006142:	f7ff fe81 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 8006146:	4602      	mov	r2, r0
 8006148:	4b10      	ldr	r3, [pc, #64]	@ (800618c <HAL_RCC_GetHCLKFreq+0x50>)
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	0a1b      	lsrs	r3, r3, #8
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	490f      	ldr	r1, [pc, #60]	@ (8006190 <HAL_RCC_GetHCLKFreq+0x54>)
 8006154:	5ccb      	ldrb	r3, [r1, r3]
 8006156:	f003 031f 	and.w	r3, r3, #31
 800615a:	fa22 f303 	lsr.w	r3, r2, r3
 800615e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006160:	4b0a      	ldr	r3, [pc, #40]	@ (800618c <HAL_RCC_GetHCLKFreq+0x50>)
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	f003 030f 	and.w	r3, r3, #15
 8006168:	4a09      	ldr	r2, [pc, #36]	@ (8006190 <HAL_RCC_GetHCLKFreq+0x54>)
 800616a:	5cd3      	ldrb	r3, [r2, r3]
 800616c:	f003 031f 	and.w	r3, r3, #31
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	fa22 f303 	lsr.w	r3, r2, r3
 8006176:	4a07      	ldr	r2, [pc, #28]	@ (8006194 <HAL_RCC_GetHCLKFreq+0x58>)
 8006178:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800617a:	4a07      	ldr	r2, [pc, #28]	@ (8006198 <HAL_RCC_GetHCLKFreq+0x5c>)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006180:	4b04      	ldr	r3, [pc, #16]	@ (8006194 <HAL_RCC_GetHCLKFreq+0x58>)
 8006182:	681b      	ldr	r3, [r3, #0]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	58024400 	.word	0x58024400
 8006190:	08009da0 	.word	0x08009da0
 8006194:	24000008 	.word	0x24000008
 8006198:	24000004 	.word	0x24000004

0800619c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80061a0:	f7ff ffcc 	bl	800613c <HAL_RCC_GetHCLKFreq>
 80061a4:	4602      	mov	r2, r0
 80061a6:	4b06      	ldr	r3, [pc, #24]	@ (80061c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	091b      	lsrs	r3, r3, #4
 80061ac:	f003 0307 	and.w	r3, r3, #7
 80061b0:	4904      	ldr	r1, [pc, #16]	@ (80061c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061b2:	5ccb      	ldrb	r3, [r1, r3]
 80061b4:	f003 031f 	and.w	r3, r3, #31
 80061b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80061bc:	4618      	mov	r0, r3
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	58024400 	.word	0x58024400
 80061c4:	08009da0 	.word	0x08009da0

080061c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061cc:	b0ca      	sub	sp, #296	@ 0x128
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061d4:	2300      	movs	r3, #0
 80061d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061da:	2300      	movs	r3, #0
 80061dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80061ec:	2500      	movs	r5, #0
 80061ee:	ea54 0305 	orrs.w	r3, r4, r5
 80061f2:	d049      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80061f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061fe:	d02f      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006200:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006204:	d828      	bhi.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006206:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800620a:	d01a      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800620c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006210:	d822      	bhi.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006216:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800621a:	d007      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800621c:	e01c      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800621e:	4bb8      	ldr	r3, [pc, #736]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006222:	4ab7      	ldr	r2, [pc, #732]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006228:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800622a:	e01a      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800622c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006230:	3308      	adds	r3, #8
 8006232:	2102      	movs	r1, #2
 8006234:	4618      	mov	r0, r3
 8006236:	f002 fb61 	bl	80088fc <RCCEx_PLL2_Config>
 800623a:	4603      	mov	r3, r0
 800623c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006240:	e00f      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006246:	3328      	adds	r3, #40	@ 0x28
 8006248:	2102      	movs	r1, #2
 800624a:	4618      	mov	r0, r3
 800624c:	f002 fc08 	bl	8008a60 <RCCEx_PLL3_Config>
 8006250:	4603      	mov	r3, r0
 8006252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006256:	e004      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800625e:	e000      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10a      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800626a:	4ba5      	ldr	r3, [pc, #660]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800626c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800626e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006276:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006278:	4aa1      	ldr	r2, [pc, #644]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800627a:	430b      	orrs	r3, r1
 800627c:	6513      	str	r3, [r2, #80]	@ 0x50
 800627e:	e003      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006280:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006284:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006290:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006294:	f04f 0900 	mov.w	r9, #0
 8006298:	ea58 0309 	orrs.w	r3, r8, r9
 800629c:	d047      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800629e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a4:	2b04      	cmp	r3, #4
 80062a6:	d82a      	bhi.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 80062a8:	a201      	add	r2, pc, #4	@ (adr r2, 80062b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80062aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ae:	bf00      	nop
 80062b0:	080062c5 	.word	0x080062c5
 80062b4:	080062d3 	.word	0x080062d3
 80062b8:	080062e9 	.word	0x080062e9
 80062bc:	08006307 	.word	0x08006307
 80062c0:	08006307 	.word	0x08006307
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062c4:	4b8e      	ldr	r3, [pc, #568]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c8:	4a8d      	ldr	r2, [pc, #564]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062d0:	e01a      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d6:	3308      	adds	r3, #8
 80062d8:	2100      	movs	r1, #0
 80062da:	4618      	mov	r0, r3
 80062dc:	f002 fb0e 	bl	80088fc <RCCEx_PLL2_Config>
 80062e0:	4603      	mov	r3, r0
 80062e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062e6:	e00f      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ec:	3328      	adds	r3, #40	@ 0x28
 80062ee:	2100      	movs	r1, #0
 80062f0:	4618      	mov	r0, r3
 80062f2:	f002 fbb5 	bl	8008a60 <RCCEx_PLL3_Config>
 80062f6:	4603      	mov	r3, r0
 80062f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062fc:	e004      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006304:	e000      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006306:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006308:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10a      	bne.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006310:	4b7b      	ldr	r3, [pc, #492]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006314:	f023 0107 	bic.w	r1, r3, #7
 8006318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800631e:	4a78      	ldr	r2, [pc, #480]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006320:	430b      	orrs	r3, r1
 8006322:	6513      	str	r3, [r2, #80]	@ 0x50
 8006324:	e003      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800632a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800632e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006336:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800633a:	f04f 0b00 	mov.w	fp, #0
 800633e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006342:	d04c      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800634a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800634e:	d030      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006350:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006354:	d829      	bhi.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006356:	2bc0      	cmp	r3, #192	@ 0xc0
 8006358:	d02d      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800635a:	2bc0      	cmp	r3, #192	@ 0xc0
 800635c:	d825      	bhi.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800635e:	2b80      	cmp	r3, #128	@ 0x80
 8006360:	d018      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006362:	2b80      	cmp	r3, #128	@ 0x80
 8006364:	d821      	bhi.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006366:	2b00      	cmp	r3, #0
 8006368:	d002      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800636a:	2b40      	cmp	r3, #64	@ 0x40
 800636c:	d007      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800636e:	e01c      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006370:	4b63      	ldr	r3, [pc, #396]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006374:	4a62      	ldr	r2, [pc, #392]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800637a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800637c:	e01c      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800637e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006382:	3308      	adds	r3, #8
 8006384:	2100      	movs	r1, #0
 8006386:	4618      	mov	r0, r3
 8006388:	f002 fab8 	bl	80088fc <RCCEx_PLL2_Config>
 800638c:	4603      	mov	r3, r0
 800638e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006392:	e011      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006398:	3328      	adds	r3, #40	@ 0x28
 800639a:	2100      	movs	r1, #0
 800639c:	4618      	mov	r0, r3
 800639e:	f002 fb5f 	bl	8008a60 <RCCEx_PLL3_Config>
 80063a2:	4603      	mov	r3, r0
 80063a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80063a8:	e006      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063b0:	e002      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80063b2:	bf00      	nop
 80063b4:	e000      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80063b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10a      	bne.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80063c0:	4b4f      	ldr	r3, [pc, #316]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063c4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80063c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063ce:	4a4c      	ldr	r2, [pc, #304]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063d0:	430b      	orrs	r3, r1
 80063d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80063d4:	e003      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80063de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80063ea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80063ee:	2300      	movs	r3, #0
 80063f0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80063f4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80063f8:	460b      	mov	r3, r1
 80063fa:	4313      	orrs	r3, r2
 80063fc:	d053      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80063fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006402:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006406:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800640a:	d035      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800640c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006410:	d82e      	bhi.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006412:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006416:	d031      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006418:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800641c:	d828      	bhi.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800641e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006422:	d01a      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006424:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006428:	d822      	bhi.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800642e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006432:	d007      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006434:	e01c      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006436:	4b32      	ldr	r3, [pc, #200]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643a:	4a31      	ldr	r2, [pc, #196]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800643c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006440:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006442:	e01c      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006448:	3308      	adds	r3, #8
 800644a:	2100      	movs	r1, #0
 800644c:	4618      	mov	r0, r3
 800644e:	f002 fa55 	bl	80088fc <RCCEx_PLL2_Config>
 8006452:	4603      	mov	r3, r0
 8006454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006458:	e011      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800645a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645e:	3328      	adds	r3, #40	@ 0x28
 8006460:	2100      	movs	r1, #0
 8006462:	4618      	mov	r0, r3
 8006464:	f002 fafc 	bl	8008a60 <RCCEx_PLL3_Config>
 8006468:	4603      	mov	r3, r0
 800646a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800646e:	e006      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006476:	e002      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006478:	bf00      	nop
 800647a:	e000      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800647c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800647e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10b      	bne.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006486:	4b1e      	ldr	r3, [pc, #120]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800648a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800648e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006492:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006496:	4a1a      	ldr	r2, [pc, #104]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006498:	430b      	orrs	r3, r1
 800649a:	6593      	str	r3, [r2, #88]	@ 0x58
 800649c:	e003      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800649e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80064a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ae:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80064b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80064b6:	2300      	movs	r3, #0
 80064b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80064bc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80064c0:	460b      	mov	r3, r1
 80064c2:	4313      	orrs	r3, r2
 80064c4:	d056      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80064c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80064ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064d2:	d038      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80064d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064d8:	d831      	bhi.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80064da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80064de:	d034      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80064e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80064e4:	d82b      	bhi.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80064e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064ea:	d01d      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80064ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064f0:	d825      	bhi.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d006      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80064f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064fa:	d00a      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80064fc:	e01f      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80064fe:	bf00      	nop
 8006500:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006504:	4ba2      	ldr	r3, [pc, #648]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006508:	4aa1      	ldr	r2, [pc, #644]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800650a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800650e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006510:	e01c      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006516:	3308      	adds	r3, #8
 8006518:	2100      	movs	r1, #0
 800651a:	4618      	mov	r0, r3
 800651c:	f002 f9ee 	bl	80088fc <RCCEx_PLL2_Config>
 8006520:	4603      	mov	r3, r0
 8006522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006526:	e011      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800652c:	3328      	adds	r3, #40	@ 0x28
 800652e:	2100      	movs	r1, #0
 8006530:	4618      	mov	r0, r3
 8006532:	f002 fa95 	bl	8008a60 <RCCEx_PLL3_Config>
 8006536:	4603      	mov	r3, r0
 8006538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800653c:	e006      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006544:	e002      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006546:	bf00      	nop
 8006548:	e000      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800654a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800654c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10b      	bne.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006554:	4b8e      	ldr	r3, [pc, #568]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006558:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800655c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006560:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006564:	4a8a      	ldr	r2, [pc, #552]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006566:	430b      	orrs	r3, r1
 8006568:	6593      	str	r3, [r2, #88]	@ 0x58
 800656a:	e003      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800656c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006570:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006580:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006584:	2300      	movs	r3, #0
 8006586:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800658a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800658e:	460b      	mov	r3, r1
 8006590:	4313      	orrs	r3, r2
 8006592:	d03a      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800659a:	2b30      	cmp	r3, #48	@ 0x30
 800659c:	d01f      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x416>
 800659e:	2b30      	cmp	r3, #48	@ 0x30
 80065a0:	d819      	bhi.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80065a2:	2b20      	cmp	r3, #32
 80065a4:	d00c      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80065a6:	2b20      	cmp	r3, #32
 80065a8:	d815      	bhi.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d019      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80065ae:	2b10      	cmp	r3, #16
 80065b0:	d111      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065b2:	4b77      	ldr	r3, [pc, #476]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b6:	4a76      	ldr	r2, [pc, #472]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80065be:	e011      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c4:	3308      	adds	r3, #8
 80065c6:	2102      	movs	r1, #2
 80065c8:	4618      	mov	r0, r3
 80065ca:	f002 f997 	bl	80088fc <RCCEx_PLL2_Config>
 80065ce:	4603      	mov	r3, r0
 80065d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80065d4:	e006      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065dc:	e002      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80065de:	bf00      	nop
 80065e0:	e000      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80065e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10a      	bne.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80065ec:	4b68      	ldr	r3, [pc, #416]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065f0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80065f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065fa:	4a65      	ldr	r2, [pc, #404]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065fc:	430b      	orrs	r3, r1
 80065fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006600:	e003      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006606:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800660a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800660e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006612:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006616:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800661a:	2300      	movs	r3, #0
 800661c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006620:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006624:	460b      	mov	r3, r1
 8006626:	4313      	orrs	r3, r2
 8006628:	d051      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800662a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006630:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006634:	d035      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006636:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800663a:	d82e      	bhi.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800663c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006640:	d031      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006642:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006646:	d828      	bhi.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006648:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800664c:	d01a      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800664e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006652:	d822      	bhi.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006658:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800665c:	d007      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800665e:	e01c      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006660:	4b4b      	ldr	r3, [pc, #300]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006664:	4a4a      	ldr	r2, [pc, #296]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006666:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800666a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800666c:	e01c      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800666e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006672:	3308      	adds	r3, #8
 8006674:	2100      	movs	r1, #0
 8006676:	4618      	mov	r0, r3
 8006678:	f002 f940 	bl	80088fc <RCCEx_PLL2_Config>
 800667c:	4603      	mov	r3, r0
 800667e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006682:	e011      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006688:	3328      	adds	r3, #40	@ 0x28
 800668a:	2100      	movs	r1, #0
 800668c:	4618      	mov	r0, r3
 800668e:	f002 f9e7 	bl	8008a60 <RCCEx_PLL3_Config>
 8006692:	4603      	mov	r3, r0
 8006694:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006698:	e006      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066a0:	e002      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80066a2:	bf00      	nop
 80066a4:	e000      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80066a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10a      	bne.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80066b0:	4b37      	ldr	r3, [pc, #220]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066b4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80066b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066be:	4a34      	ldr	r2, [pc, #208]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066c0:	430b      	orrs	r3, r1
 80066c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80066c4:	e003      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80066ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80066da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80066de:	2300      	movs	r3, #0
 80066e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80066e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80066e8:	460b      	mov	r3, r1
 80066ea:	4313      	orrs	r3, r2
 80066ec:	d056      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80066ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066f8:	d033      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80066fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066fe:	d82c      	bhi.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006700:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006704:	d02f      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006706:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800670a:	d826      	bhi.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800670c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006710:	d02b      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006712:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006716:	d820      	bhi.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006718:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800671c:	d012      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800671e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006722:	d81a      	bhi.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006724:	2b00      	cmp	r3, #0
 8006726:	d022      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800672c:	d115      	bne.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800672e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006732:	3308      	adds	r3, #8
 8006734:	2101      	movs	r1, #1
 8006736:	4618      	mov	r0, r3
 8006738:	f002 f8e0 	bl	80088fc <RCCEx_PLL2_Config>
 800673c:	4603      	mov	r3, r0
 800673e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006742:	e015      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006748:	3328      	adds	r3, #40	@ 0x28
 800674a:	2101      	movs	r1, #1
 800674c:	4618      	mov	r0, r3
 800674e:	f002 f987 	bl	8008a60 <RCCEx_PLL3_Config>
 8006752:	4603      	mov	r3, r0
 8006754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006758:	e00a      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006760:	e006      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006762:	bf00      	nop
 8006764:	e004      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006766:	bf00      	nop
 8006768:	e002      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800676a:	bf00      	nop
 800676c:	e000      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800676e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006770:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10d      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006778:	4b05      	ldr	r3, [pc, #20]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800677a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800677c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006784:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006786:	4a02      	ldr	r2, [pc, #8]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006788:	430b      	orrs	r3, r1
 800678a:	6513      	str	r3, [r2, #80]	@ 0x50
 800678c:	e006      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800678e:	bf00      	nop
 8006790:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006794:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006798:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800679c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80067a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80067ac:	2300      	movs	r3, #0
 80067ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80067b2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4313      	orrs	r3, r2
 80067ba:	d055      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80067bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80067c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067c8:	d033      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80067ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067ce:	d82c      	bhi.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067d4:	d02f      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80067d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067da:	d826      	bhi.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067e0:	d02b      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80067e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067e6:	d820      	bhi.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067ec:	d012      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80067ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067f2:	d81a      	bhi.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d022      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80067f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067fc:	d115      	bne.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006802:	3308      	adds	r3, #8
 8006804:	2101      	movs	r1, #1
 8006806:	4618      	mov	r0, r3
 8006808:	f002 f878 	bl	80088fc <RCCEx_PLL2_Config>
 800680c:	4603      	mov	r3, r0
 800680e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006812:	e015      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006818:	3328      	adds	r3, #40	@ 0x28
 800681a:	2101      	movs	r1, #1
 800681c:	4618      	mov	r0, r3
 800681e:	f002 f91f 	bl	8008a60 <RCCEx_PLL3_Config>
 8006822:	4603      	mov	r3, r0
 8006824:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006828:	e00a      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006830:	e006      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006832:	bf00      	nop
 8006834:	e004      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006836:	bf00      	nop
 8006838:	e002      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800683a:	bf00      	nop
 800683c:	e000      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800683e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006840:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10b      	bne.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006848:	4ba3      	ldr	r3, [pc, #652]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800684a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800684c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006854:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006858:	4a9f      	ldr	r2, [pc, #636]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800685a:	430b      	orrs	r3, r1
 800685c:	6593      	str	r3, [r2, #88]	@ 0x58
 800685e:	e003      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006860:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006864:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006874:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006878:	2300      	movs	r3, #0
 800687a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800687e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006882:	460b      	mov	r3, r1
 8006884:	4313      	orrs	r3, r2
 8006886:	d037      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800688c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800688e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006892:	d00e      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006894:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006898:	d816      	bhi.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800689a:	2b00      	cmp	r3, #0
 800689c:	d018      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800689e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068a2:	d111      	bne.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a4:	4b8c      	ldr	r3, [pc, #560]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a8:	4a8b      	ldr	r2, [pc, #556]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80068b0:	e00f      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b6:	3308      	adds	r3, #8
 80068b8:	2101      	movs	r1, #1
 80068ba:	4618      	mov	r0, r3
 80068bc:	f002 f81e 	bl	80088fc <RCCEx_PLL2_Config>
 80068c0:	4603      	mov	r3, r0
 80068c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80068c6:	e004      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068ce:	e000      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80068d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10a      	bne.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80068da:	4b7f      	ldr	r3, [pc, #508]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068de:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80068e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068e8:	4a7b      	ldr	r2, [pc, #492]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068ea:	430b      	orrs	r3, r1
 80068ec:	6513      	str	r3, [r2, #80]	@ 0x50
 80068ee:	e003      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80068f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006900:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006904:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006908:	2300      	movs	r3, #0
 800690a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800690e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006912:	460b      	mov	r3, r1
 8006914:	4313      	orrs	r3, r2
 8006916:	d039      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800691c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800691e:	2b03      	cmp	r3, #3
 8006920:	d81c      	bhi.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006922:	a201      	add	r2, pc, #4	@ (adr r2, 8006928 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006928:	08006965 	.word	0x08006965
 800692c:	08006939 	.word	0x08006939
 8006930:	08006947 	.word	0x08006947
 8006934:	08006965 	.word	0x08006965
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006938:	4b67      	ldr	r3, [pc, #412]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800693a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800693c:	4a66      	ldr	r2, [pc, #408]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800693e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006942:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006944:	e00f      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800694a:	3308      	adds	r3, #8
 800694c:	2102      	movs	r1, #2
 800694e:	4618      	mov	r0, r3
 8006950:	f001 ffd4 	bl	80088fc <RCCEx_PLL2_Config>
 8006954:	4603      	mov	r3, r0
 8006956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800695a:	e004      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006962:	e000      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10a      	bne.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800696e:	4b5a      	ldr	r3, [pc, #360]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006972:	f023 0103 	bic.w	r1, r3, #3
 8006976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800697a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800697c:	4a56      	ldr	r2, [pc, #344]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800697e:	430b      	orrs	r3, r1
 8006980:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006982:	e003      	b.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006984:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006988:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800698c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006994:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006998:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800699c:	2300      	movs	r3, #0
 800699e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80069a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80069a6:	460b      	mov	r3, r1
 80069a8:	4313      	orrs	r3, r2
 80069aa:	f000 809f 	beq.w	8006aec <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069ae:	4b4b      	ldr	r3, [pc, #300]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a4a      	ldr	r2, [pc, #296]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80069b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069ba:	f7fb f8cd 	bl	8001b58 <HAL_GetTick>
 80069be:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069c2:	e00b      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069c4:	f7fb f8c8 	bl	8001b58 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b64      	cmp	r3, #100	@ 0x64
 80069d2:	d903      	bls.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069da:	e005      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069dc:	4b3f      	ldr	r3, [pc, #252]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d0ed      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80069e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d179      	bne.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80069f0:	4b39      	ldr	r3, [pc, #228]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80069f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80069fc:	4053      	eors	r3, r2
 80069fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d015      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a06:	4b34      	ldr	r3, [pc, #208]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a0e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a12:	4b31      	ldr	r3, [pc, #196]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a16:	4a30      	ldr	r2, [pc, #192]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a1c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a1e:	4b2e      	ldr	r3, [pc, #184]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a22:	4a2d      	ldr	r2, [pc, #180]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a28:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006a2a:	4a2b      	ldr	r2, [pc, #172]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a30:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a3e:	d118      	bne.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a40:	f7fb f88a 	bl	8001b58 <HAL_GetTick>
 8006a44:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a48:	e00d      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a4a:	f7fb f885 	bl	8001b58 <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006a54:	1ad2      	subs	r2, r2, r3
 8006a56:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d903      	bls.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006a64:	e005      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a66:	4b1c      	ldr	r3, [pc, #112]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d0eb      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d129      	bne.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a8a:	d10e      	bne.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006a8c:	4b12      	ldr	r3, [pc, #72]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a9c:	091a      	lsrs	r2, r3, #4
 8006a9e:	4b10      	ldr	r3, [pc, #64]	@ (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	4a0d      	ldr	r2, [pc, #52]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006aa4:	430b      	orrs	r3, r1
 8006aa6:	6113      	str	r3, [r2, #16]
 8006aa8:	e005      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	4a0a      	ldr	r2, [pc, #40]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ab0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006ab4:	6113      	str	r3, [r2, #16]
 8006ab6:	4b08      	ldr	r3, [pc, #32]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ab8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006abe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ac6:	4a04      	ldr	r2, [pc, #16]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ac8:	430b      	orrs	r3, r1
 8006aca:	6713      	str	r3, [r2, #112]	@ 0x70
 8006acc:	e00e      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ad2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006ad6:	e009      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006ad8:	58024400 	.word	0x58024400
 8006adc:	58024800 	.word	0x58024800
 8006ae0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ae8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af4:	f002 0301 	and.w	r3, r2, #1
 8006af8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006afc:	2300      	movs	r3, #0
 8006afe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b02:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b06:	460b      	mov	r3, r1
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	f000 8089 	beq.w	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b14:	2b28      	cmp	r3, #40	@ 0x28
 8006b16:	d86b      	bhi.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006b18:	a201      	add	r2, pc, #4	@ (adr r2, 8006b20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1e:	bf00      	nop
 8006b20:	08006bf9 	.word	0x08006bf9
 8006b24:	08006bf1 	.word	0x08006bf1
 8006b28:	08006bf1 	.word	0x08006bf1
 8006b2c:	08006bf1 	.word	0x08006bf1
 8006b30:	08006bf1 	.word	0x08006bf1
 8006b34:	08006bf1 	.word	0x08006bf1
 8006b38:	08006bf1 	.word	0x08006bf1
 8006b3c:	08006bf1 	.word	0x08006bf1
 8006b40:	08006bc5 	.word	0x08006bc5
 8006b44:	08006bf1 	.word	0x08006bf1
 8006b48:	08006bf1 	.word	0x08006bf1
 8006b4c:	08006bf1 	.word	0x08006bf1
 8006b50:	08006bf1 	.word	0x08006bf1
 8006b54:	08006bf1 	.word	0x08006bf1
 8006b58:	08006bf1 	.word	0x08006bf1
 8006b5c:	08006bf1 	.word	0x08006bf1
 8006b60:	08006bdb 	.word	0x08006bdb
 8006b64:	08006bf1 	.word	0x08006bf1
 8006b68:	08006bf1 	.word	0x08006bf1
 8006b6c:	08006bf1 	.word	0x08006bf1
 8006b70:	08006bf1 	.word	0x08006bf1
 8006b74:	08006bf1 	.word	0x08006bf1
 8006b78:	08006bf1 	.word	0x08006bf1
 8006b7c:	08006bf1 	.word	0x08006bf1
 8006b80:	08006bf9 	.word	0x08006bf9
 8006b84:	08006bf1 	.word	0x08006bf1
 8006b88:	08006bf1 	.word	0x08006bf1
 8006b8c:	08006bf1 	.word	0x08006bf1
 8006b90:	08006bf1 	.word	0x08006bf1
 8006b94:	08006bf1 	.word	0x08006bf1
 8006b98:	08006bf1 	.word	0x08006bf1
 8006b9c:	08006bf1 	.word	0x08006bf1
 8006ba0:	08006bf9 	.word	0x08006bf9
 8006ba4:	08006bf1 	.word	0x08006bf1
 8006ba8:	08006bf1 	.word	0x08006bf1
 8006bac:	08006bf1 	.word	0x08006bf1
 8006bb0:	08006bf1 	.word	0x08006bf1
 8006bb4:	08006bf1 	.word	0x08006bf1
 8006bb8:	08006bf1 	.word	0x08006bf1
 8006bbc:	08006bf1 	.word	0x08006bf1
 8006bc0:	08006bf9 	.word	0x08006bf9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc8:	3308      	adds	r3, #8
 8006bca:	2101      	movs	r1, #1
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f001 fe95 	bl	80088fc <RCCEx_PLL2_Config>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006bd8:	e00f      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bde:	3328      	adds	r3, #40	@ 0x28
 8006be0:	2101      	movs	r1, #1
 8006be2:	4618      	mov	r0, r3
 8006be4:	f001 ff3c 	bl	8008a60 <RCCEx_PLL3_Config>
 8006be8:	4603      	mov	r3, r0
 8006bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006bee:	e004      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bf6:	e000      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006bf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10a      	bne.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006c02:	4bbf      	ldr	r3, [pc, #764]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c06:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c10:	4abb      	ldr	r2, [pc, #748]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c12:	430b      	orrs	r3, r1
 8006c14:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c16:	e003      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c28:	f002 0302 	and.w	r3, r2, #2
 8006c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c30:	2300      	movs	r3, #0
 8006c32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006c36:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	d041      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c46:	2b05      	cmp	r3, #5
 8006c48:	d824      	bhi.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c50 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c50:	08006c9d 	.word	0x08006c9d
 8006c54:	08006c69 	.word	0x08006c69
 8006c58:	08006c7f 	.word	0x08006c7f
 8006c5c:	08006c9d 	.word	0x08006c9d
 8006c60:	08006c9d 	.word	0x08006c9d
 8006c64:	08006c9d 	.word	0x08006c9d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6c:	3308      	adds	r3, #8
 8006c6e:	2101      	movs	r1, #1
 8006c70:	4618      	mov	r0, r3
 8006c72:	f001 fe43 	bl	80088fc <RCCEx_PLL2_Config>
 8006c76:	4603      	mov	r3, r0
 8006c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c7c:	e00f      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c82:	3328      	adds	r3, #40	@ 0x28
 8006c84:	2101      	movs	r1, #1
 8006c86:	4618      	mov	r0, r3
 8006c88:	f001 feea 	bl	8008a60 <RCCEx_PLL3_Config>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c92:	e004      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c9a:	e000      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10a      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006ca6:	4b96      	ldr	r3, [pc, #600]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006caa:	f023 0107 	bic.w	r1, r3, #7
 8006cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006cb4:	4a92      	ldr	r2, [pc, #584]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cb6:	430b      	orrs	r3, r1
 8006cb8:	6553      	str	r3, [r2, #84]	@ 0x54
 8006cba:	e003      	b.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ccc:	f002 0304 	and.w	r3, r2, #4
 8006cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006cda:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	d044      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cec:	2b05      	cmp	r3, #5
 8006cee:	d825      	bhi.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf6:	bf00      	nop
 8006cf8:	08006d45 	.word	0x08006d45
 8006cfc:	08006d11 	.word	0x08006d11
 8006d00:	08006d27 	.word	0x08006d27
 8006d04:	08006d45 	.word	0x08006d45
 8006d08:	08006d45 	.word	0x08006d45
 8006d0c:	08006d45 	.word	0x08006d45
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d14:	3308      	adds	r3, #8
 8006d16:	2101      	movs	r1, #1
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f001 fdef 	bl	80088fc <RCCEx_PLL2_Config>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006d24:	e00f      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d2a:	3328      	adds	r3, #40	@ 0x28
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f001 fe96 	bl	8008a60 <RCCEx_PLL3_Config>
 8006d34:	4603      	mov	r3, r0
 8006d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006d3a:	e004      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d42:	e000      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10b      	bne.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d4e:	4b6c      	ldr	r3, [pc, #432]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d52:	f023 0107 	bic.w	r1, r3, #7
 8006d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d5e:	4a68      	ldr	r2, [pc, #416]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d60:	430b      	orrs	r3, r1
 8006d62:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d64:	e003      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	f002 0320 	and.w	r3, r2, #32
 8006d7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d7e:	2300      	movs	r3, #0
 8006d80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	d055      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d9a:	d033      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006da0:	d82c      	bhi.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006da6:	d02f      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dac:	d826      	bhi.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006dae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006db2:	d02b      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006db4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006db8:	d820      	bhi.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006dba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dbe:	d012      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006dc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dc4:	d81a      	bhi.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d022      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006dca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dce:	d115      	bne.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd4:	3308      	adds	r3, #8
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f001 fd8f 	bl	80088fc <RCCEx_PLL2_Config>
 8006dde:	4603      	mov	r3, r0
 8006de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006de4:	e015      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dea:	3328      	adds	r3, #40	@ 0x28
 8006dec:	2102      	movs	r1, #2
 8006dee:	4618      	mov	r0, r3
 8006df0:	f001 fe36 	bl	8008a60 <RCCEx_PLL3_Config>
 8006df4:	4603      	mov	r3, r0
 8006df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006dfa:	e00a      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e02:	e006      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006e04:	bf00      	nop
 8006e06:	e004      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006e08:	bf00      	nop
 8006e0a:	e002      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006e0c:	bf00      	nop
 8006e0e:	e000      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006e10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10b      	bne.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e1a:	4b39      	ldr	r3, [pc, #228]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e1e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e2a:	4a35      	ldr	r2, [pc, #212]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e2c:	430b      	orrs	r3, r1
 8006e2e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e30:	e003      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006e46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006e50:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006e54:	460b      	mov	r3, r1
 8006e56:	4313      	orrs	r3, r2
 8006e58:	d058      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e62:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006e66:	d033      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006e68:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006e6c:	d82c      	bhi.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e72:	d02f      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006e74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e78:	d826      	bhi.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e7e:	d02b      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006e80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e84:	d820      	bhi.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e8a:	d012      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006e8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e90:	d81a      	bhi.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d022      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e9a:	d115      	bne.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea0:	3308      	adds	r3, #8
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f001 fd29 	bl	80088fc <RCCEx_PLL2_Config>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006eb0:	e015      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb6:	3328      	adds	r3, #40	@ 0x28
 8006eb8:	2102      	movs	r1, #2
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f001 fdd0 	bl	8008a60 <RCCEx_PLL3_Config>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006ec6:	e00a      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ece:	e006      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006ed0:	bf00      	nop
 8006ed2:	e004      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006ed4:	bf00      	nop
 8006ed6:	e002      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006ed8:	bf00      	nop
 8006eda:	e000      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10e      	bne.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ee6:	4b06      	ldr	r3, [pc, #24]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eea:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ef6:	4a02      	ldr	r2, [pc, #8]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	6593      	str	r3, [r2, #88]	@ 0x58
 8006efc:	e006      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006efe:	bf00      	nop
 8006f00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f14:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006f18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f22:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006f26:	460b      	mov	r3, r1
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	d055      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006f34:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006f38:	d033      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006f3a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006f3e:	d82c      	bhi.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006f40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f44:	d02f      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006f46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f4a:	d826      	bhi.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006f4c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006f50:	d02b      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006f52:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006f56:	d820      	bhi.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006f58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f5c:	d012      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006f5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f62:	d81a      	bhi.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d022      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006f68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f6c:	d115      	bne.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f72:	3308      	adds	r3, #8
 8006f74:	2100      	movs	r1, #0
 8006f76:	4618      	mov	r0, r3
 8006f78:	f001 fcc0 	bl	80088fc <RCCEx_PLL2_Config>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f82:	e015      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f88:	3328      	adds	r3, #40	@ 0x28
 8006f8a:	2102      	movs	r1, #2
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f001 fd67 	bl	8008a60 <RCCEx_PLL3_Config>
 8006f92:	4603      	mov	r3, r0
 8006f94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f98:	e00a      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fa0:	e006      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006fa2:	bf00      	nop
 8006fa4:	e004      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006fa6:	bf00      	nop
 8006fa8:	e002      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006faa:	bf00      	nop
 8006fac:	e000      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006fae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10b      	bne.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006fb8:	4ba1      	ldr	r3, [pc, #644]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fbc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006fc8:	4a9d      	ldr	r2, [pc, #628]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fca:	430b      	orrs	r3, r1
 8006fcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fce:	e003      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe0:	f002 0308 	and.w	r3, r2, #8
 8006fe4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006fee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	d01e      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007000:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007004:	d10c      	bne.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800700a:	3328      	adds	r3, #40	@ 0x28
 800700c:	2102      	movs	r1, #2
 800700e:	4618      	mov	r0, r3
 8007010:	f001 fd26 	bl	8008a60 <RCCEx_PLL3_Config>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007020:	4b87      	ldr	r3, [pc, #540]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007024:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800702c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007030:	4a83      	ldr	r2, [pc, #524]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007032:	430b      	orrs	r3, r1
 8007034:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800703a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703e:	f002 0310 	and.w	r3, r2, #16
 8007042:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007046:	2300      	movs	r3, #0
 8007048:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800704c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007050:	460b      	mov	r3, r1
 8007052:	4313      	orrs	r3, r2
 8007054:	d01e      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800705a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800705e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007062:	d10c      	bne.n	800707e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007068:	3328      	adds	r3, #40	@ 0x28
 800706a:	2102      	movs	r1, #2
 800706c:	4618      	mov	r0, r3
 800706e:	f001 fcf7 	bl	8008a60 <RCCEx_PLL3_Config>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800707e:	4b70      	ldr	r3, [pc, #448]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007082:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800708e:	4a6c      	ldr	r2, [pc, #432]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007090:	430b      	orrs	r3, r1
 8007092:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80070a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80070a4:	2300      	movs	r3, #0
 80070a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80070aa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80070ae:	460b      	mov	r3, r1
 80070b0:	4313      	orrs	r3, r2
 80070b2:	d03e      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80070b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80070bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070c0:	d022      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80070c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070c6:	d81b      	bhi.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d003      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80070cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070d0:	d00b      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80070d2:	e015      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d8:	3308      	adds	r3, #8
 80070da:	2100      	movs	r1, #0
 80070dc:	4618      	mov	r0, r3
 80070de:	f001 fc0d 	bl	80088fc <RCCEx_PLL2_Config>
 80070e2:	4603      	mov	r3, r0
 80070e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80070e8:	e00f      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ee:	3328      	adds	r3, #40	@ 0x28
 80070f0:	2102      	movs	r1, #2
 80070f2:	4618      	mov	r0, r3
 80070f4:	f001 fcb4 	bl	8008a60 <RCCEx_PLL3_Config>
 80070f8:	4603      	mov	r3, r0
 80070fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80070fe:	e004      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007106:	e000      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800710a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10b      	bne.n	800712a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007112:	4b4b      	ldr	r3, [pc, #300]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007116:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800711a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800711e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007122:	4a47      	ldr	r2, [pc, #284]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007124:	430b      	orrs	r3, r1
 8007126:	6593      	str	r3, [r2, #88]	@ 0x58
 8007128:	e003      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800712a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800712e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800713e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007140:	2300      	movs	r3, #0
 8007142:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007144:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007148:	460b      	mov	r3, r1
 800714a:	4313      	orrs	r3, r2
 800714c:	d03b      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800714e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007156:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800715a:	d01f      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800715c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007160:	d818      	bhi.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007162:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007166:	d003      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007168:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800716c:	d007      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800716e:	e011      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007170:	4b33      	ldr	r3, [pc, #204]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007174:	4a32      	ldr	r2, [pc, #200]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007176:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800717a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800717c:	e00f      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800717e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007182:	3328      	adds	r3, #40	@ 0x28
 8007184:	2101      	movs	r1, #1
 8007186:	4618      	mov	r0, r3
 8007188:	f001 fc6a 	bl	8008a60 <RCCEx_PLL3_Config>
 800718c:	4603      	mov	r3, r0
 800718e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007192:	e004      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800719a:	e000      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800719c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800719e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10b      	bne.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071a6:	4b26      	ldr	r3, [pc, #152]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80071ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071b6:	4a22      	ldr	r2, [pc, #136]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071b8:	430b      	orrs	r3, r1
 80071ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80071bc:	e003      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80071c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80071d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80071d4:	2300      	movs	r3, #0
 80071d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80071d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80071dc:	460b      	mov	r3, r1
 80071de:	4313      	orrs	r3, r2
 80071e0:	d034      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80071e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80071ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071f0:	d007      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80071f2:	e011      	b.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071f4:	4b12      	ldr	r3, [pc, #72]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f8:	4a11      	ldr	r2, [pc, #68]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007200:	e00e      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007206:	3308      	adds	r3, #8
 8007208:	2102      	movs	r1, #2
 800720a:	4618      	mov	r0, r3
 800720c:	f001 fb76 	bl	80088fc <RCCEx_PLL2_Config>
 8007210:	4603      	mov	r3, r0
 8007212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007216:	e003      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800721e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007220:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10d      	bne.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007228:	4b05      	ldr	r3, [pc, #20]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800722a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800722c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007236:	4a02      	ldr	r2, [pc, #8]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007238:	430b      	orrs	r3, r1
 800723a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800723c:	e006      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800723e:	bf00      	nop
 8007240:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007244:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007248:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800724c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007254:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007258:	66bb      	str	r3, [r7, #104]	@ 0x68
 800725a:	2300      	movs	r3, #0
 800725c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800725e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007262:	460b      	mov	r3, r1
 8007264:	4313      	orrs	r3, r2
 8007266:	d00c      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726c:	3328      	adds	r3, #40	@ 0x28
 800726e:	2102      	movs	r1, #2
 8007270:	4618      	mov	r0, r3
 8007272:	f001 fbf5 	bl	8008a60 <RCCEx_PLL3_Config>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800728e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007290:	2300      	movs	r3, #0
 8007292:	667b      	str	r3, [r7, #100]	@ 0x64
 8007294:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007298:	460b      	mov	r3, r1
 800729a:	4313      	orrs	r3, r2
 800729c:	d038      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800729e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072aa:	d018      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80072ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072b0:	d811      	bhi.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80072b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072b6:	d014      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80072b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072bc:	d80b      	bhi.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d011      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80072c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072c6:	d106      	bne.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072c8:	4bc3      	ldr	r3, [pc, #780]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072cc:	4ac2      	ldr	r2, [pc, #776]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80072d4:	e008      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072dc:	e004      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80072de:	bf00      	nop
 80072e0:	e002      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80072e2:	bf00      	nop
 80072e4:	e000      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80072e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10b      	bne.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072f0:	4bb9      	ldr	r3, [pc, #740]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072f4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80072f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007300:	4ab5      	ldr	r2, [pc, #724]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007302:	430b      	orrs	r3, r1
 8007304:	6553      	str	r3, [r2, #84]	@ 0x54
 8007306:	e003      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007308:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800730c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007318:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800731c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800731e:	2300      	movs	r3, #0
 8007320:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007322:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007326:	460b      	mov	r3, r1
 8007328:	4313      	orrs	r3, r2
 800732a:	d009      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800732c:	4baa      	ldr	r3, [pc, #680]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800732e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007330:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800733a:	4aa7      	ldr	r2, [pc, #668]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800733c:	430b      	orrs	r3, r1
 800733e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007348:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800734c:	653b      	str	r3, [r7, #80]	@ 0x50
 800734e:	2300      	movs	r3, #0
 8007350:	657b      	str	r3, [r7, #84]	@ 0x54
 8007352:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007356:	460b      	mov	r3, r1
 8007358:	4313      	orrs	r3, r2
 800735a:	d00a      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800735c:	4b9e      	ldr	r3, [pc, #632]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007368:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800736c:	4a9a      	ldr	r2, [pc, #616]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800736e:	430b      	orrs	r3, r1
 8007370:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800737e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007380:	2300      	movs	r3, #0
 8007382:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007384:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007388:	460b      	mov	r3, r1
 800738a:	4313      	orrs	r3, r2
 800738c:	d009      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800738e:	4b92      	ldr	r3, [pc, #584]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007392:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800739a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800739c:	4a8e      	ldr	r2, [pc, #568]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800739e:	430b      	orrs	r3, r1
 80073a0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80073a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073aa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80073ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80073b0:	2300      	movs	r3, #0
 80073b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80073b4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80073b8:	460b      	mov	r3, r1
 80073ba:	4313      	orrs	r3, r2
 80073bc:	d00e      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073be:	4b86      	ldr	r3, [pc, #536]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	4a85      	ldr	r2, [pc, #532]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80073c8:	6113      	str	r3, [r2, #16]
 80073ca:	4b83      	ldr	r3, [pc, #524]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073cc:	6919      	ldr	r1, [r3, #16]
 80073ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80073d6:	4a80      	ldr	r2, [pc, #512]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073d8:	430b      	orrs	r3, r1
 80073da:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80073dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80073e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073ea:	2300      	movs	r3, #0
 80073ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073ee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80073f2:	460b      	mov	r3, r1
 80073f4:	4313      	orrs	r3, r2
 80073f6:	d009      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80073f8:	4b77      	ldr	r3, [pc, #476]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073fc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007406:	4a74      	ldr	r2, [pc, #464]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007408:	430b      	orrs	r3, r1
 800740a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800740c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007414:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007418:	633b      	str	r3, [r7, #48]	@ 0x30
 800741a:	2300      	movs	r3, #0
 800741c:	637b      	str	r3, [r7, #52]	@ 0x34
 800741e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007422:	460b      	mov	r3, r1
 8007424:	4313      	orrs	r3, r2
 8007426:	d00a      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007428:	4b6b      	ldr	r3, [pc, #428]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800742a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800742c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007438:	4a67      	ldr	r2, [pc, #412]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800743a:	430b      	orrs	r3, r1
 800743c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800743e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007446:	2100      	movs	r1, #0
 8007448:	62b9      	str	r1, [r7, #40]	@ 0x28
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007450:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007454:	460b      	mov	r3, r1
 8007456:	4313      	orrs	r3, r2
 8007458:	d011      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800745a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800745e:	3308      	adds	r3, #8
 8007460:	2100      	movs	r1, #0
 8007462:	4618      	mov	r0, r3
 8007464:	f001 fa4a 	bl	80088fc <RCCEx_PLL2_Config>
 8007468:	4603      	mov	r3, r0
 800746a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800746e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800747a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800747e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007486:	2100      	movs	r1, #0
 8007488:	6239      	str	r1, [r7, #32]
 800748a:	f003 0302 	and.w	r3, r3, #2
 800748e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007490:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007494:	460b      	mov	r3, r1
 8007496:	4313      	orrs	r3, r2
 8007498:	d011      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800749a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800749e:	3308      	adds	r3, #8
 80074a0:	2101      	movs	r1, #1
 80074a2:	4618      	mov	r0, r3
 80074a4:	f001 fa2a 	bl	80088fc <RCCEx_PLL2_Config>
 80074a8:	4603      	mov	r3, r0
 80074aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80074ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80074be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	2100      	movs	r1, #0
 80074c8:	61b9      	str	r1, [r7, #24]
 80074ca:	f003 0304 	and.w	r3, r3, #4
 80074ce:	61fb      	str	r3, [r7, #28]
 80074d0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80074d4:	460b      	mov	r3, r1
 80074d6:	4313      	orrs	r3, r2
 80074d8:	d011      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80074da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074de:	3308      	adds	r3, #8
 80074e0:	2102      	movs	r1, #2
 80074e2:	4618      	mov	r0, r3
 80074e4:	f001 fa0a 	bl	80088fc <RCCEx_PLL2_Config>
 80074e8:	4603      	mov	r3, r0
 80074ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80074ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d003      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80074fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007506:	2100      	movs	r1, #0
 8007508:	6139      	str	r1, [r7, #16]
 800750a:	f003 0308 	and.w	r3, r3, #8
 800750e:	617b      	str	r3, [r7, #20]
 8007510:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007514:	460b      	mov	r3, r1
 8007516:	4313      	orrs	r3, r2
 8007518:	d011      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800751a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800751e:	3328      	adds	r3, #40	@ 0x28
 8007520:	2100      	movs	r1, #0
 8007522:	4618      	mov	r0, r3
 8007524:	f001 fa9c 	bl	8008a60 <RCCEx_PLL3_Config>
 8007528:	4603      	mov	r3, r0
 800752a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800752e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800753a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800753e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007546:	2100      	movs	r1, #0
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	f003 0310 	and.w	r3, r3, #16
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007554:	460b      	mov	r3, r1
 8007556:	4313      	orrs	r3, r2
 8007558:	d011      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800755a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800755e:	3328      	adds	r3, #40	@ 0x28
 8007560:	2101      	movs	r1, #1
 8007562:	4618      	mov	r0, r3
 8007564:	f001 fa7c 	bl	8008a60 <RCCEx_PLL3_Config>
 8007568:	4603      	mov	r3, r0
 800756a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800756e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007572:	2b00      	cmp	r3, #0
 8007574:	d003      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800757a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800757e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007586:	2100      	movs	r1, #0
 8007588:	6039      	str	r1, [r7, #0]
 800758a:	f003 0320 	and.w	r3, r3, #32
 800758e:	607b      	str	r3, [r7, #4]
 8007590:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007594:	460b      	mov	r3, r1
 8007596:	4313      	orrs	r3, r2
 8007598:	d011      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800759a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800759e:	3328      	adds	r3, #40	@ 0x28
 80075a0:	2102      	movs	r1, #2
 80075a2:	4618      	mov	r0, r3
 80075a4:	f001 fa5c 	bl	8008a60 <RCCEx_PLL3_Config>
 80075a8:	4603      	mov	r3, r0
 80075aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80075ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80075be:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	e000      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80075d2:	46bd      	mov	sp, r7
 80075d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075d8:	58024400 	.word	0x58024400

080075dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b090      	sub	sp, #64	@ 0x40
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80075e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075ea:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80075ee:	430b      	orrs	r3, r1
 80075f0:	f040 8094 	bne.w	800771c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80075f4:	4b9e      	ldr	r3, [pc, #632]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075f8:	f003 0307 	and.w	r3, r3, #7
 80075fc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80075fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007600:	2b04      	cmp	r3, #4
 8007602:	f200 8087 	bhi.w	8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007606:	a201      	add	r2, pc, #4	@ (adr r2, 800760c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760c:	08007621 	.word	0x08007621
 8007610:	08007649 	.word	0x08007649
 8007614:	08007671 	.word	0x08007671
 8007618:	0800770d 	.word	0x0800770d
 800761c:	08007699 	.word	0x08007699
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007620:	4b93      	ldr	r3, [pc, #588]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007628:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800762c:	d108      	bne.n	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800762e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007632:	4618      	mov	r0, r3
 8007634:	f001 f810 	bl	8008658 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800763a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800763c:	f000 bd45 	b.w	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007640:	2300      	movs	r3, #0
 8007642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007644:	f000 bd41 	b.w	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007648:	4b89      	ldr	r3, [pc, #548]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007650:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007654:	d108      	bne.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007656:	f107 0318 	add.w	r3, r7, #24
 800765a:	4618      	mov	r0, r3
 800765c:	f000 fd54 	bl	8008108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007664:	f000 bd31 	b.w	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007668:	2300      	movs	r3, #0
 800766a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800766c:	f000 bd2d 	b.w	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007670:	4b7f      	ldr	r3, [pc, #508]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007678:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800767c:	d108      	bne.n	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800767e:	f107 030c 	add.w	r3, r7, #12
 8007682:	4618      	mov	r0, r3
 8007684:	f000 fe94 	bl	80083b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800768c:	f000 bd1d 	b.w	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007690:	2300      	movs	r3, #0
 8007692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007694:	f000 bd19 	b.w	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007698:	4b75      	ldr	r3, [pc, #468]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800769a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800769c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80076a0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80076a2:	4b73      	ldr	r3, [pc, #460]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0304 	and.w	r3, r3, #4
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	d10c      	bne.n	80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80076ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d109      	bne.n	80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076b4:	4b6e      	ldr	r3, [pc, #440]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	08db      	lsrs	r3, r3, #3
 80076ba:	f003 0303 	and.w	r3, r3, #3
 80076be:	4a6d      	ldr	r2, [pc, #436]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80076c0:	fa22 f303 	lsr.w	r3, r2, r3
 80076c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076c6:	e01f      	b.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80076c8:	4b69      	ldr	r3, [pc, #420]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076d4:	d106      	bne.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80076d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076dc:	d102      	bne.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80076de:	4b66      	ldr	r3, [pc, #408]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80076e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076e2:	e011      	b.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80076e4:	4b62      	ldr	r3, [pc, #392]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076f0:	d106      	bne.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80076f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076f8:	d102      	bne.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80076fa:	4b60      	ldr	r3, [pc, #384]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80076fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076fe:	e003      	b.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007700:	2300      	movs	r3, #0
 8007702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007704:	f000 bce1 	b.w	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007708:	f000 bcdf 	b.w	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800770c:	4b5c      	ldr	r3, [pc, #368]	@ (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800770e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007710:	f000 bcdb 	b.w	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007714:	2300      	movs	r3, #0
 8007716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007718:	f000 bcd7 	b.w	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800771c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007720:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007724:	430b      	orrs	r3, r1
 8007726:	f040 80ad 	bne.w	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800772a:	4b51      	ldr	r3, [pc, #324]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800772c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800772e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007732:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007736:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800773a:	d056      	beq.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800773c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007742:	f200 8090 	bhi.w	8007866 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007748:	2bc0      	cmp	r3, #192	@ 0xc0
 800774a:	f000 8088 	beq.w	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800774e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007750:	2bc0      	cmp	r3, #192	@ 0xc0
 8007752:	f200 8088 	bhi.w	8007866 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007758:	2b80      	cmp	r3, #128	@ 0x80
 800775a:	d032      	beq.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800775c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775e:	2b80      	cmp	r3, #128	@ 0x80
 8007760:	f200 8081 	bhi.w	8007866 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800776a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776c:	2b40      	cmp	r3, #64	@ 0x40
 800776e:	d014      	beq.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007770:	e079      	b.n	8007866 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007772:	4b3f      	ldr	r3, [pc, #252]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800777a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800777e:	d108      	bne.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007780:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007784:	4618      	mov	r0, r3
 8007786:	f000 ff67 	bl	8008658 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800778a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800778c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800778e:	f000 bc9c 	b.w	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007792:	2300      	movs	r3, #0
 8007794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007796:	f000 bc98 	b.w	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800779a:	4b35      	ldr	r3, [pc, #212]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077a6:	d108      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077a8:	f107 0318 	add.w	r3, r7, #24
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 fcab 	bl	8008108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077b6:	f000 bc88 	b.w	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077be:	f000 bc84 	b.w	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077c2:	4b2b      	ldr	r3, [pc, #172]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077ce:	d108      	bne.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077d0:	f107 030c 	add.w	r3, r7, #12
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 fdeb 	bl	80083b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077de:	f000 bc74 	b.w	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077e2:	2300      	movs	r3, #0
 80077e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077e6:	f000 bc70 	b.w	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80077ea:	4b21      	ldr	r3, [pc, #132]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80077f2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80077f4:	4b1e      	ldr	r3, [pc, #120]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0304 	and.w	r3, r3, #4
 80077fc:	2b04      	cmp	r3, #4
 80077fe:	d10c      	bne.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007802:	2b00      	cmp	r3, #0
 8007804:	d109      	bne.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007806:	4b1a      	ldr	r3, [pc, #104]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	08db      	lsrs	r3, r3, #3
 800780c:	f003 0303 	and.w	r3, r3, #3
 8007810:	4a18      	ldr	r2, [pc, #96]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007812:	fa22 f303 	lsr.w	r3, r2, r3
 8007816:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007818:	e01f      	b.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800781a:	4b15      	ldr	r3, [pc, #84]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007826:	d106      	bne.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800782a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800782e:	d102      	bne.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007830:	4b11      	ldr	r3, [pc, #68]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007832:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007834:	e011      	b.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007836:	4b0e      	ldr	r3, [pc, #56]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800783e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007842:	d106      	bne.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007846:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800784a:	d102      	bne.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800784c:	4b0b      	ldr	r3, [pc, #44]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800784e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007850:	e003      	b.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007852:	2300      	movs	r3, #0
 8007854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007856:	f000 bc38 	b.w	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800785a:	f000 bc36 	b.w	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800785e:	4b08      	ldr	r3, [pc, #32]	@ (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007862:	f000 bc32 	b.w	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007866:	2300      	movs	r3, #0
 8007868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800786a:	f000 bc2e 	b.w	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800786e:	bf00      	nop
 8007870:	58024400 	.word	0x58024400
 8007874:	03d09000 	.word	0x03d09000
 8007878:	003d0900 	.word	0x003d0900
 800787c:	00f42400 	.word	0x00f42400
 8007880:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007888:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800788c:	430b      	orrs	r3, r1
 800788e:	f040 809c 	bne.w	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007892:	4b9e      	ldr	r3, [pc, #632]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007896:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800789a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800789c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80078a2:	d054      	beq.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80078a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80078aa:	f200 808b 	bhi.w	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80078ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80078b4:	f000 8083 	beq.w	80079be <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80078b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80078be:	f200 8081 	bhi.w	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80078c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078c8:	d02f      	beq.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80078ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078d0:	d878      	bhi.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80078d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d004      	beq.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80078d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078de:	d012      	beq.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80078e0:	e070      	b.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078e2:	4b8a      	ldr	r3, [pc, #552]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078ee:	d107      	bne.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 feaf 	bl	8008658 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078fe:	e3e4      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007900:	2300      	movs	r3, #0
 8007902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007904:	e3e1      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007906:	4b81      	ldr	r3, [pc, #516]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800790e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007912:	d107      	bne.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007914:	f107 0318 	add.w	r3, r7, #24
 8007918:	4618      	mov	r0, r3
 800791a:	f000 fbf5 	bl	8008108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007922:	e3d2      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007924:	2300      	movs	r3, #0
 8007926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007928:	e3cf      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800792a:	4b78      	ldr	r3, [pc, #480]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007936:	d107      	bne.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007938:	f107 030c 	add.w	r3, r7, #12
 800793c:	4618      	mov	r0, r3
 800793e:	f000 fd37 	bl	80083b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007946:	e3c0      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007948:	2300      	movs	r3, #0
 800794a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800794c:	e3bd      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800794e:	4b6f      	ldr	r3, [pc, #444]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007952:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007956:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007958:	4b6c      	ldr	r3, [pc, #432]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0304 	and.w	r3, r3, #4
 8007960:	2b04      	cmp	r3, #4
 8007962:	d10c      	bne.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007966:	2b00      	cmp	r3, #0
 8007968:	d109      	bne.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800796a:	4b68      	ldr	r3, [pc, #416]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	08db      	lsrs	r3, r3, #3
 8007970:	f003 0303 	and.w	r3, r3, #3
 8007974:	4a66      	ldr	r2, [pc, #408]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007976:	fa22 f303 	lsr.w	r3, r2, r3
 800797a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800797c:	e01e      	b.n	80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800797e:	4b63      	ldr	r3, [pc, #396]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800798a:	d106      	bne.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800798c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800798e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007992:	d102      	bne.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007994:	4b5f      	ldr	r3, [pc, #380]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007998:	e010      	b.n	80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800799a:	4b5c      	ldr	r3, [pc, #368]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079a6:	d106      	bne.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80079a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079ae:	d102      	bne.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80079b0:	4b59      	ldr	r3, [pc, #356]	@ (8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80079b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079b4:	e002      	b.n	80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80079b6:	2300      	movs	r3, #0
 80079b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80079ba:	e386      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80079bc:	e385      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80079be:	4b57      	ldr	r3, [pc, #348]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80079c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079c2:	e382      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80079c4:	2300      	movs	r3, #0
 80079c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079c8:	e37f      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80079ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079ce:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80079d2:	430b      	orrs	r3, r1
 80079d4:	f040 80a7 	bne.w	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80079d8:	4b4c      	ldr	r3, [pc, #304]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079dc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80079e0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80079e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80079e8:	d055      	beq.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80079ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80079f0:	f200 8096 	bhi.w	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80079f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80079fa:	f000 8084 	beq.w	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80079fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a00:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007a04:	f200 808c 	bhi.w	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a0e:	d030      	beq.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a16:	f200 8083 	bhi.w	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d004      	beq.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a26:	d012      	beq.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007a28:	e07a      	b.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a2a:	4b38      	ldr	r3, [pc, #224]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a36:	d107      	bne.n	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 fe0b 	bl	8008658 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a46:	e340      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a4c:	e33d      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a5a:	d107      	bne.n	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a5c:	f107 0318 	add.w	r3, r7, #24
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 fb51 	bl	8008108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a6a:	e32e      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a70:	e32b      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a72:	4b26      	ldr	r3, [pc, #152]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a7e:	d107      	bne.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a80:	f107 030c 	add.w	r3, r7, #12
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 fc93 	bl	80083b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a8e:	e31c      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a90:	2300      	movs	r3, #0
 8007a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a94:	e319      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a96:	4b1d      	ldr	r3, [pc, #116]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a9a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007a9e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0304 	and.w	r3, r3, #4
 8007aa8:	2b04      	cmp	r3, #4
 8007aaa:	d10c      	bne.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d109      	bne.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ab2:	4b16      	ldr	r3, [pc, #88]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	08db      	lsrs	r3, r3, #3
 8007ab8:	f003 0303 	and.w	r3, r3, #3
 8007abc:	4a14      	ldr	r2, [pc, #80]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007abe:	fa22 f303 	lsr.w	r3, r2, r3
 8007ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ac4:	e01e      	b.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ac6:	4b11      	ldr	r3, [pc, #68]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ad2:	d106      	bne.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ad6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ada:	d102      	bne.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007adc:	4b0d      	ldr	r3, [pc, #52]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ae0:	e010      	b.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007aea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007aee:	d106      	bne.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007af2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007af6:	d102      	bne.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007af8:	4b07      	ldr	r3, [pc, #28]	@ (8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007afc:	e002      	b.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007afe:	2300      	movs	r3, #0
 8007b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007b02:	e2e2      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b04:	e2e1      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b06:	4b05      	ldr	r3, [pc, #20]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b0a:	e2de      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b0c:	58024400 	.word	0x58024400
 8007b10:	03d09000 	.word	0x03d09000
 8007b14:	003d0900 	.word	0x003d0900
 8007b18:	00f42400 	.word	0x00f42400
 8007b1c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007b20:	2300      	movs	r3, #0
 8007b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b24:	e2d1      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007b26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b2a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007b2e:	430b      	orrs	r3, r1
 8007b30:	f040 809c 	bne.w	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007b34:	4b93      	ldr	r3, [pc, #588]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b38:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007b3c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b44:	d054      	beq.n	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b4c:	f200 808b 	bhi.w	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b56:	f000 8083 	beq.w	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b60:	f200 8081 	bhi.w	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b6a:	d02f      	beq.n	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b72:	d878      	bhi.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d004      	beq.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b80:	d012      	beq.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007b82:	e070      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b84:	4b7f      	ldr	r3, [pc, #508]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b90:	d107      	bne.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b96:	4618      	mov	r0, r3
 8007b98:	f000 fd5e 	bl	8008658 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ba0:	e293      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ba6:	e290      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ba8:	4b76      	ldr	r3, [pc, #472]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bb4:	d107      	bne.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bb6:	f107 0318 	add.w	r3, r7, #24
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 faa4 	bl	8008108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bc4:	e281      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bca:	e27e      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bcc:	4b6d      	ldr	r3, [pc, #436]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bd8:	d107      	bne.n	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bda:	f107 030c 	add.w	r3, r7, #12
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 fbe6 	bl	80083b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007be8:	e26f      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bea:	2300      	movs	r3, #0
 8007bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bee:	e26c      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007bf0:	4b64      	ldr	r3, [pc, #400]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bf4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007bf8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007bfa:	4b62      	ldr	r3, [pc, #392]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0304 	and.w	r3, r3, #4
 8007c02:	2b04      	cmp	r3, #4
 8007c04:	d10c      	bne.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d109      	bne.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c0c:	4b5d      	ldr	r3, [pc, #372]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	08db      	lsrs	r3, r3, #3
 8007c12:	f003 0303 	and.w	r3, r3, #3
 8007c16:	4a5c      	ldr	r2, [pc, #368]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007c18:	fa22 f303 	lsr.w	r3, r2, r3
 8007c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c1e:	e01e      	b.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c20:	4b58      	ldr	r3, [pc, #352]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c2c:	d106      	bne.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c34:	d102      	bne.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c36:	4b55      	ldr	r3, [pc, #340]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c3a:	e010      	b.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c3c:	4b51      	ldr	r3, [pc, #324]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c48:	d106      	bne.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c50:	d102      	bne.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c52:	4b4f      	ldr	r3, [pc, #316]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c56:	e002      	b.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007c5c:	e235      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c5e:	e234      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007c60:	4b4c      	ldr	r3, [pc, #304]	@ (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c64:	e231      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007c66:	2300      	movs	r3, #0
 8007c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c6a:	e22e      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007c6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c70:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007c74:	430b      	orrs	r3, r1
 8007c76:	f040 808f 	bne.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007c7a:	4b42      	ldr	r3, [pc, #264]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c7e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007c82:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c8a:	d06b      	beq.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c8e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c92:	d874      	bhi.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c9a:	d056      	beq.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ca2:	d86c      	bhi.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007caa:	d03b      	beq.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007cb2:	d864      	bhi.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cba:	d021      	beq.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cc2:	d85c      	bhi.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d004      	beq.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cd0:	d004      	beq.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007cd2:	e054      	b.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007cd4:	f7fe fa62 	bl	800619c <HAL_RCC_GetPCLK1Freq>
 8007cd8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007cda:	e1f6      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cdc:	4b29      	ldr	r3, [pc, #164]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ce4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ce8:	d107      	bne.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cea:	f107 0318 	add.w	r3, r7, #24
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 fa0a 	bl	8008108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cf8:	e1e7      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cfe:	e1e4      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d00:	4b20      	ldr	r3, [pc, #128]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d0c:	d107      	bne.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d0e:	f107 030c 	add.w	r3, r7, #12
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 fb4c 	bl	80083b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d1c:	e1d5      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d22:	e1d2      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d24:	4b17      	ldr	r3, [pc, #92]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0304 	and.w	r3, r3, #4
 8007d2c:	2b04      	cmp	r3, #4
 8007d2e:	d109      	bne.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d30:	4b14      	ldr	r3, [pc, #80]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	08db      	lsrs	r3, r3, #3
 8007d36:	f003 0303 	and.w	r3, r3, #3
 8007d3a:	4a13      	ldr	r2, [pc, #76]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d42:	e1c2      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d44:	2300      	movs	r3, #0
 8007d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d48:	e1bf      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d56:	d102      	bne.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007d58:	4b0c      	ldr	r3, [pc, #48]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d5c:	e1b5      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d62:	e1b2      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007d64:	4b07      	ldr	r3, [pc, #28]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d70:	d102      	bne.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007d72:	4b07      	ldr	r3, [pc, #28]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d76:	e1a8      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d7c:	e1a5      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d82:	e1a2      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d84:	58024400 	.word	0x58024400
 8007d88:	03d09000 	.word	0x03d09000
 8007d8c:	003d0900 	.word	0x003d0900
 8007d90:	00f42400 	.word	0x00f42400
 8007d94:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d9c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007da0:	430b      	orrs	r3, r1
 8007da2:	d173      	bne.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007da4:	4b9c      	ldr	r3, [pc, #624]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007da8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007dac:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007db4:	d02f      	beq.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dbc:	d863      	bhi.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d004      	beq.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dca:	d012      	beq.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007dcc:	e05b      	b.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007dce:	4b92      	ldr	r3, [pc, #584]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dda:	d107      	bne.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ddc:	f107 0318 	add.w	r3, r7, #24
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 f991 	bl	8008108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dea:	e16e      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dec:	2300      	movs	r3, #0
 8007dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007df0:	e16b      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007df2:	4b89      	ldr	r3, [pc, #548]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dfe:	d107      	bne.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e00:	f107 030c 	add.w	r3, r7, #12
 8007e04:	4618      	mov	r0, r3
 8007e06:	f000 fad3 	bl	80083b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e0e:	e15c      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e10:	2300      	movs	r3, #0
 8007e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e14:	e159      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e16:	4b80      	ldr	r3, [pc, #512]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e1e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e20:	4b7d      	ldr	r3, [pc, #500]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0304 	and.w	r3, r3, #4
 8007e28:	2b04      	cmp	r3, #4
 8007e2a:	d10c      	bne.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d109      	bne.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e32:	4b79      	ldr	r3, [pc, #484]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	08db      	lsrs	r3, r3, #3
 8007e38:	f003 0303 	and.w	r3, r3, #3
 8007e3c:	4a77      	ldr	r2, [pc, #476]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e44:	e01e      	b.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e46:	4b74      	ldr	r3, [pc, #464]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e52:	d106      	bne.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e5a:	d102      	bne.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007e5c:	4b70      	ldr	r3, [pc, #448]	@ (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e60:	e010      	b.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e62:	4b6d      	ldr	r3, [pc, #436]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e6e:	d106      	bne.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e76:	d102      	bne.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007e78:	4b6a      	ldr	r3, [pc, #424]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e7c:	e002      	b.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007e82:	e122      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e84:	e121      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007e86:	2300      	movs	r3, #0
 8007e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e8a:	e11e      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007e8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e90:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007e94:	430b      	orrs	r3, r1
 8007e96:	d133      	bne.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007e98:	4b5f      	ldr	r3, [pc, #380]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ea0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d004      	beq.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007eae:	d012      	beq.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007eb0:	e023      	b.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007eb2:	4b59      	ldr	r3, [pc, #356]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ebe:	d107      	bne.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ec0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f000 fbc7 	bl	8008658 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ece:	e0fc      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ed4:	e0f9      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ed6:	4b50      	ldr	r3, [pc, #320]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ede:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ee2:	d107      	bne.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ee4:	f107 0318 	add.w	r3, r7, #24
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 f90d 	bl	8008108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007eee:	6a3b      	ldr	r3, [r7, #32]
 8007ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ef2:	e0ea      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef8:	e0e7      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007efa:	2300      	movs	r3, #0
 8007efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007efe:	e0e4      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f04:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007f08:	430b      	orrs	r3, r1
 8007f0a:	f040 808d 	bne.w	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007f0e:	4b42      	ldr	r3, [pc, #264]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f12:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007f16:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f1e:	d06b      	beq.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f26:	d874      	bhi.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f2e:	d056      	beq.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f36:	d86c      	bhi.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f3e:	d03b      	beq.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f46:	d864      	bhi.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f4e:	d021      	beq.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f56:	d85c      	bhi.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d004      	beq.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f64:	d004      	beq.n	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007f66:	e054      	b.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007f68:	f000 f8b8 	bl	80080dc <HAL_RCCEx_GetD3PCLK1Freq>
 8007f6c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f6e:	e0ac      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f70:	4b29      	ldr	r3, [pc, #164]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f7c:	d107      	bne.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f7e:	f107 0318 	add.w	r3, r7, #24
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 f8c0 	bl	8008108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f8c:	e09d      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f92:	e09a      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f94:	4b20      	ldr	r3, [pc, #128]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fa0:	d107      	bne.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fa2:	f107 030c 	add.w	r3, r7, #12
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 fa02 	bl	80083b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fb0:	e08b      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fb6:	e088      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007fb8:	4b17      	ldr	r3, [pc, #92]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0304 	and.w	r3, r3, #4
 8007fc0:	2b04      	cmp	r3, #4
 8007fc2:	d109      	bne.n	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fc4:	4b14      	ldr	r3, [pc, #80]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	08db      	lsrs	r3, r3, #3
 8007fca:	f003 0303 	and.w	r3, r3, #3
 8007fce:	4a13      	ldr	r2, [pc, #76]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fd6:	e078      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fdc:	e075      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007fde:	4b0e      	ldr	r3, [pc, #56]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fea:	d102      	bne.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007fec:	4b0c      	ldr	r3, [pc, #48]	@ (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ff0:	e06b      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ff6:	e068      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ff8:	4b07      	ldr	r3, [pc, #28]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008000:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008004:	d102      	bne.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008006:	4b07      	ldr	r3, [pc, #28]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800800a:	e05e      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800800c:	2300      	movs	r3, #0
 800800e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008010:	e05b      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008012:	2300      	movs	r3, #0
 8008014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008016:	e058      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008018:	58024400 	.word	0x58024400
 800801c:	03d09000 	.word	0x03d09000
 8008020:	003d0900 	.word	0x003d0900
 8008024:	00f42400 	.word	0x00f42400
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008028:	e9d7 2300 	ldrd	r2, r3, [r7]
 800802c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008030:	430b      	orrs	r3, r1
 8008032:	d148      	bne.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008034:	4b27      	ldr	r3, [pc, #156]	@ (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008038:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800803c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800803e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008040:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008044:	d02a      	beq.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800804c:	d838      	bhi.n	80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800804e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008050:	2b00      	cmp	r3, #0
 8008052:	d004      	beq.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008056:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800805a:	d00d      	beq.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800805c:	e030      	b.n	80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800805e:	4b1d      	ldr	r3, [pc, #116]	@ (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008066:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800806a:	d102      	bne.n	8008072 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800806c:	4b1a      	ldr	r3, [pc, #104]	@ (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800806e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008070:	e02b      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008072:	2300      	movs	r3, #0
 8008074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008076:	e028      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008078:	4b16      	ldr	r3, [pc, #88]	@ (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008080:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008084:	d107      	bne.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800808a:	4618      	mov	r0, r3
 800808c:	f000 fae4 	bl	8008658 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008094:	e019      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008096:	2300      	movs	r3, #0
 8008098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800809a:	e016      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800809c:	4b0d      	ldr	r3, [pc, #52]	@ (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080a8:	d107      	bne.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080aa:	f107 0318 	add.w	r3, r7, #24
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 f82a 	bl	8008108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080b8:	e007      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080ba:	2300      	movs	r3, #0
 80080bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080be:	e004      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80080c0:	2300      	movs	r3, #0
 80080c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080c4:	e001      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80080c6:	2300      	movs	r3, #0
 80080c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80080ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3740      	adds	r7, #64	@ 0x40
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	58024400 	.word	0x58024400
 80080d8:	00f42400 	.word	0x00f42400

080080dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80080e0:	f7fe f82c 	bl	800613c <HAL_RCC_GetHCLKFreq>
 80080e4:	4602      	mov	r2, r0
 80080e6:	4b06      	ldr	r3, [pc, #24]	@ (8008100 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	091b      	lsrs	r3, r3, #4
 80080ec:	f003 0307 	and.w	r3, r3, #7
 80080f0:	4904      	ldr	r1, [pc, #16]	@ (8008104 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80080f2:	5ccb      	ldrb	r3, [r1, r3]
 80080f4:	f003 031f 	and.w	r3, r3, #31
 80080f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	58024400 	.word	0x58024400
 8008104:	08009da0 	.word	0x08009da0

08008108 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008108:	b480      	push	{r7}
 800810a:	b089      	sub	sp, #36	@ 0x24
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008110:	4ba1      	ldr	r3, [pc, #644]	@ (8008398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008114:	f003 0303 	and.w	r3, r3, #3
 8008118:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800811a:	4b9f      	ldr	r3, [pc, #636]	@ (8008398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800811c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800811e:	0b1b      	lsrs	r3, r3, #12
 8008120:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008124:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008126:	4b9c      	ldr	r3, [pc, #624]	@ (8008398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800812a:	091b      	lsrs	r3, r3, #4
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008132:	4b99      	ldr	r3, [pc, #612]	@ (8008398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008136:	08db      	lsrs	r3, r3, #3
 8008138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	fb02 f303 	mul.w	r3, r2, r3
 8008142:	ee07 3a90 	vmov	s15, r3
 8008146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	2b00      	cmp	r3, #0
 8008152:	f000 8111 	beq.w	8008378 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	2b02      	cmp	r3, #2
 800815a:	f000 8083 	beq.w	8008264 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	2b02      	cmp	r3, #2
 8008162:	f200 80a1 	bhi.w	80082a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d003      	beq.n	8008174 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d056      	beq.n	8008220 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008172:	e099      	b.n	80082a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008174:	4b88      	ldr	r3, [pc, #544]	@ (8008398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 0320 	and.w	r3, r3, #32
 800817c:	2b00      	cmp	r3, #0
 800817e:	d02d      	beq.n	80081dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008180:	4b85      	ldr	r3, [pc, #532]	@ (8008398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	08db      	lsrs	r3, r3, #3
 8008186:	f003 0303 	and.w	r3, r3, #3
 800818a:	4a84      	ldr	r2, [pc, #528]	@ (800839c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800818c:	fa22 f303 	lsr.w	r3, r2, r3
 8008190:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	ee07 3a90 	vmov	s15, r3
 8008198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	ee07 3a90 	vmov	s15, r3
 80081a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081aa:	4b7b      	ldr	r3, [pc, #492]	@ (8008398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b2:	ee07 3a90 	vmov	s15, r3
 80081b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80081be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80081da:	e087      	b.n	80082ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	ee07 3a90 	vmov	s15, r3
 80081e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80081ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ee:	4b6a      	ldr	r3, [pc, #424]	@ (8008398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081f6:	ee07 3a90 	vmov	s15, r3
 80081fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008202:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800820a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800820e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800821a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800821e:	e065      	b.n	80082ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	ee07 3a90 	vmov	s15, r3
 8008226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800822a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800822e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008232:	4b59      	ldr	r3, [pc, #356]	@ (8008398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800823a:	ee07 3a90 	vmov	s15, r3
 800823e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008242:	ed97 6a03 	vldr	s12, [r7, #12]
 8008246:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800824a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800824e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800825a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800825e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008262:	e043      	b.n	80082ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	ee07 3a90 	vmov	s15, r3
 800826a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800826e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80083ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008276:	4b48      	ldr	r3, [pc, #288]	@ (8008398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800827a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800827e:	ee07 3a90 	vmov	s15, r3
 8008282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008286:	ed97 6a03 	vldr	s12, [r7, #12]
 800828a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800828e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800829a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800829e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082a6:	e021      	b.n	80082ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	ee07 3a90 	vmov	s15, r3
 80082ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80082b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ba:	4b37      	ldr	r3, [pc, #220]	@ (8008398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c2:	ee07 3a90 	vmov	s15, r3
 80082c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80082ec:	4b2a      	ldr	r3, [pc, #168]	@ (8008398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f0:	0a5b      	lsrs	r3, r3, #9
 80082f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082f6:	ee07 3a90 	vmov	s15, r3
 80082fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008302:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008306:	edd7 6a07 	vldr	s13, [r7, #28]
 800830a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800830e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008312:	ee17 2a90 	vmov	r2, s15
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800831a:	4b1f      	ldr	r3, [pc, #124]	@ (8008398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800831c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800831e:	0c1b      	lsrs	r3, r3, #16
 8008320:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008324:	ee07 3a90 	vmov	s15, r3
 8008328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800832c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008330:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008334:	edd7 6a07 	vldr	s13, [r7, #28]
 8008338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800833c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008340:	ee17 2a90 	vmov	r2, s15
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008348:	4b13      	ldr	r3, [pc, #76]	@ (8008398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800834a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800834c:	0e1b      	lsrs	r3, r3, #24
 800834e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008352:	ee07 3a90 	vmov	s15, r3
 8008356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800835a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800835e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008362:	edd7 6a07 	vldr	s13, [r7, #28]
 8008366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800836a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800836e:	ee17 2a90 	vmov	r2, s15
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008376:	e008      	b.n	800838a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	609a      	str	r2, [r3, #8]
}
 800838a:	bf00      	nop
 800838c:	3724      	adds	r7, #36	@ 0x24
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	58024400 	.word	0x58024400
 800839c:	03d09000 	.word	0x03d09000
 80083a0:	46000000 	.word	0x46000000
 80083a4:	4c742400 	.word	0x4c742400
 80083a8:	4a742400 	.word	0x4a742400
 80083ac:	4b742400 	.word	0x4b742400

080083b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b089      	sub	sp, #36	@ 0x24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083b8:	4ba1      	ldr	r3, [pc, #644]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083bc:	f003 0303 	and.w	r3, r3, #3
 80083c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80083c2:	4b9f      	ldr	r3, [pc, #636]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c6:	0d1b      	lsrs	r3, r3, #20
 80083c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80083ce:	4b9c      	ldr	r3, [pc, #624]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d2:	0a1b      	lsrs	r3, r3, #8
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80083da:	4b99      	ldr	r3, [pc, #612]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083de:	08db      	lsrs	r3, r3, #3
 80083e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	fb02 f303 	mul.w	r3, r2, r3
 80083ea:	ee07 3a90 	vmov	s15, r3
 80083ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 8111 	beq.w	8008620 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	2b02      	cmp	r3, #2
 8008402:	f000 8083 	beq.w	800850c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	2b02      	cmp	r3, #2
 800840a:	f200 80a1 	bhi.w	8008550 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d003      	beq.n	800841c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d056      	beq.n	80084c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800841a:	e099      	b.n	8008550 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800841c:	4b88      	ldr	r3, [pc, #544]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0320 	and.w	r3, r3, #32
 8008424:	2b00      	cmp	r3, #0
 8008426:	d02d      	beq.n	8008484 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008428:	4b85      	ldr	r3, [pc, #532]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	08db      	lsrs	r3, r3, #3
 800842e:	f003 0303 	and.w	r3, r3, #3
 8008432:	4a84      	ldr	r2, [pc, #528]	@ (8008644 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008434:	fa22 f303 	lsr.w	r3, r2, r3
 8008438:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	ee07 3a90 	vmov	s15, r3
 8008440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	ee07 3a90 	vmov	s15, r3
 800844a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008452:	4b7b      	ldr	r3, [pc, #492]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800845a:	ee07 3a90 	vmov	s15, r3
 800845e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008462:	ed97 6a03 	vldr	s12, [r7, #12]
 8008466:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800846a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800846e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800847a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800847e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008482:	e087      	b.n	8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	ee07 3a90 	vmov	s15, r3
 800848a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800864c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008496:	4b6a      	ldr	r3, [pc, #424]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800849a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800849e:	ee07 3a90 	vmov	s15, r3
 80084a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80084aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084c6:	e065      	b.n	8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	ee07 3a90 	vmov	s15, r3
 80084ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80084d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084da:	4b59      	ldr	r3, [pc, #356]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084e2:	ee07 3a90 	vmov	s15, r3
 80084e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80084ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800850a:	e043      	b.n	8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	ee07 3a90 	vmov	s15, r3
 8008512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008516:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008654 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800851a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800851e:	4b48      	ldr	r3, [pc, #288]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008526:	ee07 3a90 	vmov	s15, r3
 800852a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800852e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008532:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800853a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800853e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800854a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800854e:	e021      	b.n	8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	ee07 3a90 	vmov	s15, r3
 8008556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800855a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800855e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008562:	4b37      	ldr	r3, [pc, #220]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800856a:	ee07 3a90 	vmov	s15, r3
 800856e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008572:	ed97 6a03 	vldr	s12, [r7, #12]
 8008576:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800857a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800857e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008582:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800858a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800858e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008592:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008594:	4b2a      	ldr	r3, [pc, #168]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008598:	0a5b      	lsrs	r3, r3, #9
 800859a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800859e:	ee07 3a90 	vmov	s15, r3
 80085a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80085b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085ba:	ee17 2a90 	vmov	r2, s15
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80085c2:	4b1f      	ldr	r3, [pc, #124]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085c6:	0c1b      	lsrs	r3, r3, #16
 80085c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085cc:	ee07 3a90 	vmov	s15, r3
 80085d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80085e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085e8:	ee17 2a90 	vmov	r2, s15
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80085f0:	4b13      	ldr	r3, [pc, #76]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f4:	0e1b      	lsrs	r3, r3, #24
 80085f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085fa:	ee07 3a90 	vmov	s15, r3
 80085fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008602:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008606:	ee37 7a87 	vadd.f32	s14, s15, s14
 800860a:	edd7 6a07 	vldr	s13, [r7, #28]
 800860e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008616:	ee17 2a90 	vmov	r2, s15
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800861e:	e008      	b.n	8008632 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	609a      	str	r2, [r3, #8]
}
 8008632:	bf00      	nop
 8008634:	3724      	adds	r7, #36	@ 0x24
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	58024400 	.word	0x58024400
 8008644:	03d09000 	.word	0x03d09000
 8008648:	46000000 	.word	0x46000000
 800864c:	4c742400 	.word	0x4c742400
 8008650:	4a742400 	.word	0x4a742400
 8008654:	4b742400 	.word	0x4b742400

08008658 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008658:	b480      	push	{r7}
 800865a:	b089      	sub	sp, #36	@ 0x24
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008660:	4ba0      	ldr	r3, [pc, #640]	@ (80088e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008664:	f003 0303 	and.w	r3, r3, #3
 8008668:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800866a:	4b9e      	ldr	r3, [pc, #632]	@ (80088e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800866c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800866e:	091b      	lsrs	r3, r3, #4
 8008670:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008674:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008676:	4b9b      	ldr	r3, [pc, #620]	@ (80088e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008680:	4b98      	ldr	r3, [pc, #608]	@ (80088e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008684:	08db      	lsrs	r3, r3, #3
 8008686:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	fb02 f303 	mul.w	r3, r2, r3
 8008690:	ee07 3a90 	vmov	s15, r3
 8008694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008698:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f000 8111 	beq.w	80088c6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	f000 8083 	beq.w	80087b2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	f200 80a1 	bhi.w	80087f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d056      	beq.n	800876e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80086c0:	e099      	b.n	80087f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086c2:	4b88      	ldr	r3, [pc, #544]	@ (80088e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0320 	and.w	r3, r3, #32
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d02d      	beq.n	800872a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086ce:	4b85      	ldr	r3, [pc, #532]	@ (80088e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	08db      	lsrs	r3, r3, #3
 80086d4:	f003 0303 	and.w	r3, r3, #3
 80086d8:	4a83      	ldr	r2, [pc, #524]	@ (80088e8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80086da:	fa22 f303 	lsr.w	r3, r2, r3
 80086de:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	ee07 3a90 	vmov	s15, r3
 80086e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	ee07 3a90 	vmov	s15, r3
 80086f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086f8:	4b7a      	ldr	r3, [pc, #488]	@ (80088e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008700:	ee07 3a90 	vmov	s15, r3
 8008704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008708:	ed97 6a03 	vldr	s12, [r7, #12]
 800870c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80088ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008718:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800871c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008724:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008728:	e087      	b.n	800883a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	ee07 3a90 	vmov	s15, r3
 8008730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008734:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80088f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800873c:	4b69      	ldr	r3, [pc, #420]	@ (80088e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800873e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008744:	ee07 3a90 	vmov	s15, r3
 8008748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800874c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008750:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80088ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008754:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008758:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800875c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008760:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008768:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800876c:	e065      	b.n	800883a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	ee07 3a90 	vmov	s15, r3
 8008774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008778:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80088f4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800877c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008780:	4b58      	ldr	r3, [pc, #352]	@ (80088e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008788:	ee07 3a90 	vmov	s15, r3
 800878c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008790:	ed97 6a03 	vldr	s12, [r7, #12]
 8008794:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80088ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008798:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800879c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087b0:	e043      	b.n	800883a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	ee07 3a90 	vmov	s15, r3
 80087b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087bc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80088f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80087c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087c4:	4b47      	ldr	r3, [pc, #284]	@ (80088e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087cc:	ee07 3a90 	vmov	s15, r3
 80087d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80087d8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80088ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087f4:	e021      	b.n	800883a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	ee07 3a90 	vmov	s15, r3
 80087fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008800:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80088f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008808:	4b36      	ldr	r3, [pc, #216]	@ (80088e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800880a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800880c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008810:	ee07 3a90 	vmov	s15, r3
 8008814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008818:	ed97 6a03 	vldr	s12, [r7, #12]
 800881c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80088ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008820:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008824:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008828:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800882c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008834:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008838:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800883a:	4b2a      	ldr	r3, [pc, #168]	@ (80088e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800883c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800883e:	0a5b      	lsrs	r3, r3, #9
 8008840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008844:	ee07 3a90 	vmov	s15, r3
 8008848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800884c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008850:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008854:	edd7 6a07 	vldr	s13, [r7, #28]
 8008858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800885c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008860:	ee17 2a90 	vmov	r2, s15
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008868:	4b1e      	ldr	r3, [pc, #120]	@ (80088e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800886a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800886c:	0c1b      	lsrs	r3, r3, #16
 800886e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008872:	ee07 3a90 	vmov	s15, r3
 8008876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800887a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800887e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008882:	edd7 6a07 	vldr	s13, [r7, #28]
 8008886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800888a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800888e:	ee17 2a90 	vmov	r2, s15
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008896:	4b13      	ldr	r3, [pc, #76]	@ (80088e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800889a:	0e1b      	lsrs	r3, r3, #24
 800889c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088a0:	ee07 3a90 	vmov	s15, r3
 80088a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80088b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088bc:	ee17 2a90 	vmov	r2, s15
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80088c4:	e008      	b.n	80088d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	609a      	str	r2, [r3, #8]
}
 80088d8:	bf00      	nop
 80088da:	3724      	adds	r7, #36	@ 0x24
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr
 80088e4:	58024400 	.word	0x58024400
 80088e8:	03d09000 	.word	0x03d09000
 80088ec:	46000000 	.word	0x46000000
 80088f0:	4c742400 	.word	0x4c742400
 80088f4:	4a742400 	.word	0x4a742400
 80088f8:	4b742400 	.word	0x4b742400

080088fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800890a:	4b53      	ldr	r3, [pc, #332]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 800890c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800890e:	f003 0303 	and.w	r3, r3, #3
 8008912:	2b03      	cmp	r3, #3
 8008914:	d101      	bne.n	800891a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e099      	b.n	8008a4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800891a:	4b4f      	ldr	r3, [pc, #316]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a4e      	ldr	r2, [pc, #312]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 8008920:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008926:	f7f9 f917 	bl	8001b58 <HAL_GetTick>
 800892a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800892c:	e008      	b.n	8008940 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800892e:	f7f9 f913 	bl	8001b58 <HAL_GetTick>
 8008932:	4602      	mov	r2, r0
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	2b02      	cmp	r3, #2
 800893a:	d901      	bls.n	8008940 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e086      	b.n	8008a4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008940:	4b45      	ldr	r3, [pc, #276]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1f0      	bne.n	800892e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800894c:	4b42      	ldr	r3, [pc, #264]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 800894e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008950:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	031b      	lsls	r3, r3, #12
 800895a:	493f      	ldr	r1, [pc, #252]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 800895c:	4313      	orrs	r3, r2
 800895e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	3b01      	subs	r3, #1
 8008966:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	3b01      	subs	r3, #1
 8008970:	025b      	lsls	r3, r3, #9
 8008972:	b29b      	uxth	r3, r3
 8008974:	431a      	orrs	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	3b01      	subs	r3, #1
 800897c:	041b      	lsls	r3, r3, #16
 800897e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008982:	431a      	orrs	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	3b01      	subs	r3, #1
 800898a:	061b      	lsls	r3, r3, #24
 800898c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008990:	4931      	ldr	r1, [pc, #196]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 8008992:	4313      	orrs	r3, r2
 8008994:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008996:	4b30      	ldr	r3, [pc, #192]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 8008998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800899a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	492d      	ldr	r1, [pc, #180]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 80089a4:	4313      	orrs	r3, r2
 80089a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80089a8:	4b2b      	ldr	r3, [pc, #172]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 80089aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ac:	f023 0220 	bic.w	r2, r3, #32
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	4928      	ldr	r1, [pc, #160]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 80089b6:	4313      	orrs	r3, r2
 80089b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80089ba:	4b27      	ldr	r3, [pc, #156]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 80089bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089be:	4a26      	ldr	r2, [pc, #152]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 80089c0:	f023 0310 	bic.w	r3, r3, #16
 80089c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80089c6:	4b24      	ldr	r3, [pc, #144]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 80089c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089ca:	4b24      	ldr	r3, [pc, #144]	@ (8008a5c <RCCEx_PLL2_Config+0x160>)
 80089cc:	4013      	ands	r3, r2
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	69d2      	ldr	r2, [r2, #28]
 80089d2:	00d2      	lsls	r2, r2, #3
 80089d4:	4920      	ldr	r1, [pc, #128]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 80089d6:	4313      	orrs	r3, r2
 80089d8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80089da:	4b1f      	ldr	r3, [pc, #124]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 80089dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089de:	4a1e      	ldr	r2, [pc, #120]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 80089e0:	f043 0310 	orr.w	r3, r3, #16
 80089e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d106      	bne.n	80089fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80089ec:	4b1a      	ldr	r3, [pc, #104]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 80089ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f0:	4a19      	ldr	r2, [pc, #100]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 80089f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80089f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80089f8:	e00f      	b.n	8008a1a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d106      	bne.n	8008a0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008a00:	4b15      	ldr	r3, [pc, #84]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 8008a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a04:	4a14      	ldr	r2, [pc, #80]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 8008a06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a0c:	e005      	b.n	8008a1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008a0e:	4b12      	ldr	r3, [pc, #72]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 8008a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a12:	4a11      	ldr	r2, [pc, #68]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 8008a14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a18:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 8008a20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008a24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a26:	f7f9 f897 	bl	8001b58 <HAL_GetTick>
 8008a2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a2c:	e008      	b.n	8008a40 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008a2e:	f7f9 f893 	bl	8001b58 <HAL_GetTick>
 8008a32:	4602      	mov	r2, r0
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	1ad3      	subs	r3, r2, r3
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d901      	bls.n	8008a40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	e006      	b.n	8008a4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a40:	4b05      	ldr	r3, [pc, #20]	@ (8008a58 <RCCEx_PLL2_Config+0x15c>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d0f0      	beq.n	8008a2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	58024400 	.word	0x58024400
 8008a5c:	ffff0007 	.word	0xffff0007

08008a60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a6e:	4b53      	ldr	r3, [pc, #332]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a72:	f003 0303 	and.w	r3, r3, #3
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	d101      	bne.n	8008a7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e099      	b.n	8008bb2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008a7e:	4b4f      	ldr	r3, [pc, #316]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a4e      	ldr	r2, [pc, #312]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008a84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a8a:	f7f9 f865 	bl	8001b58 <HAL_GetTick>
 8008a8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a90:	e008      	b.n	8008aa4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a92:	f7f9 f861 	bl	8001b58 <HAL_GetTick>
 8008a96:	4602      	mov	r2, r0
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d901      	bls.n	8008aa4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e086      	b.n	8008bb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008aa4:	4b45      	ldr	r3, [pc, #276]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1f0      	bne.n	8008a92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008ab0:	4b42      	ldr	r3, [pc, #264]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	051b      	lsls	r3, r3, #20
 8008abe:	493f      	ldr	r1, [pc, #252]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	628b      	str	r3, [r1, #40]	@ 0x28
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	025b      	lsls	r3, r3, #9
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	431a      	orrs	r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	041b      	lsls	r3, r3, #16
 8008ae2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	3b01      	subs	r3, #1
 8008aee:	061b      	lsls	r3, r3, #24
 8008af0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008af4:	4931      	ldr	r1, [pc, #196]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008af6:	4313      	orrs	r3, r2
 8008af8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008afa:	4b30      	ldr	r3, [pc, #192]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	492d      	ldr	r1, [pc, #180]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b10:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	4928      	ldr	r1, [pc, #160]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008b1e:	4b27      	ldr	r3, [pc, #156]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b22:	4a26      	ldr	r2, [pc, #152]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008b2a:	4b24      	ldr	r3, [pc, #144]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008b2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b2e:	4b24      	ldr	r3, [pc, #144]	@ (8008bc0 <RCCEx_PLL3_Config+0x160>)
 8008b30:	4013      	ands	r3, r2
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	69d2      	ldr	r2, [r2, #28]
 8008b36:	00d2      	lsls	r2, r2, #3
 8008b38:	4920      	ldr	r1, [pc, #128]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008b3e:	4b1f      	ldr	r3, [pc, #124]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b42:	4a1e      	ldr	r2, [pc, #120]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d106      	bne.n	8008b5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008b50:	4b1a      	ldr	r3, [pc, #104]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b54:	4a19      	ldr	r2, [pc, #100]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008b56:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b5c:	e00f      	b.n	8008b7e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d106      	bne.n	8008b72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008b64:	4b15      	ldr	r3, [pc, #84]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b68:	4a14      	ldr	r2, [pc, #80]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008b6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008b6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b70:	e005      	b.n	8008b7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008b72:	4b12      	ldr	r3, [pc, #72]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b76:	4a11      	ldr	r2, [pc, #68]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008b78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a0e      	ldr	r2, [pc, #56]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b8a:	f7f8 ffe5 	bl	8001b58 <HAL_GetTick>
 8008b8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b90:	e008      	b.n	8008ba4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b92:	f7f8 ffe1 	bl	8001b58 <HAL_GetTick>
 8008b96:	4602      	mov	r2, r0
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d901      	bls.n	8008ba4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e006      	b.n	8008bb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ba4:	4b05      	ldr	r3, [pc, #20]	@ (8008bbc <RCCEx_PLL3_Config+0x15c>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d0f0      	beq.n	8008b92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	58024400 	.word	0x58024400
 8008bc0:	ffff0007 	.word	0xffff0007

08008bc4 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b086      	sub	sp, #24
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]
 8008bd0:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d904      	bls.n	8008be2 <HAL_SAI_InitProtocol+0x1e>
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	3b03      	subs	r3, #3
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d812      	bhi.n	8008c06 <HAL_SAI_InitProtocol+0x42>
 8008be0:	e008      	b.n	8008bf4 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	68b9      	ldr	r1, [r7, #8]
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f000 fc1b 	bl	8009424 <SAI_InitI2S>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	75fb      	strb	r3, [r7, #23]
      break;
 8008bf2:	e00b      	b.n	8008c0c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	68b9      	ldr	r1, [r7, #8]
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 fcc4 	bl	8009588 <SAI_InitPCM>
 8008c00:	4603      	mov	r3, r0
 8008c02:	75fb      	strb	r3, [r7, #23]
      break;
 8008c04:	e002      	b.n	8008c0c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	75fb      	strb	r3, [r7, #23]
      break;
 8008c0a:	bf00      	nop
  }

  if (status == HAL_OK)
 8008c0c:	7dfb      	ldrb	r3, [r7, #23]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d104      	bne.n	8008c1c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f000 f808 	bl	8008c28 <HAL_SAI_Init>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3718      	adds	r7, #24
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
	...

08008c28 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08a      	sub	sp, #40	@ 0x28
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d101      	bne.n	8008c3a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e28e      	b.n	8009158 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008c3a:	f7f8 ffbd 	bl	8001bb8 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d113      	bne.n	8008c70 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a96      	ldr	r2, [pc, #600]	@ (8008ea8 <HAL_SAI_Init+0x280>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d004      	beq.n	8008c5c <HAL_SAI_Init+0x34>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a95      	ldr	r2, [pc, #596]	@ (8008eac <HAL_SAI_Init+0x284>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d107      	bne.n	8008c6c <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d103      	bne.n	8008c6c <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d001      	beq.n	8008c70 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e273      	b.n	8009158 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a8c      	ldr	r2, [pc, #560]	@ (8008ea8 <HAL_SAI_Init+0x280>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d004      	beq.n	8008c84 <HAL_SAI_Init+0x5c>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a8c      	ldr	r2, [pc, #560]	@ (8008eb0 <HAL_SAI_Init+0x288>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d102      	bne.n	8008c8a <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8008c84:	4b8b      	ldr	r3, [pc, #556]	@ (8008eb4 <HAL_SAI_Init+0x28c>)
 8008c86:	61bb      	str	r3, [r7, #24]
 8008c88:	e028      	b.n	8008cdc <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a8a      	ldr	r2, [pc, #552]	@ (8008eb8 <HAL_SAI_Init+0x290>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d004      	beq.n	8008c9e <HAL_SAI_Init+0x76>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a88      	ldr	r2, [pc, #544]	@ (8008ebc <HAL_SAI_Init+0x294>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d102      	bne.n	8008ca4 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8008c9e:	4b88      	ldr	r3, [pc, #544]	@ (8008ec0 <HAL_SAI_Init+0x298>)
 8008ca0:	61bb      	str	r3, [r7, #24]
 8008ca2:	e01b      	b.n	8008cdc <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a86      	ldr	r2, [pc, #536]	@ (8008ec4 <HAL_SAI_Init+0x29c>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d004      	beq.n	8008cb8 <HAL_SAI_Init+0x90>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a85      	ldr	r2, [pc, #532]	@ (8008ec8 <HAL_SAI_Init+0x2a0>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d102      	bne.n	8008cbe <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8008cb8:	4b84      	ldr	r3, [pc, #528]	@ (8008ecc <HAL_SAI_Init+0x2a4>)
 8008cba:	61bb      	str	r3, [r7, #24]
 8008cbc:	e00e      	b.n	8008cdc <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a7a      	ldr	r2, [pc, #488]	@ (8008eac <HAL_SAI_Init+0x284>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d004      	beq.n	8008cd2 <HAL_SAI_Init+0xaa>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a80      	ldr	r2, [pc, #512]	@ (8008ed0 <HAL_SAI_Init+0x2a8>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d102      	bne.n	8008cd8 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8008cd2:	4b80      	ldr	r3, [pc, #512]	@ (8008ed4 <HAL_SAI_Init+0x2ac>)
 8008cd4:	61bb      	str	r3, [r7, #24]
 8008cd6:	e001      	b.n	8008cdc <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e23d      	b.n	8009158 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d106      	bne.n	8008cf6 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f7f8 fc8b 	bl	800160c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fd00 	bl	80096fc <SAI_Disable>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e228      	b.n	8009158 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2202      	movs	r2, #2
 8008d0a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d00c      	beq.n	8008d30 <HAL_SAI_Init+0x108>
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d80d      	bhi.n	8008d36 <HAL_SAI_Init+0x10e>
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d002      	beq.n	8008d24 <HAL_SAI_Init+0xfc>
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d003      	beq.n	8008d2a <HAL_SAI_Init+0x102>
 8008d22:	e008      	b.n	8008d36 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008d24:	2300      	movs	r3, #0
 8008d26:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008d28:	e008      	b.n	8008d3c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008d2a:	2310      	movs	r3, #16
 8008d2c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008d2e:	e005      	b.n	8008d3c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008d30:	2320      	movs	r3, #32
 8008d32:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008d34:	e002      	b.n	8008d3c <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008d3a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	2b05      	cmp	r3, #5
 8008d42:	d832      	bhi.n	8008daa <HAL_SAI_Init+0x182>
 8008d44:	a201      	add	r2, pc, #4	@ (adr r2, 8008d4c <HAL_SAI_Init+0x124>)
 8008d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4a:	bf00      	nop
 8008d4c:	08008d65 	.word	0x08008d65
 8008d50:	08008d6b 	.word	0x08008d6b
 8008d54:	08008d73 	.word	0x08008d73
 8008d58:	08008d7b 	.word	0x08008d7b
 8008d5c:	08008d8b 	.word	0x08008d8b
 8008d60:	08008d9b 	.word	0x08008d9b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008d64:	2300      	movs	r3, #0
 8008d66:	61fb      	str	r3, [r7, #28]
      break;
 8008d68:	e022      	b.n	8008db0 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008d6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d6e:	61fb      	str	r3, [r7, #28]
      break;
 8008d70:	e01e      	b.n	8008db0 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008d72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008d76:	61fb      	str	r3, [r7, #28]
      break;
 8008d78:	e01a      	b.n	8008db0 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008d7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008d7e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d82:	f043 0301 	orr.w	r3, r3, #1
 8008d86:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008d88:	e012      	b.n	8008db0 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008d8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008d8e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8008d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d92:	f043 0302 	orr.w	r3, r3, #2
 8008d96:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008d98:	e00a      	b.n	8008db0 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008d9a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008d9e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8008da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da2:	f043 0303 	orr.w	r3, r3, #3
 8008da6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008da8:	e002      	b.n	8008db0 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8008daa:	2300      	movs	r3, #0
 8008dac:	61fb      	str	r3, [r7, #28]
      break;
 8008dae:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008db4:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a1b      	ldr	r3, [r3, #32]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f000 80c5 	beq.w	8008f4a <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a37      	ldr	r2, [pc, #220]	@ (8008ea8 <HAL_SAI_Init+0x280>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d004      	beq.n	8008dd8 <HAL_SAI_Init+0x1b0>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a37      	ldr	r2, [pc, #220]	@ (8008eb0 <HAL_SAI_Init+0x288>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d106      	bne.n	8008de6 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008dd8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008ddc:	f04f 0100 	mov.w	r1, #0
 8008de0:	f7fe fbfc 	bl	80075dc <HAL_RCCEx_GetPeriphCLKFreq>
 8008de4:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a33      	ldr	r2, [pc, #204]	@ (8008eb8 <HAL_SAI_Init+0x290>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d004      	beq.n	8008dfa <HAL_SAI_Init+0x1d2>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a31      	ldr	r2, [pc, #196]	@ (8008ebc <HAL_SAI_Init+0x294>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d106      	bne.n	8008e08 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008dfa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008dfe:	f04f 0100 	mov.w	r1, #0
 8008e02:	f7fe fbeb 	bl	80075dc <HAL_RCCEx_GetPeriphCLKFreq>
 8008e06:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a2d      	ldr	r2, [pc, #180]	@ (8008ec4 <HAL_SAI_Init+0x29c>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d004      	beq.n	8008e1c <HAL_SAI_Init+0x1f4>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a2c      	ldr	r2, [pc, #176]	@ (8008ec8 <HAL_SAI_Init+0x2a0>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d106      	bne.n	8008e2a <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8008e1c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008e20:	f04f 0100 	mov.w	r1, #0
 8008e24:	f7fe fbda 	bl	80075dc <HAL_RCCEx_GetPeriphCLKFreq>
 8008e28:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8008eac <HAL_SAI_Init+0x284>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d106      	bne.n	8008e42 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8008e34:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8008e38:	f04f 0100 	mov.w	r1, #0
 8008e3c:	f7fe fbce 	bl	80075dc <HAL_RCCEx_GetPeriphCLKFreq>
 8008e40:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a22      	ldr	r2, [pc, #136]	@ (8008ed0 <HAL_SAI_Init+0x2a8>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d106      	bne.n	8008e5a <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8008e4c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008e50:	f04f 0100 	mov.w	r1, #0
 8008e54:	f7fe fbc2 	bl	80075dc <HAL_RCCEx_GetPeriphCLKFreq>
 8008e58:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008e62:	d139      	bne.n	8008ed8 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e68:	2b04      	cmp	r3, #4
 8008e6a:	d102      	bne.n	8008e72 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8008e6c:	2340      	movs	r3, #64	@ 0x40
 8008e6e:	60fb      	str	r3, [r7, #12]
 8008e70:	e00a      	b.n	8008e88 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e76:	2b08      	cmp	r3, #8
 8008e78:	d103      	bne.n	8008e82 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8008e7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008e7e:	60fb      	str	r3, [r7, #12]
 8008e80:	e002      	b.n	8008e88 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e86:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8008e88:	697a      	ldr	r2, [r7, #20]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	005b      	lsls	r3, r3, #1
 8008e92:	4619      	mov	r1, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a1b      	ldr	r3, [r3, #32]
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	fb02 f303 	mul.w	r3, r2, r3
 8008e9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ea2:	613b      	str	r3, [r7, #16]
 8008ea4:	e030      	b.n	8008f08 <HAL_SAI_Init+0x2e0>
 8008ea6:	bf00      	nop
 8008ea8:	40015804 	.word	0x40015804
 8008eac:	58005404 	.word	0x58005404
 8008eb0:	40015824 	.word	0x40015824
 8008eb4:	40015800 	.word	0x40015800
 8008eb8:	40015c04 	.word	0x40015c04
 8008ebc:	40015c24 	.word	0x40015c24
 8008ec0:	40015c00 	.word	0x40015c00
 8008ec4:	40016004 	.word	0x40016004
 8008ec8:	40016024 	.word	0x40016024
 8008ecc:	40016000 	.word	0x40016000
 8008ed0:	58005424 	.word	0x58005424
 8008ed4:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008edc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ee0:	d101      	bne.n	8008ee6 <HAL_SAI_Init+0x2be>
 8008ee2:	2302      	movs	r3, #2
 8008ee4:	e000      	b.n	8008ee8 <HAL_SAI_Init+0x2c0>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	4613      	mov	r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	4413      	add	r3, r2
 8008ef2:	005b      	lsls	r3, r3, #1
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	fb02 f303 	mul.w	r3, r2, r3
 8008f00:	021b      	lsls	r3, r3, #8
 8008f02:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f06:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	4a95      	ldr	r2, [pc, #596]	@ (8009160 <HAL_SAI_Init+0x538>)
 8008f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f10:	08da      	lsrs	r2, r3, #3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8008f16:	6939      	ldr	r1, [r7, #16]
 8008f18:	4b91      	ldr	r3, [pc, #580]	@ (8009160 <HAL_SAI_Init+0x538>)
 8008f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8008f1e:	08da      	lsrs	r2, r3, #3
 8008f20:	4613      	mov	r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	005b      	lsls	r3, r3, #1
 8008f28:	1aca      	subs	r2, r1, r3
 8008f2a:	2a08      	cmp	r2, #8
 8008f2c:	d904      	bls.n	8008f38 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f32:	1c5a      	adds	r2, r3, #1
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f3c:	2b04      	cmp	r3, #4
 8008f3e:	d104      	bne.n	8008f4a <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f44:	085a      	lsrs	r2, r3, #1
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d003      	beq.n	8008f5a <HAL_SAI_Init+0x332>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d109      	bne.n	8008f6e <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d101      	bne.n	8008f66 <HAL_SAI_Init+0x33e>
 8008f62:	2300      	movs	r3, #0
 8008f64:	e001      	b.n	8008f6a <HAL_SAI_Init+0x342>
 8008f66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f6a:	623b      	str	r3, [r7, #32]
 8008f6c:	e008      	b.n	8008f80 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d102      	bne.n	8008f7c <HAL_SAI_Init+0x354>
 8008f76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f7a:	e000      	b.n	8008f7e <HAL_SAI_Init+0x356>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008f80:	f7f8 fe1a 	bl	8001bb8 <HAL_GetREVID>
 8008f84:	4603      	mov	r3, r0
 8008f86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f8a:	d331      	bcc.n	8008ff0 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6819      	ldr	r1, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	4b73      	ldr	r3, [pc, #460]	@ (8009164 <HAL_SAI_Init+0x53c>)
 8008f98:	400b      	ands	r3, r1
 8008f9a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6819      	ldr	r1, [r3, #0]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	685a      	ldr	r2, [r3, #4]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008faa:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008fb0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fb6:	431a      	orrs	r2, r3
 8008fb8:	6a3b      	ldr	r3, [r7, #32]
 8008fba:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8008fc4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	695b      	ldr	r3, [r3, #20]
 8008fca:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008fd0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fd6:	051b      	lsls	r3, r3, #20
 8008fd8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008fde:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	430a      	orrs	r2, r1
 8008fec:	601a      	str	r2, [r3, #0]
 8008fee:	e02d      	b.n	800904c <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6819      	ldr	r1, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	4b5b      	ldr	r3, [pc, #364]	@ (8009168 <HAL_SAI_Init+0x540>)
 8008ffc:	400b      	ands	r3, r1
 8008ffe:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	6819      	ldr	r1, [r3, #0]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685a      	ldr	r2, [r3, #4]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800900e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009014:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800901a:	431a      	orrs	r2, r3
 800901c:	6a3b      	ldr	r3, [r7, #32]
 800901e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8009028:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009034:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800903a:	051b      	lsls	r3, r3, #20
 800903c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009042:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	430a      	orrs	r2, r1
 800904a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6859      	ldr	r1, [r3, #4]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	4b45      	ldr	r3, [pc, #276]	@ (800916c <HAL_SAI_Init+0x544>)
 8009058:	400b      	ands	r3, r1
 800905a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6859      	ldr	r1, [r3, #4]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	69da      	ldr	r2, [r3, #28]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800906a:	431a      	orrs	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009070:	431a      	orrs	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	6899      	ldr	r1, [r3, #8]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	4b3a      	ldr	r3, [pc, #232]	@ (8009170 <HAL_SAI_Init+0x548>)
 8009086:	400b      	ands	r3, r1
 8009088:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	6899      	ldr	r1, [r3, #8]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009094:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800909a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 80090a0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 80090a6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090ac:	3b01      	subs	r3, #1
 80090ae:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80090b0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	430a      	orrs	r2, r1
 80090b8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68d9      	ldr	r1, [r3, #12]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80090c8:	400b      	ands	r3, r1
 80090ca:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68d9      	ldr	r1, [r3, #12]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090da:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090e0:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80090e2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090e8:	3b01      	subs	r3, #1
 80090ea:	021b      	lsls	r3, r3, #8
 80090ec:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	430a      	orrs	r2, r1
 80090f4:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a1e      	ldr	r2, [pc, #120]	@ (8009174 <HAL_SAI_Init+0x54c>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d004      	beq.n	800910a <HAL_SAI_Init+0x4e2>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a1c      	ldr	r2, [pc, #112]	@ (8009178 <HAL_SAI_Init+0x550>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d119      	bne.n	800913e <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800910e:	f023 0201 	bic.w	r2, r3, #1
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800911c:	2b01      	cmp	r3, #1
 800911e:	d10e      	bne.n	800913e <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009128:	3b01      	subs	r3, #1
 800912a:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800912c:	431a      	orrs	r2, r3
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009136:	f043 0201 	orr.w	r2, r3, #1
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3728      	adds	r7, #40	@ 0x28
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	cccccccd 	.word	0xcccccccd
 8009164:	f005c010 	.word	0xf005c010
 8009168:	f805c010 	.word	0xf805c010
 800916c:	ffff1ff0 	.word	0xffff1ff0
 8009170:	fff88000 	.word	0xfff88000
 8009174:	40015804 	.word	0x40015804
 8009178:	58005404 	.word	0x58005404

0800917c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	4613      	mov	r3, r2
 8009188:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800918a:	f7f8 fce5 	bl	8001b58 <HAL_GetTick>
 800918e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d002      	beq.n	800919c <HAL_SAI_Transmit_DMA+0x20>
 8009196:	88fb      	ldrh	r3, [r7, #6]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d101      	bne.n	80091a0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	e098      	b.n	80092d2 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	f040 8091 	bne.w	80092d0 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d101      	bne.n	80091bc <HAL_SAI_Transmit_DMA+0x40>
 80091b8:	2302      	movs	r3, #2
 80091ba:	e08a      	b.n	80092d2 <HAL_SAI_Transmit_DMA+0x156>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	88fa      	ldrh	r2, [r7, #6]
 80091ce:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	88fa      	ldrh	r2, [r7, #6]
 80091d6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2212      	movs	r2, #18
 80091e6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091f0:	4a3a      	ldr	r2, [pc, #232]	@ (80092dc <HAL_SAI_Transmit_DMA+0x160>)
 80091f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091fa:	4a39      	ldr	r2, [pc, #228]	@ (80092e0 <HAL_SAI_Transmit_DMA+0x164>)
 80091fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009204:	4a37      	ldr	r2, [pc, #220]	@ (80092e4 <HAL_SAI_Transmit_DMA+0x168>)
 8009206:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800920e:	2200      	movs	r2, #0
 8009210:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800921c:	4619      	mov	r1, r3
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	331c      	adds	r3, #28
 8009224:	461a      	mov	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800922c:	f7f9 f9b4 	bl	8002598 <HAL_DMA_Start_IT>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d005      	beq.n	8009242 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e047      	b.n	80092d2 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009242:	2100      	movs	r1, #0
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 fa21 	bl	800968c <SAI_InterruptFlag>
 800924a:	4601      	mov	r1, r0
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	691a      	ldr	r2, [r3, #16]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	430a      	orrs	r2, r1
 8009258:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009268:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800926a:	e015      	b.n	8009298 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800926c:	f7f8 fc74 	bl	8001b58 <HAL_GetTick>
 8009270:	4602      	mov	r2, r0
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800927a:	d90d      	bls.n	8009298 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009282:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 8009294:	2303      	movs	r3, #3
 8009296:	e01c      	b.n	80092d2 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	695b      	ldr	r3, [r3, #20]
 800929e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d0e2      	beq.n	800926c <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d107      	bne.n	80092c4 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80092c2:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	e000      	b.n	80092d2 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 80092d0:	2302      	movs	r3, #2
  }
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3718      	adds	r7, #24
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	080097d1 	.word	0x080097d1
 80092e0:	08009771 	.word	0x08009771
 80092e4:	08009869 	.word	0x08009869

080092e8 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	4613      	mov	r3, r2
 80092f4:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d002      	beq.n	8009302 <HAL_SAI_Receive_DMA+0x1a>
 80092fc:	88fb      	ldrh	r3, [r7, #6]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e079      	b.n	80093fa <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800930c:	b2db      	uxtb	r3, r3
 800930e:	2b01      	cmp	r3, #1
 8009310:	d172      	bne.n	80093f8 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8009318:	2b01      	cmp	r3, #1
 800931a:	d101      	bne.n	8009320 <HAL_SAI_Receive_DMA+0x38>
 800931c:	2302      	movs	r3, #2
 800931e:	e06c      	b.n	80093fa <HAL_SAI_Receive_DMA+0x112>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	88fa      	ldrh	r2, [r7, #6]
 8009332:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	88fa      	ldrh	r2, [r7, #6]
 800933a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2200      	movs	r2, #0
 8009342:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2222      	movs	r2, #34	@ 0x22
 800934a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009354:	4a2b      	ldr	r2, [pc, #172]	@ (8009404 <HAL_SAI_Receive_DMA+0x11c>)
 8009356:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800935e:	4a2a      	ldr	r2, [pc, #168]	@ (8009408 <HAL_SAI_Receive_DMA+0x120>)
 8009360:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009368:	4a28      	ldr	r2, [pc, #160]	@ (800940c <HAL_SAI_Receive_DMA+0x124>)
 800936a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009372:	2200      	movs	r2, #0
 8009374:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	331c      	adds	r3, #28
 8009382:	4619      	mov	r1, r3
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009388:	461a      	mov	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8009390:	f7f9 f902 	bl	8002598 <HAL_DMA_Start_IT>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d005      	beq.n	80093a6 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	e029      	b.n	80093fa <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80093a6:	2100      	movs	r1, #0
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f000 f96f 	bl	800968c <SAI_InterruptFlag>
 80093ae:	4601      	mov	r1, r0
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	691a      	ldr	r2, [r3, #16]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	430a      	orrs	r2, r1
 80093bc:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80093cc:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d107      	bne.n	80093ec <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80093ea:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 80093f4:	2300      	movs	r3, #0
 80093f6:	e000      	b.n	80093fa <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 80093f8:	2302      	movs	r3, #2
  }
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	0800984d 	.word	0x0800984d
 8009408:	080097ed 	.word	0x080097ed
 800940c:	08009869 	.word	0x08009869

08009410 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009424:	b480      	push	{r7}
 8009426:	b087      	sub	sp, #28
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
 8009430:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009432:	2300      	movs	r3, #0
 8009434:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2200      	movs	r2, #0
 800943a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d003      	beq.n	8009452 <SAI_InitI2S+0x2e>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	2b02      	cmp	r3, #2
 8009450:	d103      	bne.n	800945a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2200      	movs	r2, #0
 8009456:	651a      	str	r2, [r3, #80]	@ 0x50
 8009458:	e002      	b.n	8009460 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2201      	movs	r2, #1
 800945e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009466:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800946e:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2200      	movs	r2, #0
 8009474:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	683a      	ldr	r2, [r7, #0]
 800947a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	f003 0301 	and.w	r3, r3, #1
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e077      	b.n	800957a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d107      	bne.n	80094a0 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800949c:	665a      	str	r2, [r3, #100]	@ 0x64
 800949e:	e006      	b.n	80094ae <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80094a6:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2b03      	cmp	r3, #3
 80094b2:	d84f      	bhi.n	8009554 <SAI_InitI2S+0x130>
 80094b4:	a201      	add	r2, pc, #4	@ (adr r2, 80094bc <SAI_InitI2S+0x98>)
 80094b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ba:	bf00      	nop
 80094bc:	080094cd 	.word	0x080094cd
 80094c0:	080094ef 	.word	0x080094ef
 80094c4:	08009511 	.word	0x08009511
 80094c8:	08009533 	.word	0x08009533
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2280      	movs	r2, #128	@ 0x80
 80094d0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	085b      	lsrs	r3, r3, #1
 80094d6:	015a      	lsls	r2, r3, #5
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	085b      	lsrs	r3, r3, #1
 80094e0:	011a      	lsls	r2, r3, #4
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2240      	movs	r2, #64	@ 0x40
 80094ea:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 80094ec:	e035      	b.n	800955a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2280      	movs	r2, #128	@ 0x80
 80094f2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	085b      	lsrs	r3, r3, #1
 80094f8:	019a      	lsls	r2, r3, #6
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	085b      	lsrs	r3, r3, #1
 8009502:	015a      	lsls	r2, r3, #5
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2280      	movs	r2, #128	@ 0x80
 800950c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800950e:	e024      	b.n	800955a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	22c0      	movs	r2, #192	@ 0xc0
 8009514:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	085b      	lsrs	r3, r3, #1
 800951a:	019a      	lsls	r2, r3, #6
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	085b      	lsrs	r3, r3, #1
 8009524:	015a      	lsls	r2, r3, #5
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2280      	movs	r2, #128	@ 0x80
 800952e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8009530:	e013      	b.n	800955a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	22e0      	movs	r2, #224	@ 0xe0
 8009536:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	085b      	lsrs	r3, r3, #1
 800953c:	019a      	lsls	r2, r3, #6
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	085b      	lsrs	r3, r3, #1
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2280      	movs	r2, #128	@ 0x80
 8009550:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8009552:	e002      	b.n	800955a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	75fb      	strb	r3, [r7, #23]
      break;
 8009558:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	2b02      	cmp	r3, #2
 800955e:	d10b      	bne.n	8009578 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2b01      	cmp	r3, #1
 8009564:	d102      	bne.n	800956c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2210      	movs	r2, #16
 800956a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2b02      	cmp	r3, #2
 8009570:	d102      	bne.n	8009578 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2208      	movs	r2, #8
 8009576:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 8009578:	7dfb      	ldrb	r3, [r7, #23]
}
 800957a:	4618      	mov	r0, r3
 800957c:	371c      	adds	r7, #28
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr
 8009586:	bf00      	nop

08009588 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009588:	b480      	push	{r7}
 800958a:	b087      	sub	sp, #28
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
 8009594:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d003      	beq.n	80095b6 <SAI_InitPCM+0x2e>
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d103      	bne.n	80095be <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2201      	movs	r2, #1
 80095ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80095bc:	e002      	b.n	80095c4 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2200      	movs	r2, #0
 80095c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80095d0:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80095d8:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2200      	movs	r2, #0
 80095de:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80095ec:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	2b04      	cmp	r3, #4
 80095f2:	d103      	bne.n	80095fc <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2201      	movs	r2, #1
 80095f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80095fa:	e002      	b.n	8009602 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	220d      	movs	r2, #13
 8009600:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b03      	cmp	r3, #3
 8009606:	d837      	bhi.n	8009678 <SAI_InitPCM+0xf0>
 8009608:	a201      	add	r2, pc, #4	@ (adr r2, 8009610 <SAI_InitPCM+0x88>)
 800960a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960e:	bf00      	nop
 8009610:	08009621 	.word	0x08009621
 8009614:	08009637 	.word	0x08009637
 8009618:	0800964d 	.word	0x0800964d
 800961c:	08009663 	.word	0x08009663
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2280      	movs	r2, #128	@ 0x80
 8009624:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	011a      	lsls	r2, r3, #4
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2240      	movs	r2, #64	@ 0x40
 8009632:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8009634:	e023      	b.n	800967e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2280      	movs	r2, #128	@ 0x80
 800963a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	015a      	lsls	r2, r3, #5
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2280      	movs	r2, #128	@ 0x80
 8009648:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800964a:	e018      	b.n	800967e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	22c0      	movs	r2, #192	@ 0xc0
 8009650:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	015a      	lsls	r2, r3, #5
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2280      	movs	r2, #128	@ 0x80
 800965e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8009660:	e00d      	b.n	800967e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	22e0      	movs	r2, #224	@ 0xe0
 8009666:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	015a      	lsls	r2, r3, #5
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2280      	movs	r2, #128	@ 0x80
 8009674:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8009676:	e002      	b.n	800967e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	75fb      	strb	r3, [r7, #23]
      break;
 800967c:	bf00      	nop
  }

  return status;
 800967e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009680:	4618      	mov	r0, r3
 8009682:	371c      	adds	r7, #28
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800968c:	b480      	push	{r7}
 800968e:	b085      	sub	sp, #20
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	460b      	mov	r3, r1
 8009696:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8009698:	2301      	movs	r3, #1
 800969a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800969c:	78fb      	ldrb	r3, [r7, #3]
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d103      	bne.n	80096aa <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f043 0308 	orr.w	r3, r3, #8
 80096a8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096ae:	2b08      	cmp	r3, #8
 80096b0:	d10b      	bne.n	80096ca <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80096b6:	2b03      	cmp	r3, #3
 80096b8:	d003      	beq.n	80096c2 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d103      	bne.n	80096ca <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f043 0310 	orr.w	r3, r3, #16
 80096c8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	2b03      	cmp	r3, #3
 80096d0:	d003      	beq.n	80096da <SAI_InterruptFlag+0x4e>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	d104      	bne.n	80096e4 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80096e0:	60fb      	str	r3, [r7, #12]
 80096e2:	e003      	b.n	80096ec <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f043 0304 	orr.w	r3, r3, #4
 80096ea:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80096ec:	68fb      	ldr	r3, [r7, #12]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3714      	adds	r7, #20
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
	...

080096fc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b085      	sub	sp, #20
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009704:	4b18      	ldr	r3, [pc, #96]	@ (8009768 <SAI_Disable+0x6c>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a18      	ldr	r2, [pc, #96]	@ (800976c <SAI_Disable+0x70>)
 800970a:	fba2 2303 	umull	r2, r3, r2, r3
 800970e:	0b1b      	lsrs	r3, r3, #12
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009726:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10a      	bne.n	8009744 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009734:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800973e:	2303      	movs	r3, #3
 8009740:	72fb      	strb	r3, [r7, #11]
      break;
 8009742:	e009      	b.n	8009758 <SAI_Disable+0x5c>
    }
    count--;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	3b01      	subs	r3, #1
 8009748:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1e7      	bne.n	8009728 <SAI_Disable+0x2c>

  return status;
 8009758:	7afb      	ldrb	r3, [r7, #11]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3714      	adds	r7, #20
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	24000004 	.word	0x24000004
 800976c:	95cbec1b 	.word	0x95cbec1b

08009770 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800977c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	69db      	ldr	r3, [r3, #28]
 8009782:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009786:	d01c      	beq.n	80097c2 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800979e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80097a0:	2100      	movs	r1, #0
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f7ff ff72 	bl	800968c <SAI_InterruptFlag>
 80097a8:	4603      	mov	r3, r0
 80097aa:	43d9      	mvns	r1, r3
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	691a      	ldr	r2, [r3, #16]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	400a      	ands	r2, r1
 80097b8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f7f6 fe08 	bl	80003d8 <HAL_SAI_TxCpltCallback>
#endif
}
 80097c8:	bf00      	nop
 80097ca:	3710      	adds	r7, #16
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097dc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f7f6 fe10 	bl	8000404 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 80097e4:	bf00      	nop
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097f8:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	69db      	ldr	r3, [r3, #28]
 80097fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009802:	d01c      	beq.n	800983e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8009812:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2200      	movs	r2, #0
 8009818:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800981c:	2100      	movs	r1, #0
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f7ff ff34 	bl	800968c <SAI_InterruptFlag>
 8009824:	4603      	mov	r3, r0
 8009826:	43d9      	mvns	r1, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	691a      	ldr	r2, [r3, #16]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	400a      	ands	r2, r1
 8009834:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2201      	movs	r2, #1
 800983a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f7f6 fdf6 	bl	8000430 <HAL_SAI_RxCpltCallback>
#endif
}
 8009844:	bf00      	nop
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009858:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f7f6 fe08 	bl	8000470 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8009860:	bf00      	nop
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009874:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f7fa f822 	bl	80038c0 <HAL_DMA_GetError>
 800987c:	4603      	mov	r3, r0
 800987e:	2b02      	cmp	r3, #2
 8009880:	d01d      	beq.n	80098be <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009888:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80098a0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f7ff ff2a 	bl	80096fc <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	f7ff fda9 	bl	8009410 <HAL_SAI_ErrorCallback>
#endif
  }
}
 80098be:	bf00      	nop
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
	...

080098c8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d101      	bne.n	80098dc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80098d8:	2301      	movs	r3, #1
 80098da:	e02b      	b.n	8009934 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d106      	bne.n	80098f6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f7f7 fe81 	bl	80015f8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2202      	movs	r2, #2
 80098fa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	3304      	adds	r3, #4
 8009906:	4619      	mov	r1, r3
 8009908:	4610      	mov	r0, r2
 800990a:	f000 f89b 	bl	8009a44 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6818      	ldr	r0, [r3, #0]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	461a      	mov	r2, r3
 8009918:	6839      	ldr	r1, [r7, #0]
 800991a:	f000 f8ef 	bl	8009afc <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800991e:	4b07      	ldr	r3, [pc, #28]	@ (800993c <HAL_SDRAM_Init+0x74>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a06      	ldr	r2, [pc, #24]	@ (800993c <HAL_SDRAM_Init+0x74>)
 8009924:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009928:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2201      	movs	r2, #1
 800992e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	52004000 	.word	0x52004000

08009940 <HAL_SDRAM_IRQHandler>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  /* Check SDRAM interrupt Rising edge flag */
  if (__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	699b      	ldr	r3, [r3, #24]
 800994e:	f003 0301 	and.w	r3, r3, #1
 8009952:	2b01      	cmp	r3, #1
 8009954:	d10a      	bne.n	800996c <HAL_SDRAM_IRQHandler+0x2c>
  {
    /* SDRAM refresh error interrupt callback */
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    hsdram->RefreshErrorCallback(hsdram);
#else
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f80c 	bl	8009974 <HAL_SDRAM_RefreshErrorCallback>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	695a      	ldr	r2, [r3, #20]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f042 0201 	orr.w	r2, r2, #1
 800996a:	615a      	str	r2, [r3, #20]
  }
}
 800996c:	bf00      	nop
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */
}
 800997c:	bf00      	nop
 800997e:	370c      	adds	r7, #12
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b086      	sub	sp, #24
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800999a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800999c:	7dfb      	ldrb	r3, [r7, #23]
 800999e:	2b02      	cmp	r3, #2
 80099a0:	d101      	bne.n	80099a6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80099a2:	2302      	movs	r3, #2
 80099a4:	e021      	b.n	80099ea <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80099a6:	7dfb      	ldrb	r3, [r7, #23]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d002      	beq.n	80099b2 <HAL_SDRAM_SendCommand+0x2a>
 80099ac:	7dfb      	ldrb	r3, [r7, #23]
 80099ae:	2b05      	cmp	r3, #5
 80099b0:	d118      	bne.n	80099e4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2202      	movs	r2, #2
 80099b6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	68b9      	ldr	r1, [r7, #8]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 f904 	bl	8009bd0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d104      	bne.n	80099da <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2205      	movs	r2, #5
 80099d4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80099d8:	e006      	b.n	80099e8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80099e2:	e001      	b.n	80099e8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e000      	b.n	80099ea <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3718      	adds	r7, #24
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b082      	sub	sp, #8
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d101      	bne.n	8009a0c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009a08:	2302      	movs	r3, #2
 8009a0a:	e016      	b.n	8009a3a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d10f      	bne.n	8009a38 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2202      	movs	r2, #2
 8009a1c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 f8f6 	bl	8009c18 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009a34:	2300      	movs	r3, #0
 8009a36:	e000      	b.n	8009a3a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3708      	adds	r7, #8
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
	...

08009a44 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d121      	bne.n	8009a9a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	4b27      	ldr	r3, [pc, #156]	@ (8009af8 <FMC_SDRAM_Init+0xb4>)
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	683a      	ldr	r2, [r7, #0]
 8009a60:	6851      	ldr	r1, [r2, #4]
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	6892      	ldr	r2, [r2, #8]
 8009a66:	4311      	orrs	r1, r2
 8009a68:	683a      	ldr	r2, [r7, #0]
 8009a6a:	68d2      	ldr	r2, [r2, #12]
 8009a6c:	4311      	orrs	r1, r2
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	6912      	ldr	r2, [r2, #16]
 8009a72:	4311      	orrs	r1, r2
 8009a74:	683a      	ldr	r2, [r7, #0]
 8009a76:	6952      	ldr	r2, [r2, #20]
 8009a78:	4311      	orrs	r1, r2
 8009a7a:	683a      	ldr	r2, [r7, #0]
 8009a7c:	6992      	ldr	r2, [r2, #24]
 8009a7e:	4311      	orrs	r1, r2
 8009a80:	683a      	ldr	r2, [r7, #0]
 8009a82:	69d2      	ldr	r2, [r2, #28]
 8009a84:	4311      	orrs	r1, r2
 8009a86:	683a      	ldr	r2, [r7, #0]
 8009a88:	6a12      	ldr	r2, [r2, #32]
 8009a8a:	4311      	orrs	r1, r2
 8009a8c:	683a      	ldr	r2, [r7, #0]
 8009a8e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009a90:	430a      	orrs	r2, r1
 8009a92:	431a      	orrs	r2, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	601a      	str	r2, [r3, #0]
 8009a98:	e026      	b.n	8009ae8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	69d9      	ldr	r1, [r3, #28]
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	6a1b      	ldr	r3, [r3, #32]
 8009aaa:	4319      	orrs	r1, r3
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ab0:	430b      	orrs	r3, r1
 8009ab2:	431a      	orrs	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	685a      	ldr	r2, [r3, #4]
 8009abc:	4b0e      	ldr	r3, [pc, #56]	@ (8009af8 <FMC_SDRAM_Init+0xb4>)
 8009abe:	4013      	ands	r3, r2
 8009ac0:	683a      	ldr	r2, [r7, #0]
 8009ac2:	6851      	ldr	r1, [r2, #4]
 8009ac4:	683a      	ldr	r2, [r7, #0]
 8009ac6:	6892      	ldr	r2, [r2, #8]
 8009ac8:	4311      	orrs	r1, r2
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	68d2      	ldr	r2, [r2, #12]
 8009ace:	4311      	orrs	r1, r2
 8009ad0:	683a      	ldr	r2, [r7, #0]
 8009ad2:	6912      	ldr	r2, [r2, #16]
 8009ad4:	4311      	orrs	r1, r2
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	6952      	ldr	r2, [r2, #20]
 8009ada:	4311      	orrs	r1, r2
 8009adc:	683a      	ldr	r2, [r7, #0]
 8009ade:	6992      	ldr	r2, [r2, #24]
 8009ae0:	430a      	orrs	r2, r1
 8009ae2:	431a      	orrs	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009ae8:	2300      	movs	r3, #0
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	370c      	adds	r7, #12
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	ffff8000 	.word	0xffff8000

08009afc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b085      	sub	sp, #20
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d128      	bne.n	8009b60 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	1e59      	subs	r1, r3, #1
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	3b01      	subs	r3, #1
 8009b22:	011b      	lsls	r3, r3, #4
 8009b24:	4319      	orrs	r1, r3
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	021b      	lsls	r3, r3, #8
 8009b2e:	4319      	orrs	r1, r3
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	3b01      	subs	r3, #1
 8009b36:	031b      	lsls	r3, r3, #12
 8009b38:	4319      	orrs	r1, r3
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	041b      	lsls	r3, r3, #16
 8009b42:	4319      	orrs	r1, r3
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	695b      	ldr	r3, [r3, #20]
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	051b      	lsls	r3, r3, #20
 8009b4c:	4319      	orrs	r1, r3
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	699b      	ldr	r3, [r3, #24]
 8009b52:	3b01      	subs	r3, #1
 8009b54:	061b      	lsls	r3, r3, #24
 8009b56:	430b      	orrs	r3, r1
 8009b58:	431a      	orrs	r2, r3
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	609a      	str	r2, [r3, #8]
 8009b5e:	e02d      	b.n	8009bbc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	689a      	ldr	r2, [r3, #8]
 8009b64:	4b19      	ldr	r3, [pc, #100]	@ (8009bcc <FMC_SDRAM_Timing_Init+0xd0>)
 8009b66:	4013      	ands	r3, r2
 8009b68:	68ba      	ldr	r2, [r7, #8]
 8009b6a:	68d2      	ldr	r2, [r2, #12]
 8009b6c:	3a01      	subs	r2, #1
 8009b6e:	0311      	lsls	r1, r2, #12
 8009b70:	68ba      	ldr	r2, [r7, #8]
 8009b72:	6952      	ldr	r2, [r2, #20]
 8009b74:	3a01      	subs	r2, #1
 8009b76:	0512      	lsls	r2, r2, #20
 8009b78:	430a      	orrs	r2, r1
 8009b7a:	431a      	orrs	r2, r3
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	1e59      	subs	r1, r3, #1
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	3b01      	subs	r3, #1
 8009b94:	011b      	lsls	r3, r3, #4
 8009b96:	4319      	orrs	r1, r3
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	021b      	lsls	r3, r3, #8
 8009ba0:	4319      	orrs	r1, r3
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	691b      	ldr	r3, [r3, #16]
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	041b      	lsls	r3, r3, #16
 8009baa:	4319      	orrs	r1, r3
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	699b      	ldr	r3, [r3, #24]
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	061b      	lsls	r3, r3, #24
 8009bb4:	430b      	orrs	r3, r1
 8009bb6:	431a      	orrs	r2, r3
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3714      	adds	r7, #20
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop
 8009bcc:	ff0f0fff 	.word	0xff0f0fff

08009bd0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b085      	sub	sp, #20
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	691a      	ldr	r2, [r3, #16]
 8009be0:	4b0c      	ldr	r3, [pc, #48]	@ (8009c14 <FMC_SDRAM_SendCommand+0x44>)
 8009be2:	4013      	ands	r3, r2
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	6811      	ldr	r1, [r2, #0]
 8009be8:	68ba      	ldr	r2, [r7, #8]
 8009bea:	6852      	ldr	r2, [r2, #4]
 8009bec:	4311      	orrs	r1, r2
 8009bee:	68ba      	ldr	r2, [r7, #8]
 8009bf0:	6892      	ldr	r2, [r2, #8]
 8009bf2:	3a01      	subs	r2, #1
 8009bf4:	0152      	lsls	r2, r2, #5
 8009bf6:	4311      	orrs	r1, r2
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	68d2      	ldr	r2, [r2, #12]
 8009bfc:	0252      	lsls	r2, r2, #9
 8009bfe:	430a      	orrs	r2, r1
 8009c00:	431a      	orrs	r2, r3
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr
 8009c14:	ffc00000 	.word	0xffc00000

08009c18 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	695a      	ldr	r2, [r3, #20]
 8009c26:	4b07      	ldr	r3, [pc, #28]	@ (8009c44 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8009c28:	4013      	ands	r3, r2
 8009c2a:	683a      	ldr	r2, [r7, #0]
 8009c2c:	0052      	lsls	r2, r2, #1
 8009c2e:	431a      	orrs	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	ffffc001 	.word	0xffffc001

08009c48 <_ZdlPvj>:
 8009c48:	f000 b800 	b.w	8009c4c <_ZdlPv>

08009c4c <_ZdlPv>:
 8009c4c:	f000 b800 	b.w	8009c50 <free>

08009c50 <free>:
 8009c50:	4b02      	ldr	r3, [pc, #8]	@ (8009c5c <free+0xc>)
 8009c52:	4601      	mov	r1, r0
 8009c54:	6818      	ldr	r0, [r3, #0]
 8009c56:	f000 b83d 	b.w	8009cd4 <_free_r>
 8009c5a:	bf00      	nop
 8009c5c:	24000014 	.word	0x24000014

08009c60 <__malloc_lock>:
 8009c60:	4801      	ldr	r0, [pc, #4]	@ (8009c68 <__malloc_lock+0x8>)
 8009c62:	f000 b835 	b.w	8009cd0 <__retarget_lock_acquire_recursive>
 8009c66:	bf00      	nop
 8009c68:	24000600 	.word	0x24000600

08009c6c <__malloc_unlock>:
 8009c6c:	4801      	ldr	r0, [pc, #4]	@ (8009c74 <__malloc_unlock+0x8>)
 8009c6e:	f000 b830 	b.w	8009cd2 <__retarget_lock_release_recursive>
 8009c72:	bf00      	nop
 8009c74:	24000600 	.word	0x24000600

08009c78 <memset>:
 8009c78:	4402      	add	r2, r0
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d100      	bne.n	8009c82 <memset+0xa>
 8009c80:	4770      	bx	lr
 8009c82:	f803 1b01 	strb.w	r1, [r3], #1
 8009c86:	e7f9      	b.n	8009c7c <memset+0x4>

08009c88 <__libc_init_array>:
 8009c88:	b570      	push	{r4, r5, r6, lr}
 8009c8a:	4d0d      	ldr	r5, [pc, #52]	@ (8009cc0 <__libc_init_array+0x38>)
 8009c8c:	4c0d      	ldr	r4, [pc, #52]	@ (8009cc4 <__libc_init_array+0x3c>)
 8009c8e:	1b64      	subs	r4, r4, r5
 8009c90:	10a4      	asrs	r4, r4, #2
 8009c92:	2600      	movs	r6, #0
 8009c94:	42a6      	cmp	r6, r4
 8009c96:	d109      	bne.n	8009cac <__libc_init_array+0x24>
 8009c98:	4d0b      	ldr	r5, [pc, #44]	@ (8009cc8 <__libc_init_array+0x40>)
 8009c9a:	4c0c      	ldr	r4, [pc, #48]	@ (8009ccc <__libc_init_array+0x44>)
 8009c9c:	f000 f864 	bl	8009d68 <_init>
 8009ca0:	1b64      	subs	r4, r4, r5
 8009ca2:	10a4      	asrs	r4, r4, #2
 8009ca4:	2600      	movs	r6, #0
 8009ca6:	42a6      	cmp	r6, r4
 8009ca8:	d105      	bne.n	8009cb6 <__libc_init_array+0x2e>
 8009caa:	bd70      	pop	{r4, r5, r6, pc}
 8009cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cb0:	4798      	blx	r3
 8009cb2:	3601      	adds	r6, #1
 8009cb4:	e7ee      	b.n	8009c94 <__libc_init_array+0xc>
 8009cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cba:	4798      	blx	r3
 8009cbc:	3601      	adds	r6, #1
 8009cbe:	e7f2      	b.n	8009ca6 <__libc_init_array+0x1e>
 8009cc0:	08009db8 	.word	0x08009db8
 8009cc4:	08009db8 	.word	0x08009db8
 8009cc8:	08009db8 	.word	0x08009db8
 8009ccc:	08009dc0 	.word	0x08009dc0

08009cd0 <__retarget_lock_acquire_recursive>:
 8009cd0:	4770      	bx	lr

08009cd2 <__retarget_lock_release_recursive>:
 8009cd2:	4770      	bx	lr

08009cd4 <_free_r>:
 8009cd4:	b538      	push	{r3, r4, r5, lr}
 8009cd6:	4605      	mov	r5, r0
 8009cd8:	2900      	cmp	r1, #0
 8009cda:	d041      	beq.n	8009d60 <_free_r+0x8c>
 8009cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ce0:	1f0c      	subs	r4, r1, #4
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	bfb8      	it	lt
 8009ce6:	18e4      	addlt	r4, r4, r3
 8009ce8:	f7ff ffba 	bl	8009c60 <__malloc_lock>
 8009cec:	4a1d      	ldr	r2, [pc, #116]	@ (8009d64 <_free_r+0x90>)
 8009cee:	6813      	ldr	r3, [r2, #0]
 8009cf0:	b933      	cbnz	r3, 8009d00 <_free_r+0x2c>
 8009cf2:	6063      	str	r3, [r4, #4]
 8009cf4:	6014      	str	r4, [r2, #0]
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cfc:	f7ff bfb6 	b.w	8009c6c <__malloc_unlock>
 8009d00:	42a3      	cmp	r3, r4
 8009d02:	d908      	bls.n	8009d16 <_free_r+0x42>
 8009d04:	6820      	ldr	r0, [r4, #0]
 8009d06:	1821      	adds	r1, r4, r0
 8009d08:	428b      	cmp	r3, r1
 8009d0a:	bf01      	itttt	eq
 8009d0c:	6819      	ldreq	r1, [r3, #0]
 8009d0e:	685b      	ldreq	r3, [r3, #4]
 8009d10:	1809      	addeq	r1, r1, r0
 8009d12:	6021      	streq	r1, [r4, #0]
 8009d14:	e7ed      	b.n	8009cf2 <_free_r+0x1e>
 8009d16:	461a      	mov	r2, r3
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	b10b      	cbz	r3, 8009d20 <_free_r+0x4c>
 8009d1c:	42a3      	cmp	r3, r4
 8009d1e:	d9fa      	bls.n	8009d16 <_free_r+0x42>
 8009d20:	6811      	ldr	r1, [r2, #0]
 8009d22:	1850      	adds	r0, r2, r1
 8009d24:	42a0      	cmp	r0, r4
 8009d26:	d10b      	bne.n	8009d40 <_free_r+0x6c>
 8009d28:	6820      	ldr	r0, [r4, #0]
 8009d2a:	4401      	add	r1, r0
 8009d2c:	1850      	adds	r0, r2, r1
 8009d2e:	4283      	cmp	r3, r0
 8009d30:	6011      	str	r1, [r2, #0]
 8009d32:	d1e0      	bne.n	8009cf6 <_free_r+0x22>
 8009d34:	6818      	ldr	r0, [r3, #0]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	6053      	str	r3, [r2, #4]
 8009d3a:	4408      	add	r0, r1
 8009d3c:	6010      	str	r0, [r2, #0]
 8009d3e:	e7da      	b.n	8009cf6 <_free_r+0x22>
 8009d40:	d902      	bls.n	8009d48 <_free_r+0x74>
 8009d42:	230c      	movs	r3, #12
 8009d44:	602b      	str	r3, [r5, #0]
 8009d46:	e7d6      	b.n	8009cf6 <_free_r+0x22>
 8009d48:	6820      	ldr	r0, [r4, #0]
 8009d4a:	1821      	adds	r1, r4, r0
 8009d4c:	428b      	cmp	r3, r1
 8009d4e:	bf04      	itt	eq
 8009d50:	6819      	ldreq	r1, [r3, #0]
 8009d52:	685b      	ldreq	r3, [r3, #4]
 8009d54:	6063      	str	r3, [r4, #4]
 8009d56:	bf04      	itt	eq
 8009d58:	1809      	addeq	r1, r1, r0
 8009d5a:	6021      	streq	r1, [r4, #0]
 8009d5c:	6054      	str	r4, [r2, #4]
 8009d5e:	e7ca      	b.n	8009cf6 <_free_r+0x22>
 8009d60:	bd38      	pop	{r3, r4, r5, pc}
 8009d62:	bf00      	nop
 8009d64:	240004c4 	.word	0x240004c4

08009d68 <_init>:
 8009d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6a:	bf00      	nop
 8009d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d6e:	bc08      	pop	{r3}
 8009d70:	469e      	mov	lr, r3
 8009d72:	4770      	bx	lr

08009d74 <_fini>:
 8009d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d76:	bf00      	nop
 8009d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d7a:	bc08      	pop	{r3}
 8009d7c:	469e      	mov	lr, r3
 8009d7e:	4770      	bx	lr
